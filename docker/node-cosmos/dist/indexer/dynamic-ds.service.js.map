{"version":3,"file":"dynamic-ds.service.js","sourceRoot":"","sources":["../../src/indexer/dynamic-ds.service.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport assert from 'assert';\nimport { Injectable } from '@nestjs/common';\nimport { isCustomCosmosDs, isRuntimeCosmosDs } from '@subql/common-cosmos';\nimport { Transaction } from 'sequelize/types';\nimport { SubqlProjectDs, SubqueryProject } from '../configure/SubqueryProject';\nimport { getLogger } from '../utils/logger';\nimport { DsProcessorService } from './ds-processor.service';\nimport { MetadataRepo } from './entities/Metadata.entity';\n\nconst logger = getLogger('dynamic-ds');\n\nconst METADATA_KEY = 'dynamicDatasources';\n\ninterface DatasourceParams {\n  templateName: string;\n  args?: Record<string, unknown>;\n  startBlock: number;\n}\n\n@Injectable()\nexport class DynamicDsService {\n  private metaDataRepo: MetadataRepo;\n\n  constructor(\n    private readonly dsProcessorService: DsProcessorService,\n    private readonly project: SubqueryProject,\n  ) {}\n\n  init(metaDataRepo: MetadataRepo): void {\n    this.metaDataRepo = metaDataRepo;\n  }\n\n  private _datasources: SubqlProjectDs[];\n\n  async createDynamicDatasource(\n    params: DatasourceParams,\n    tx: Transaction,\n  ): Promise<SubqlProjectDs> {\n    try {\n      const ds = await this.getDatasource(params);\n\n      await this.saveDynamicDatasourceParams(params, tx);\n\n      logger.info(\n        `Created new dynamic datasource from template: \"${params.templateName}\"`,\n      );\n\n      if (!this._datasources) this._datasources = [];\n      this._datasources.push(ds);\n\n      return ds;\n    } catch (e) {\n      logger.error(e.message);\n      process.exit(1);\n    }\n  }\n\n  async getDynamicDatasources(): Promise<SubqlProjectDs[]> {\n    if (!this._datasources) {\n      try {\n        const params = await this.getDynamicDatasourceParams();\n\n        this._datasources = await Promise.all(\n          params.map((params) => this.getDatasource(params)),\n        );\n      } catch (e) {\n        logger.error(`Unable to get dynamic datasources:\\n${e.message}`);\n        process.exit(1);\n      }\n    }\n\n    return this._datasources;\n  }\n\n  private async getDynamicDatasourceParams(): Promise<DatasourceParams[]> {\n    assert(this.metaDataRepo, `Model _metadata does not exist`);\n    const record = await this.metaDataRepo.findByPk(METADATA_KEY);\n    const results = record?.value;\n\n    if (!results || typeof results !== 'string') {\n      return [];\n    }\n\n    return JSON.parse(results);\n  }\n\n  private async saveDynamicDatasourceParams(\n    dsParams: DatasourceParams,\n    tx: Transaction,\n  ): Promise<void> {\n    const existing = await this.getDynamicDatasourceParams();\n\n    assert(this.metaDataRepo, `Model _metadata does not exist`);\n    await this.metaDataRepo.upsert(\n      { key: METADATA_KEY, value: JSON.stringify([...existing, dsParams]) },\n      { transaction: tx },\n    );\n  }\n\n  private async getDatasource(\n    params: DatasourceParams,\n  ): Promise<SubqlProjectDs> {\n    const template = this.project.templates.find(\n      (t) => t.name === params.templateName,\n    );\n\n    if (!template) {\n      throw new Error(\n        `Unable to find matching template in project for name: \"${params.templateName}\"`,\n      );\n    }\n\n    logger.info(\n      `Initialised dynamic datasource from template: \"${params.templateName}\"`,\n    );\n\n    const dsObj = {\n      ...template,\n      startBlock: params.startBlock,\n    } as SubqlProjectDs;\n    delete dsObj.name;\n    try {\n      if (isCustomCosmosDs(dsObj)) {\n        dsObj.processor.options = {\n          ...dsObj.processor.options,\n          ...params.args,\n        };\n        await this.dsProcessorService.validateCustomDs([dsObj]);\n      } else if (isRuntimeCosmosDs(dsObj)) {\n        // XXX add any modifications to the ds here\n      }\n\n      return dsObj;\n    } catch (e) {\n      throw new Error(`Unable to create dynamic datasource.\\n ${e.message}`);\n    }\n  }\n}\n"]}