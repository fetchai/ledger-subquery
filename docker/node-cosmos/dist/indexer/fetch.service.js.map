{"version":3,"file":"fetch.service.js","sourceRoot":"","sources":["../../src/indexer/fetch.service.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getHeapStatistics } from 'v8';\nimport { Injectable, OnApplicationShutdown } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { Interval } from '@nestjs/schedule';\nimport { RuntimeVersion } from '@polkadot/types/interfaces';\nimport {\n  isCustomCosmosDs,\n  isRuntimeCosmosDs,\n  isRuntimeDataSourceV0_3_0,\n  SubqlCosmosMessageFilter,\n  SubqlCosmosEventFilter,\n  SubqlCosmosHandlerKind,\n  SubqlCosmosHandler,\n  SubqlCosmosDataSource,\n  SubqlCosmosHandlerFilter,\n} from '@subql/common-cosmos';\nimport {\n  DictionaryQueryEntry,\n  DictionaryQueryCondition,\n  SubqlCosmosEventHandler,\n  SubqlCosmosMessageHandler,\n  SubqlCosmosRuntimeHandler,\n} from '@subql/types-cosmos';\n\nimport { isUndefined, range, sortBy, uniqBy, setWith } from 'lodash';\nimport { NodeConfig } from '../configure/NodeConfig';\nimport { SubqlProjectDs, SubqueryProject } from '../configure/SubqueryProject';\nimport * as CosmosUtil from '../utils/cosmos';\nimport { getLogger } from '../utils/logger';\nimport { profiler, profilerWrap } from '../utils/profiler';\nimport { isBaseHandler, isCustomHandler } from '../utils/project';\nimport { delay } from '../utils/promise';\nimport { getYargsOption } from '../yargs';\nimport { ApiService, CosmosClient } from './api.service';\nimport { BlockedQueue } from './BlockedQueue';\nimport { Dictionary, DictionaryService } from './dictionary.service';\nimport { DsProcessorService } from './ds-processor.service';\nimport { DynamicDsService } from './dynamic-ds.service';\nimport { IndexerEvent } from './events';\nimport { BlockContent } from './types';\n\nconst logger = getLogger('fetch');\nconst BLOCK_TIME_VARIANCE = 5;\nconst DICTIONARY_MAX_QUERY_SIZE = 10000;\nconst CHECK_MEMORY_INTERVAL = 60000;\nconst HIGH_THRESHOLD = 0.85;\nconst LOW_THRESHOLD = 0.6;\nconst MINIMUM_BATCH_SIZE = 5;\n\nconst { argv } = getYargsOption();\n\nconst fetchBlocksBatches = argv.profiler\n  ? profilerWrap(\n      CosmosUtil.fetchBlocksBatches,\n      'CosmosUtil',\n      'fetchBlocksBatches',\n    )\n  : CosmosUtil.fetchBlocksBatches;\n\nexport function eventFilterToQueryEntry(\n  filter: SubqlCosmosEventFilter,\n): DictionaryQueryEntry {\n  const conditions: DictionaryQueryCondition[] = [\n    {\n      field: 'type',\n      value: filter.type,\n      matcher: 'equalTo',\n    },\n  ];\n  if (filter.messageFilter !== undefined) {\n    const messageFilter = messageFilterToQueryEntry(\n      filter.messageFilter,\n    ).conditions.map((f) => {\n      if (f.field === 'type') {\n        return { ...f, field: 'msgType' };\n      }\n      return f;\n    });\n\n    conditions.push(...messageFilter);\n  }\n  return {\n    entity: 'events',\n    conditions: conditions,\n  };\n}\n\nexport function messageFilterToQueryEntry(\n  filter: SubqlCosmosMessageFilter,\n): DictionaryQueryEntry {\n  const conditions: DictionaryQueryCondition[] = [\n    {\n      field: 'type',\n      value: filter.type,\n      matcher: 'equalTo',\n    },\n  ];\n\n  if (filter.values !== undefined) {\n    const nested = {};\n\n    // convert nested filters from `msg.swap.input_token` to { msg: { swap: { input_token: 'Token2' } } }\n    Object.keys(filter.values).map((key) => {\n      const value = filter.values[key];\n      setWith(nested, key, value);\n    });\n\n    conditions.push({\n      field: 'data',\n      value: nested,\n      matcher: 'contains',\n    });\n  }\n  return {\n    entity: 'messages',\n    conditions: conditions,\n  };\n}\nfunction checkMemoryUsage(batchSize: number, batchSizeScale: number): number {\n  const memoryData = getHeapStatistics();\n  const ratio = memoryData.used_heap_size / memoryData.heap_size_limit;\n  if (argv.profiler) {\n    logger.info(`Heap Statistics: ${JSON.stringify(memoryData)}`);\n    logger.info(`Heap Usage: ${ratio}`);\n  }\n  let scale = batchSizeScale;\n\n  if (ratio > HIGH_THRESHOLD) {\n    if (scale > 0) {\n      scale = Math.max(scale - 0.1, 0);\n      logger.debug(`Heap usage: ${ratio}, decreasing batch size by 10%`);\n    }\n  }\n\n  if (ratio < LOW_THRESHOLD) {\n    if (scale < 1) {\n      scale = Math.min(scale + 0.1, 1);\n      logger.debug(`Heap usage: ${ratio} increasing batch size by 10%`);\n    }\n  }\n  return scale;\n}\n\n@Injectable()\nexport class FetchService implements OnApplicationShutdown {\n  private latestBestHeight: number;\n  private latestFinalizedHeight: number;\n  private latestProcessedHeight: number;\n  private latestBufferedHeight: number;\n  private blockBuffer: BlockedQueue<BlockContent>;\n  private blockNumberBuffer: BlockedQueue<number>;\n  private isShutdown = false;\n  private useDictionary: boolean;\n  private dictionaryQueryEntries?: DictionaryQueryEntry[];\n  private batchSizeScale: number;\n  private templateDynamicDatasouces: SubqlProjectDs[];\n\n  constructor(\n    private apiService: ApiService,\n    private nodeConfig: NodeConfig,\n    private project: SubqueryProject,\n    private dictionaryService: DictionaryService,\n    private dsProcessorService: DsProcessorService,\n    private dynamicDsService: DynamicDsService,\n    private eventEmitter: EventEmitter2,\n  ) {\n    this.blockBuffer = new BlockedQueue<BlockContent>(\n      this.nodeConfig.batchSize * 3,\n    );\n    this.blockNumberBuffer = new BlockedQueue<number>(\n      this.nodeConfig.batchSize * 3,\n    );\n    this.batchSizeScale = 1;\n  }\n\n  onApplicationShutdown(): void {\n    this.isShutdown = true;\n  }\n\n  get api(): CosmosClient {\n    return this.apiService.getApi();\n  }\n\n  async syncDynamicDatascourcesFromMeta(): Promise<void> {\n    this.templateDynamicDatasouces =\n      await this.dynamicDsService.getDynamicDatasources();\n  }\n\n  getDictionaryQueryEntries(): DictionaryQueryEntry[] {\n    const queryEntries: DictionaryQueryEntry[] = [];\n\n    const dataSources = this.project.dataSources.filter((ds) =>\n      isRuntimeDataSourceV0_3_0(ds),\n    );\n    for (const ds of dataSources.concat(this.templateDynamicDatasouces)) {\n      const plugin = isCustomCosmosDs(ds)\n        ? this.dsProcessorService.getDsProcessor(ds)\n        : undefined;\n      for (const handler of ds.mapping.handlers) {\n        const baseHandlerKind = this.getBaseHandlerKind(ds, handler);\n        let filterList: SubqlCosmosHandlerFilter[];\n        if (isCustomCosmosDs(ds)) {\n          const processor = plugin.handlerProcessors[handler.kind];\n          filterList = this.getBaseHandlerFilters<SubqlCosmosHandlerFilter>(\n            ds,\n            handler.kind,\n          );\n        } else {\n          filterList = [\n            (handler as SubqlCosmosEventHandler | SubqlCosmosMessageHandler)\n              .filter,\n          ];\n        }\n        filterList = filterList.filter((f) => f);\n        if (!filterList.length) return [];\n        switch (baseHandlerKind) {\n          case SubqlCosmosHandlerKind.Message: {\n            for (const filter of filterList as SubqlCosmosMessageFilter[]) {\n              if (filter.type !== undefined) {\n                queryEntries.push(messageFilterToQueryEntry(filter));\n              } else {\n                return [];\n              }\n            }\n            break;\n          }\n          case SubqlCosmosHandlerKind.Event: {\n            for (const filter of filterList as SubqlCosmosEventFilter[]) {\n              if (filter.type !== undefined) {\n                queryEntries.push(eventFilterToQueryEntry(filter));\n              } else {\n                return [];\n              }\n            }\n            break;\n          }\n          default:\n        }\n      }\n    }\n\n    return uniqBy(\n      queryEntries,\n      (item) =>\n        `${item.entity}|${JSON.stringify(\n          sortBy(item.conditions, (c) => c.field),\n        )}`,\n    );\n  }\n\n  register(next: (value: BlockContent) => Promise<void>): () => void {\n    let stopper = false;\n    void (async () => {\n      while (!stopper && !this.isShutdown) {\n        const block = await this.blockBuffer.take();\n        this.eventEmitter.emit(IndexerEvent.BlockQueueSize, {\n          value: this.blockBuffer.size,\n        });\n        let success = false;\n        while (!success) {\n          try {\n            await next(block);\n            success = true;\n          } catch (e) {\n            logger.error(\n              e,\n              `failed to index block at height ${block.block.block.header.height.toString()} ${\n                e.handler ? `${e.handler}(${e.handlerArgs ?? ''})` : ''\n              }`,\n            );\n            process.exit(1);\n          }\n        }\n      }\n    })();\n    return () => (stopper = true);\n  }\n\n  updateDictionary() {\n    this.dictionaryQueryEntries = this.getDictionaryQueryEntries();\n    this.useDictionary =\n      !!this.dictionaryQueryEntries?.length &&\n      !!this.project.network.dictionary;\n  }\n\n  async init(): Promise<void> {\n    await this.syncDynamicDatascourcesFromMeta();\n    this.updateDictionary();\n    this.eventEmitter.emit(IndexerEvent.UsingDictionary, {\n      value: Number(this.useDictionary),\n    });\n    await this.getLatestBlockHead();\n  }\n\n  @Interval(CHECK_MEMORY_INTERVAL)\n  checkBatchScale() {\n    if (argv['scale-batch-size']) {\n      const scale = checkMemoryUsage(\n        this.nodeConfig.batchSize,\n        this.batchSizeScale,\n      );\n\n      if (this.batchSizeScale !== scale) {\n        this.batchSizeScale = scale;\n      }\n    }\n  }\n\n  @Interval(BLOCK_TIME_VARIANCE * 1000)\n  async getLatestBlockHead(): Promise<void> {\n    if (!this.api) {\n      logger.debug(`Skip fetch finalized block until API is ready`);\n      return;\n    }\n    try {\n      const currentFinalizedHeight = await this.api.getHeight();\n      if (this.latestFinalizedHeight !== currentFinalizedHeight) {\n        this.latestFinalizedHeight = currentFinalizedHeight;\n        this.eventEmitter.emit(IndexerEvent.BlockTarget, {\n          height: this.latestFinalizedHeight,\n        });\n      }\n    } catch (e) {\n      logger.error(e, `Having a problem when get finalized block`);\n    }\n  }\n\n  latestProcessed(height: number): void {\n    this.latestProcessedHeight = height;\n  }\n\n  async startLoop(initBlockHeight: number): Promise<void> {\n    if (isUndefined(this.latestProcessedHeight)) {\n      this.latestProcessedHeight = initBlockHeight - 1;\n    }\n    await Promise.all([\n      this.fillNextBlockBuffer(initBlockHeight),\n      this.fillBlockBuffer(),\n    ]);\n  }\n\n  async fillNextBlockBuffer(initBlockHeight: number): Promise<void> {\n    let startBlockHeight: number;\n    let scaledBatchSize: number;\n\n    const getStartBlockHeight = (): number => {\n      return this.latestBufferedHeight\n        ? this.latestBufferedHeight + 1\n        : initBlockHeight;\n    };\n\n    while (!this.isShutdown) {\n      startBlockHeight = getStartBlockHeight();\n\n      scaledBatchSize = Math.max(\n        Math.round(this.batchSizeScale * this.nodeConfig.batchSize),\n        Math.min(MINIMUM_BATCH_SIZE, this.nodeConfig.batchSize * 3),\n      );\n\n      if (\n        this.blockNumberBuffer.freeSize < scaledBatchSize ||\n        startBlockHeight > this.latestFinalizedHeight\n      ) {\n        await delay(1);\n        continue;\n      }\n      if (this.useDictionary) {\n        const queryEndBlock = startBlockHeight + DICTIONARY_MAX_QUERY_SIZE;\n        try {\n          const dictionary = await this.dictionaryService.getDictionary(\n            startBlockHeight,\n            queryEndBlock,\n            scaledBatchSize,\n            this.dictionaryQueryEntries,\n          );\n\n          if (startBlockHeight !== getStartBlockHeight()) {\n            logger.debug(\n              `Queue was reset for new DS, discarding dictionary query result`,\n            );\n            continue;\n          }\n\n          if (\n            dictionary &&\n            (await this.dictionaryValidation(dictionary, startBlockHeight))\n          ) {\n            const { batchBlocks } = dictionary;\n            if (batchBlocks.length === 0) {\n              this.setLatestBufferedHeight(\n                Math.min(\n                  queryEndBlock - 1,\n                  dictionary._metadata.lastProcessedHeight,\n                ),\n              );\n            } else {\n              this.blockNumberBuffer.putAll(batchBlocks);\n              this.setLatestBufferedHeight(batchBlocks[batchBlocks.length - 1]);\n            }\n            this.eventEmitter.emit(IndexerEvent.BlocknumberQueueSize, {\n              value: this.blockNumberBuffer.size,\n            });\n            continue; // skip nextBlockRange() way\n          }\n          // else use this.nextBlockRange()\n        } catch (e) {\n          logger.debug(`Fetch dictionary stopped: ${e.message}`);\n          this.eventEmitter.emit(IndexerEvent.SkipDictionary);\n        }\n      }\n      // the original method: fill next batch size of blocks\n      const endHeight = this.nextEndBlockHeight(\n        startBlockHeight,\n        scaledBatchSize,\n      );\n      this.blockNumberBuffer.putAll(range(startBlockHeight, endHeight + 1));\n      this.setLatestBufferedHeight(endHeight);\n    }\n  }\n\n  async fillBlockBuffer(): Promise<void> {\n    while (!this.isShutdown) {\n      const takeCount = Math.min(\n        this.blockBuffer.freeSize,\n        Math.round(this.batchSizeScale * this.nodeConfig.batchSize),\n      );\n\n      if (this.blockNumberBuffer.size === 0 || takeCount === 0) {\n        await delay(1);\n        continue;\n      }\n\n      // Used to compare before and after as a way to check if new DS created\n      const bufferedHeight = this.latestBufferedHeight;\n\n      const bufferBlocks = await this.blockNumberBuffer.takeAll(takeCount);\n      const blocks = await fetchBlocksBatches(this.api, bufferBlocks);\n      logger.info(\n        `fetch block [${bufferBlocks[0]},${\n          bufferBlocks[bufferBlocks.length - 1]\n        }], total ${bufferBlocks.length} blocks`,\n      );\n\n      if (bufferedHeight > this.latestBufferedHeight) {\n        logger.debug(`Queue was reset for new DS, discarding fetched blocks`);\n        continue;\n      }\n      this.blockBuffer.putAll(blocks);\n      this.eventEmitter.emit(IndexerEvent.BlockQueueSize, {\n        value: this.blockBuffer.size,\n      });\n    }\n  }\n\n  private nextEndBlockHeight(\n    startBlockHeight: number,\n    scaledBatchSize: number,\n  ): number {\n    let endBlockHeight = startBlockHeight + scaledBatchSize - 1;\n\n    if (endBlockHeight > this.latestFinalizedHeight) {\n      endBlockHeight = this.latestFinalizedHeight;\n    }\n    return endBlockHeight;\n  }\n\n  async resetForNewDs(blockHeight: number): Promise<void> {\n    await this.syncDynamicDatascourcesFromMeta();\n    this.updateDictionary();\n    this.blockBuffer.reset();\n    this.blockNumberBuffer.reset();\n    this.setLatestBufferedHeight(blockHeight);\n  }\n\n  private async dictionaryValidation(\n    { _metadata: metaData }: Dictionary,\n    startBlockHeight: number,\n  ): Promise<boolean> {\n    const chain = await this.api.getChainId();\n    if (metaData.chain !== chain) {\n      logger.warn(`Dictionary is disabled since now`);\n      this.useDictionary = false;\n      this.eventEmitter.emit(IndexerEvent.UsingDictionary, {\n        value: Number(this.useDictionary),\n      });\n      this.eventEmitter.emit(IndexerEvent.SkipDictionary);\n      return false;\n    }\n    if (metaData.lastProcessedHeight < startBlockHeight) {\n      logger.warn(\n        `Dictionary indexed block is behind current indexing block height`,\n      );\n      this.eventEmitter.emit(IndexerEvent.SkipDictionary);\n      return false;\n    }\n    return true;\n  }\n\n  private setLatestBufferedHeight(height: number): void {\n    this.latestBufferedHeight = height;\n    this.eventEmitter.emit(IndexerEvent.BlocknumberQueueSize, {\n      value: this.blockNumberBuffer.size,\n    });\n  }\n\n  private getBaseHandlerKind(\n    ds: SubqlCosmosDataSource,\n    handler: SubqlCosmosHandler,\n  ): SubqlCosmosHandlerKind {\n    if (isRuntimeCosmosDs(ds) && isBaseHandler(handler)) {\n      return (handler as SubqlCosmosRuntimeHandler).kind;\n    } else if (isCustomCosmosDs(ds) && isCustomHandler(handler)) {\n      const plugin = this.dsProcessorService.getDsProcessor(ds);\n      const baseHandler =\n        plugin.handlerProcessors[handler.kind]?.baseHandlerKind;\n      if (!baseHandler) {\n        throw new Error(\n          `handler type ${handler.kind} not found in processor for ${ds.kind}`,\n        );\n      }\n      return baseHandler;\n    }\n  }\n\n  private getBaseHandlerFilters<T extends SubqlCosmosHandlerFilter>(\n    ds: SubqlCosmosDataSource,\n    handlerKind: string,\n  ): T[] {\n    if (isCustomCosmosDs(ds)) {\n      const plugin = this.dsProcessorService.getDsProcessor(ds);\n      const processor = plugin.handlerProcessors[handlerKind];\n      return processor.baseFilter instanceof Array\n        ? (processor.baseFilter as T[])\n        : ([processor.baseFilter] as T[]);\n    } else {\n      throw new Error(`expect custom datasource here`);\n    }\n  }\n}\n"]}