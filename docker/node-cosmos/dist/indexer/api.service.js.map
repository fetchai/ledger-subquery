{"version":3,"file":"api.service.js","sourceRoot":"","sources":["../../src/indexer/api.service.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport http from 'http';\nimport https from 'https';\nimport { TextDecoder } from 'util';\nimport { CosmWasmClient } from '@cosmjs/cosmwasm-stargate';\nimport { toHex } from '@cosmjs/encoding';\nimport {\n  isJsonRpcErrorResponse,\n  JsonRpcRequest,\n  JsonRpcSuccessResponse,\n  parseJsonRpcResponse,\n} from '@cosmjs/json-rpc';\nimport { Uint53 } from '@cosmjs/math';\nimport { DecodeObject, GeneratedType, Registry } from '@cosmjs/proto-signing';\nimport { Block, IndexedTx, defaultRegistryTypes } from '@cosmjs/stargate';\nimport {\n  HttpEndpoint,\n  Tendermint34Client,\n  toRfc3339WithNanoseconds,\n  BlockResultsResponse,\n} from '@cosmjs/tendermint-rpc';\nimport { Injectable } from '@nestjs/common';\nimport axios, { AxiosInstance, AxiosError } from 'axios';\nimport { MsgVoteWeighted } from 'cosmjs-types/cosmos/gov/v1beta1/tx';\nimport {\n  MsgClearAdmin,\n  MsgExecuteContract,\n  MsgInstantiateContract,\n  MsgMigrateContract,\n  MsgStoreCode,\n  MsgUpdateAdmin,\n} from 'cosmjs-types/cosmwasm/wasm/v1/tx';\nimport { EventEmitter2 } from 'eventemitter2';\nimport {\n  CosmosProjectNetConfig,\n  SubqueryProject,\n} from '../configure/SubqueryProject';\nimport { getLogger } from '../utils/logger';\nimport { DsProcessorService } from './ds-processor.service';\nimport { NetworkMetadataPayload } from './events';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { version: packageVersion } = require('../../package.json');\n\nconst logger = getLogger('api');\n\n@Injectable()\nexport class ApiService {\n  private api: CosmosClient;\n  networkMeta: NetworkMetadataPayload;\n  dsProcessor: DsProcessorService;\n  registry: Registry;\n  constructor(\n    protected project: SubqueryProject,\n    private eventEmitter: EventEmitter2,\n  ) {}\n\n  async init(): Promise<ApiService> {\n    try {\n      const { network } = this.project;\n      // https://github.com/cosmos/cosmjs/blob/ae06012a1510ddf48068bbf21374c0bbff3d5bab/packages/cosmwasm-stargate/src/modules/wasm/messages.ts#L11\n      const wasmTypes: ReadonlyArray<[string, GeneratedType]> = [\n        ['/cosmwasm.wasm.v1.MsgClearAdmin', MsgClearAdmin],\n        ['/cosmwasm.wasm.v1.MsgExecuteContract', MsgExecuteContract],\n        ['/cosmwasm.wasm.v1.MsgMigrateContract', MsgMigrateContract],\n        ['/cosmwasm.wasm.v1.MsgStoreCode', MsgStoreCode],\n        ['/cosmwasm.wasm.v1.MsgInstantiateContract', MsgInstantiateContract],\n        ['/cosmwasm.wasm.v1.MsgUpdateAdmin', MsgUpdateAdmin],\n      ];\n\n      const endpoint: HttpEndpoint = {\n        url: network.endpoint,\n        headers: {\n          'User-Agent': `SubQuery-Node ${packageVersion}`,\n        },\n      };\n\n      const keepAliveClient = new KeepAliveClient(endpoint);\n      const tendermint = await Tendermint34Client.create(keepAliveClient);\n      this.registry = new Registry([...defaultRegistryTypes, ...wasmTypes]);\n\n      const chaintypes = await this.getChainType(network);\n      for (const typeurl in chaintypes) {\n        this.registry.register(typeurl, chaintypes[typeurl]);\n      }\n\n      this.api = new CosmosClient(tendermint, this.registry);\n\n      this.networkMeta = {\n        chainId: network.chainId,\n      };\n\n      const chainId = await this.api.getChainId();\n      if (network.chainId !== chainId) {\n        const err = new Error(\n          `The given chainId does not match with client: \"${network.chainId}\"`,\n        );\n        logger.error(err, err.message);\n        throw err;\n      }\n\n      return this;\n    } catch (e) {\n      logger.error(e, 'Failed to init api service');\n      process.exit(1);\n    }\n  }\n\n  getApi(): CosmosClient {\n    return this.api;\n  }\n\n  async getSafeApi(height: number): Promise<CosmosSafeClient> {\n    const { network } = this.project;\n    const endpoint: HttpEndpoint = {\n      url: network.endpoint,\n      headers: {\n        'User-Agent': `SubQuery-Node ${packageVersion}`,\n      },\n    };\n    const client = await CosmosSafeClient.safeConnect(endpoint, height);\n    return client;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async getChainType(\n    network: Partial<CosmosProjectNetConfig>,\n  ): Promise<Record<string, GeneratedType>> {\n    if (!network.chainTypes) {\n      return {};\n    }\n\n    const res: Record<string, GeneratedType> = {};\n    for (const [\n      userPackageName,\n      { messages, packageName },\n    ] of network.chainTypes) {\n      const pkgName = packageName ?? userPackageName;\n      for (const msg of messages) {\n        logger.info(`Registering chain message type \"/${pkgName}.${msg}\"`);\n        const msgObj = network.chainTypes.protoRoot.lookupType(\n          `${pkgName}.${msg}`,\n        );\n        res[`/${pkgName}.${msg}`] = msgObj;\n      }\n    }\n    return res;\n  }\n}\n\nexport class CosmosClient extends CosmWasmClient {\n  constructor(\n    private readonly tendermintClient: Tendermint34Client,\n    private registry: Registry,\n  ) {\n    super(tendermintClient);\n  }\n\n  /*\n  async chainId(): Promise<string> {\n    return this.getChainId();\n  }\n\n  async finalisedHeight(): Promise<number> {\n    return this.getHeight();\n  }\n  */\n\n  async blockInfo(height?: number): Promise<Block> {\n    return this.getBlock(height);\n  }\n\n  async txInfoByHeight(height: number): Promise<readonly IndexedTx[]> {\n    return this.searchTx({ height: height });\n  }\n\n  async blockResults(height: number): Promise<BlockResultsResponse> {\n    const blockRes = await this.tendermintClient.blockResults(height);\n    return blockRes;\n  }\n\n  decodeMsg<T = unknown>(msg: DecodeObject): T {\n    try {\n      const decodedMsg = this.registry.decode(msg);\n      if (\n        [\n          '/cosmwasm.wasm.v1.MsgExecuteContract',\n          '/cosmwasm.wasm.v1.MsgMigrateContract',\n          '/cosmwasm.wasm.v1.MsgInstantiateContract',\n        ].includes(msg.typeUrl)\n      ) {\n        decodedMsg.msg = JSON.parse(new TextDecoder().decode(decodedMsg.msg));\n      }\n      return decodedMsg;\n    } catch (e) {\n      logger.error(e, 'Failed to decode message');\n      throw e;\n    }\n  }\n}\n\nexport class CosmosSafeClient extends CosmWasmClient {\n  height: number;\n\n  static async safeConnect(\n    endpoint: string | HttpEndpoint,\n    height: number,\n  ): Promise<CosmosSafeClient> {\n    const keepAliveClient = new KeepAliveClient(endpoint);\n    const tmClient = await Tendermint34Client.create(keepAliveClient);\n    return new CosmosSafeClient(tmClient, height);\n  }\n\n  constructor(tmClient: Tendermint34Client | undefined, height: number) {\n    super(tmClient);\n    this.height = height;\n  }\n\n  async getBlock(): Promise<Block> {\n    const response = await this.forceGetTmClient().block(this.height);\n    return {\n      id: toHex(response.blockId.hash).toUpperCase(),\n      header: {\n        version: {\n          block: new Uint53(response.block.header.version.block).toString(),\n          app: new Uint53(response.block.header.version.app).toString(),\n        },\n        height: response.block.header.height,\n        chainId: response.block.header.chainId,\n        time: toRfc3339WithNanoseconds(response.block.header.time),\n      },\n      txs: response.block.txs,\n    };\n  }\n\n  async searchTx(): Promise<readonly IndexedTx[]> {\n    const txs: readonly IndexedTx[] = await this.safeTxsQuery(\n      `tx.height=${this.height}`,\n    );\n    return txs;\n  }\n\n  private async safeTxsQuery(query: string): Promise<readonly IndexedTx[]> {\n    const results = await this.forceGetTmClient().txSearchAll({ query: query });\n    return results.txs.map((tx) => {\n      return {\n        height: tx.height,\n        hash: toHex(tx.hash).toUpperCase(),\n        code: tx.result.code,\n        rawLog: tx.result.log || '',\n        tx: tx.tx,\n        gasUsed: tx.result.gasUsed,\n        gasWanted: tx.result.gasWanted,\n      };\n    });\n  }\n}\n\nexport interface RpcClient {\n  readonly execute: (\n    request: JsonRpcRequest,\n  ) => Promise<JsonRpcSuccessResponse>;\n  readonly disconnect: () => void;\n}\n\nexport function hasProtocol(url: string): boolean {\n  return url.search('://') !== -1;\n}\n\nexport async function httpRequest(\n  connection: AxiosInstance,\n  request?: any,\n): Promise<any> {\n  const { data } = await connection.post('/', request);\n\n  return data;\n}\n\nexport class KeepAliveClient implements RpcClient {\n  protected readonly url: string;\n  protected readonly headers: Record<string, string> | undefined;\n  connection: AxiosInstance;\n\n  constructor(endpoint: string | HttpEndpoint) {\n    if (typeof endpoint === 'string') {\n      // accept host.name:port and assume http protocol\n      this.url = hasProtocol(endpoint) ? endpoint : `http://${endpoint}`;\n    } else {\n      this.url = endpoint.url;\n      this.headers = endpoint.headers;\n    }\n    const httpAgent = new http.Agent({ keepAlive: true, maxSockets: 10 });\n    const httpsAgent = new https.Agent({ keepAlive: true, maxSockets: 10 });\n    this.connection = axios.create({\n      httpAgent,\n      httpsAgent,\n      baseURL: this.url,\n      headers: this.headers,\n    });\n  }\n\n  disconnect(): void {\n    // nothing to be done\n  }\n\n  async execute(request: JsonRpcRequest): Promise<JsonRpcSuccessResponse> {\n    const response = parseJsonRpcResponse(\n      await httpRequest(this.connection, request),\n    );\n    if (isJsonRpcErrorResponse(response)) {\n      throw new Error(JSON.stringify(response.error));\n    }\n    return response;\n  }\n}\n"]}