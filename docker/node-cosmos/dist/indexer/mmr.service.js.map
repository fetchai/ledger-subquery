{"version":3,"file":"mmr.service.js","sourceRoot":"","sources":["../../src/indexer/mmr.service.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport { Injectable, OnApplicationShutdown } from '@nestjs/common';\nimport { u8aToHex, u8aEq } from '@polkadot/util';\nimport { DEFAULT_WORD_SIZE, DEFAULT_LEAF, MMR_AWAIT_TIME } from '@subql/common';\nimport { MMR, FileBasedDb } from '@subql/x-merkle-mountain-range';\nimport { keccak256 } from 'js-sha3';\nimport { Sequelize, Op } from 'sequelize';\nimport { NodeConfig } from '../configure/NodeConfig';\nimport { SubqueryProject } from '../configure/SubqueryProject';\nimport { getLogger } from '../utils/logger';\nimport { delay } from '../utils/promise';\nimport { MetadataFactory, MetadataRepo } from './entities/Metadata.entity';\nimport { PoiFactory, PoiRepo, ProofOfIndex } from './entities/Poi.entity';\nimport { MmrPayload, MmrProof } from './events';\nconst logger = getLogger('mmr');\n\nconst DEFAULT_FETCH_RANGE = 100;\n\nconst keccak256Hash = (...nodeValues) =>\n  Buffer.from(keccak256(Buffer.concat(nodeValues)), 'hex');\n\n@Injectable()\nexport class MmrService implements OnApplicationShutdown {\n  private isShutdown = false;\n  private metadataRepo: MetadataRepo;\n  private fileBasedMmr: MMR;\n  private poiRepo: PoiRepo;\n  // This is the next block height that suppose to calculate its mmr value\n  private nextMmrBlockHeight: number;\n  private blockOffset: number;\n\n  constructor(\n    protected nodeConfig: NodeConfig,\n    protected project: SubqueryProject,\n    protected sequelize: Sequelize,\n  ) {}\n\n  onApplicationShutdown(): void {\n    this.isShutdown = true;\n  }\n\n  async syncFileBaseFromPoi(\n    schema: string,\n    blockOffset: number,\n  ): Promise<void> {\n    this.metadataRepo = MetadataFactory(this.sequelize, schema);\n    this.poiRepo = PoiFactory(this.sequelize, schema);\n    this.fileBasedMmr = await this.ensureFileBasedMmr(this.nodeConfig.mmrPath);\n    this.blockOffset = blockOffset;\n\n    // The file based database current leaf length\n    const fileBasedMmrLeafLength = await this.fileBasedMmr.getLeafLength();\n    // However, when initialization we pick the previous block for file db and poi mmr validation\n    // if mmr leaf length 0 ensure the next block height to be processed min is 1.\n    this.nextMmrBlockHeight = fileBasedMmrLeafLength + blockOffset + 1;\n    // The latest poi record in database with mmr value\n    const latestPoiWithMmr = await this.getLatestPoiWithMmr();\n    if (latestPoiWithMmr) {\n      // The latestPoiWithMmr its mmr value in filebase db\n      const latestPoiFilebaseMmrValue = await this.fileBasedMmr.getRoot(\n        latestPoiWithMmr.id - blockOffset - 1,\n      );\n      this.validatePoiMmr(latestPoiWithMmr, latestPoiFilebaseMmrValue);\n    }\n    logger.info(\n      `file based database MMR start with next block height at ${this.nextMmrBlockHeight}`,\n    );\n    while (!this.isShutdown) {\n      const poiBlocks = await this.getPoiBlocksByRange(this.nextMmrBlockHeight);\n      if (poiBlocks.length !== 0) {\n        for (const block of poiBlocks) {\n          if (this.nextMmrBlockHeight < block.id) {\n            for (let i = this.nextMmrBlockHeight; i < block.id; i++) {\n              await this.fileBasedMmr.append(DEFAULT_LEAF);\n              this.nextMmrBlockHeight = i + 1;\n            }\n          }\n          await this.appendMmrNode(block);\n        }\n      } else {\n        const keys = ['lastProcessedHeight', 'lastPoiHeight'] as const;\n        const entries = await this.metadataRepo.findAll({\n          where: {\n            key: keys,\n          },\n        });\n        const keyValue = entries.reduce((arr, curr) => {\n          arr[curr.key] = curr.value;\n          return arr;\n        }, {} as { [key in typeof keys[number]]: string | boolean | number });\n        // this.nextMmrBlockHeight means block before nextMmrBlockHeight-1 already exist in filebase mmr\n        if (\n          this.nextMmrBlockHeight > Number(keyValue.lastPoiHeight) &&\n          this.nextMmrBlockHeight <= Number(keyValue.lastProcessedHeight)\n        ) {\n          for (\n            let i = this.nextMmrBlockHeight;\n            i <= Number(keyValue.lastProcessedHeight);\n            i++\n          ) {\n            await this.fileBasedMmr.append(DEFAULT_LEAF);\n            this.nextMmrBlockHeight = i + 1;\n          }\n        }\n        await delay(MMR_AWAIT_TIME);\n      }\n    }\n  }\n\n  async appendMmrNode(poiBlock: ProofOfIndex): Promise<void> {\n    const newLeaf = poiBlock.hash;\n    if (newLeaf.length !== DEFAULT_WORD_SIZE) {\n      throw new Error(\n        `Append Mmr failed, input data length should be ${DEFAULT_WORD_SIZE}`,\n      );\n    }\n    const estLeafIndexByBlockHeight = poiBlock.id - this.blockOffset - 1;\n    // The next leaf index in mmr, current latest leaf index always .getLeafLength -1.\n    await this.fileBasedMmr.append(newLeaf, estLeafIndexByBlockHeight);\n    const mmrRoot = await this.fileBasedMmr.getRoot(estLeafIndexByBlockHeight);\n    await this.updatePoiMmrRoot(poiBlock.id, mmrRoot);\n    this.nextMmrBlockHeight = poiBlock.id + 1;\n  }\n\n  validatePoiMmr(poiWithMmr: ProofOfIndex, mmrValue: Uint8Array) {\n    if (!u8aEq(poiWithMmr.mmrRoot, mmrValue)) {\n      throw new Error(\n        `Poi block height ${poiWithMmr.id}, Poi mmr ${u8aToHex(\n          poiWithMmr.mmrRoot,\n        )} not same as filebased mmr: ${u8aToHex(mmrValue)}`,\n      );\n    } else {\n      logger.info(\n        `CHECKING : Poi block height ${poiWithMmr.id}, Poi mmr is same as file based mmr`, //remove for debug\n      );\n    }\n  }\n\n  async updatePoiMmrRoot(id: number, mmrValue: Uint8Array): Promise<void> {\n    const poiBlock = await this.poiRepo.findByPk(id);\n    if (poiBlock.mmrRoot === null) {\n      poiBlock.mmrRoot = mmrValue;\n      await poiBlock.save();\n    } else {\n      this.validatePoiMmr(poiBlock, mmrValue);\n    }\n  }\n\n  async getPoiBlocksByRange(startHeight: number): Promise<ProofOfIndex[]> {\n    const poiBlocks = await this.poiRepo.findAll({\n      limit: DEFAULT_FETCH_RANGE,\n      where: { id: { [Op.gte]: startHeight } },\n      order: [['id', 'ASC']],\n    });\n    if (poiBlocks.length !== 0) {\n      return poiBlocks;\n    } else {\n      return [];\n    }\n  }\n\n  async getLatestPoiWithMmr(): Promise<ProofOfIndex> {\n    const poiBlock = await this.poiRepo.findOne({\n      order: [['id', 'DESC']],\n      where: { mmrRoot: { [Op.ne]: null } },\n    });\n    return poiBlock;\n  }\n\n  async getFirstPoiWithoutMmr(): Promise<ProofOfIndex> {\n    const poiBlock = await this.poiRepo.findOne({\n      order: [['id', 'ASC']],\n      where: { mmrRoot: { [Op.eq]: null } },\n    });\n    return poiBlock;\n  }\n\n  async ensureFileBasedMmr(projectMmrPath: string): Promise<MMR> {\n    let fileBasedDb: FileBasedDb;\n    if (fs.existsSync(projectMmrPath)) {\n      fileBasedDb = await FileBasedDb.open(projectMmrPath);\n    } else {\n      fileBasedDb = await FileBasedDb.create(projectMmrPath, DEFAULT_WORD_SIZE);\n    }\n    return new MMR(keccak256Hash, fileBasedDb);\n  }\n\n  async getMmr(blockHeight: number): Promise<MmrPayload> {\n    const leafIndex = blockHeight - this.blockOffset - 1;\n    if (leafIndex < 0) {\n      throw new Error(\n        `Parameter blockHeight must greater equal to ${this.blockOffset + 1} `,\n      );\n    }\n    const [mmrResponse, node] = await Promise.all([\n      this.fileBasedMmr.getRoot(leafIndex),\n      this.fileBasedMmr.get(leafIndex),\n    ]);\n    return {\n      offset: this.blockOffset,\n      height: blockHeight,\n      mmrRoot: u8aToHex(mmrResponse),\n      hash: u8aToHex(node),\n    };\n  }\n\n  async getLatestMmr(): Promise<MmrPayload> {\n    // latest leaf index need fetch from .db, as original method will use cache\n    const blockHeight =\n      (await this.fileBasedMmr.db.getLeafLength()) + this.blockOffset;\n    return this.getMmr(blockHeight);\n  }\n\n  async getLatestMmrProof(): Promise<MmrProof> {\n    // latest leaf index need fetch from .db, as original method will use cache\n    const blockHeight =\n      (await this.fileBasedMmr.db.getLeafLength()) + this.blockOffset;\n    return this.getMmrProof(blockHeight);\n  }\n\n  async getMmrProof(blockHeight: number): Promise<MmrProof> {\n    const leafIndex = blockHeight - this.blockOffset - 1;\n    if (leafIndex < 0) {\n      throw new Error(\n        `Parameter blockHeight must greater equal to ${this.blockOffset + 1} `,\n      );\n    }\n    const mmrProof = await this.fileBasedMmr.getProof([leafIndex]);\n    const nodes = Object.entries(mmrProof.db.nodes).map(([key, data]) => {\n      return {\n        node: key,\n        hash: u8aToHex(data as Uint8Array),\n      };\n    });\n    return {\n      digest: mmrProof.digest.name,\n      leafLength: mmrProof.db.leafLength,\n      nodes,\n    };\n  }\n}\n"]}