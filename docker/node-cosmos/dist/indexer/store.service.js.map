{"version":3,"file":"store.service.js","sourceRoot":"","sources":["../../src/indexer/store.service.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport assert from 'assert';\nimport { Injectable } from '@nestjs/common';\nimport { hexToU8a, u8aToBuffer } from '@polkadot/util';\nimport { blake2AsHex } from '@polkadot/util-crypto';\nimport { Entity, Store } from '@subql/types-cosmos';\nimport {\n  GraphQLModelsRelationsEnums,\n  GraphQLRelationsType,\n  IndexType,\n} from '@subql/utils';\nimport { camelCase, flatten, isEqual, upperFirst } from 'lodash';\nimport {\n  CreationAttributes,\n  DataTypes,\n  IndexesOptions,\n  Model,\n  ModelAttributeColumnOptions,\n  ModelAttributes,\n  ModelStatic,\n  Op,\n  QueryTypes,\n  Sequelize,\n  Transaction,\n  UpsertOptions,\n  Utils,\n} from 'sequelize';\nimport { NodeConfig } from '../configure/NodeConfig';\nimport { modelsTypeToModelAttributes } from '../utils/graphql';\nimport { getLogger } from '../utils/logger';\nimport { camelCaseObjectKey } from '../utils/object';\nimport {\n  commentTableQuery,\n  commentConstraintQuery,\n  createNotifyTrigger,\n  createSendNotificationTriggerFunction,\n  createUniqueIndexQuery,\n  dropNotifyTrigger,\n  getFkConstraint,\n  getNotifyTriggers,\n  SmartTags,\n  smartTags,\n  getVirtualFkTag,\n  addTagsToForeignKeyMap,\n  createExcludeConstraintQuery,\n  BTREE_GIST_EXTENSION_EXIST_QUERY,\n} from '../utils/sync-helper';\nimport { getYargsOption } from '../yargs';\nimport {\n  Metadata,\n  MetadataFactory,\n  MetadataRepo,\n} from './entities/Metadata.entity';\nimport { PoiFactory, PoiRepo, ProofOfIndex } from './entities/Poi.entity';\nimport { PoiService } from './poi.service';\nimport { StoreOperations } from './StoreOperations';\nimport { OperationType } from './types';\n\nconst logger = getLogger('store');\nconst NULL_MERKEL_ROOT = hexToU8a('0x00');\nconst { argv } = getYargsOption();\nconst NotifyTriggerManipulationType = [`INSERT`, `DELETE`, `UPDATE`];\n\ninterface IndexField {\n  entityName: string;\n  fieldName: string;\n  isUnique: boolean;\n  type: string;\n}\n\ninterface NotifyTriggerPayload {\n  triggerName: string;\n  eventManipulation: string;\n}\n@Injectable()\nexport class StoreService {\n  private tx?: Transaction;\n  private modelIndexedFields: IndexField[];\n  private schema: string;\n  private modelsRelations: GraphQLModelsRelationsEnums;\n  private poiRepo: PoiRepo;\n  private metaDataRepo: MetadataRepo;\n  private operationStack: StoreOperations;\n  private blockHeight: number;\n  private historical: boolean;\n\n  constructor(\n    private sequelize: Sequelize,\n    private config: NodeConfig,\n    private poiService: PoiService,\n  ) {}\n\n  async init(\n    modelsRelations: GraphQLModelsRelationsEnums,\n    schema: string,\n  ): Promise<void> {\n    this.schema = schema;\n    this.modelsRelations = modelsRelations;\n    this.historical = await this.getHistoricalStateEnabled();\n    try {\n      await this.syncSchema(this.schema);\n    } catch (e) {\n      logger.error(e, `Having a problem when syncing schema`);\n      process.exit(1);\n    }\n    try {\n      this.modelIndexedFields = await this.getAllIndexFields(this.schema);\n    } catch (e) {\n      logger.error(e, `Having a problem when get indexed fields`);\n      process.exit(1);\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  async syncSchema(schema: string): Promise<void> {\n    const enumTypeMap = new Map<string, string>();\n    if (this.historical) {\n      const [results] = await this.sequelize.query(\n        BTREE_GIST_EXTENSION_EXIST_QUERY,\n      );\n      if (results.length === 0) {\n        throw new Error(\n          'Btree_gist extension is required to enable historical data, contact DB admin for support',\n        );\n      }\n    }\n\n    for (const e of this.modelsRelations.enums) {\n      // We shouldn't set the typename to e.name because it could potentially create SQL injection,\n      // using a replacement at the type name location doesn't work.\n      const enumTypeName = `${schema}_enum_${this.enumNameToHash(e.name)}`;\n\n      const [results] = await this.sequelize.query(\n        `select e.enumlabel as enum_value\n         from pg_type t\n         join pg_enum e on t.oid = e.enumtypid\n         where t.typname = ?\n         order by enumsortorder;`,\n        { replacements: [enumTypeName] },\n      );\n\n      if (results.length === 0) {\n        await this.sequelize.query(\n          `CREATE TYPE \"${enumTypeName}\" as ENUM (${e.values\n            .map(() => '?')\n            .join(',')});`,\n          {\n            replacements: e.values,\n          },\n        );\n      } else {\n        const currentValues = results.map((v: any) => v.enum_value);\n        // Assert the existing enum is same\n\n        // Make it a function to not execute potentially big joins unless needed\n        if (!isEqual(e.values, currentValues)) {\n          throw new Error(\n            `\\n * Can't modify enum \"${\n              e.name\n            }\" between runs: \\n * Before: [${currentValues.join(\n              `,`,\n            )}] \\n * After : [${e.values.join(\n              ',',\n            )}] \\n * You must rerun the project to do such a change`,\n          );\n        }\n      }\n\n      const comment = `@enum\\\\n@enumName ${e.name}${\n        e.description ? `\\\\n ${e.description}` : ''\n      }`;\n\n      await this.sequelize.query(`COMMENT ON TYPE \"${enumTypeName}\" IS E?`, {\n        replacements: [comment],\n      });\n      enumTypeMap.set(e.name, `\"${enumTypeName}\"`);\n    }\n    const extraQueries = [];\n    if (argv.subscription) {\n      extraQueries.push(createSendNotificationTriggerFunction);\n    }\n    for (const model of this.modelsRelations.models) {\n      const attributes = modelsTypeToModelAttributes(model, enumTypeMap);\n      const indexes = model.indexes.map(({ fields, unique, using }) => ({\n        fields: fields.map((field) => Utils.underscoredIf(field, true)),\n        unique,\n        using,\n      }));\n      if (indexes.length > this.config.indexCountLimit) {\n        throw new Error(`too many indexes on entity ${model.name}`);\n      }\n      if (this.historical) {\n        this.addIdAndBlockRangeAttributes(attributes);\n        this.addBlockRangeColumnToIndexes(indexes);\n      }\n      const sequelizeModel = this.sequelize.define(model.name, attributes, {\n        underscored: true,\n        comment: model.description,\n        freezeTableName: false,\n        createdAt: this.config.timestampField,\n        updatedAt: this.config.timestampField,\n        schema,\n        indexes,\n      });\n      if (this.historical) {\n        this.addScopeAndBlockHeightHooks(sequelizeModel);\n        extraQueries.push(\n          createExcludeConstraintQuery(schema, sequelizeModel.tableName),\n        );\n      }\n      if (argv.subscription) {\n        const triggerName = `${schema}_${sequelizeModel.tableName}_notify_trigger`;\n        const triggers = await this.sequelize.query(getNotifyTriggers(), {\n          replacements: { triggerName },\n          type: QueryTypes.SELECT,\n        });\n        // Triggers not been found\n        if (triggers.length === 0) {\n          extraQueries.push(\n            createNotifyTrigger(schema, sequelizeModel.tableName),\n          );\n        } else {\n          this.validateNotifyTriggers(\n            triggerName,\n            triggers as NotifyTriggerPayload[],\n          );\n        }\n      } else {\n        extraQueries.push(dropNotifyTrigger(schema, sequelizeModel.tableName));\n      }\n    }\n    const foreignKeyMap = new Map<string, Map<string, SmartTags>>();\n    for (const relation of this.modelsRelations.relations) {\n      const model = this.sequelize.model(relation.from);\n      const relatedModel = this.sequelize.model(relation.to);\n      if (this.historical) {\n        this.addRelationToMap(relation, foreignKeyMap, model, relatedModel);\n        continue;\n      }\n      switch (relation.type) {\n        case 'belongsTo': {\n          model.belongsTo(relatedModel, { foreignKey: relation.foreignKey });\n          break;\n        }\n        case 'hasOne': {\n          const rel = model.hasOne(relatedModel, {\n            foreignKey: relation.foreignKey,\n          });\n          const fkConstraint = getFkConstraint(\n            rel.target.tableName,\n            rel.foreignKey,\n          );\n          const tags = smartTags({\n            singleForeignFieldName: relation.fieldName,\n          });\n          extraQueries.push(\n            commentConstraintQuery(\n              `\"${schema}\".\"${rel.target.tableName}\"`,\n              fkConstraint,\n              tags,\n            ),\n            createUniqueIndexQuery(\n              schema,\n              relatedModel.tableName,\n              relation.foreignKey,\n            ),\n          );\n          break;\n        }\n        case 'hasMany': {\n          const rel = model.hasMany(relatedModel, {\n            foreignKey: relation.foreignKey,\n          });\n          const fkConstraint = getFkConstraint(\n            rel.target.tableName,\n            rel.foreignKey,\n          );\n          const tags = smartTags({\n            foreignFieldName: relation.fieldName,\n          });\n          extraQueries.push(\n            commentConstraintQuery(\n              `\"${schema}\".\"${rel.target.tableName}\"`,\n              fkConstraint,\n              tags,\n            ),\n          );\n\n          break;\n        }\n        default:\n          throw new Error('Relation type is not supported');\n      }\n    }\n    foreignKeyMap.forEach((keys, tableName) => {\n      const comment = Array.from(keys.values())\n        .map((tags) => smartTags(tags, '|'))\n        .join('\\n');\n      const query = commentTableQuery(`\"${schema}\".\"${tableName}\"`, comment);\n      extraQueries.push(query);\n    });\n    if (this.config.proofOfIndex) {\n      this.poiRepo = PoiFactory(this.sequelize, schema);\n    }\n    this.metaDataRepo = MetadataFactory(this.sequelize, schema);\n\n    await this.sequelize.sync();\n    await this.setMetadata('historicalStateEnabled', this.historical);\n    for (const query of extraQueries) {\n      await this.sequelize.query(query);\n    }\n  }\n\n  async getHistoricalStateEnabled(): Promise<boolean> {\n    let enabled = true;\n    try {\n      // Throws if _metadata doesn't exist (first startup)\n      const result = await this.sequelize.query(\n        `SELECT value FROM \"${this.schema}\".\"_metadata\" WHERE key = 'historicalStateEnabled'`,\n        { type: QueryTypes.SELECT },\n      );\n      if (result.length > 0) {\n        // eslint-disable-next-line\n        enabled = result[0]['value'];\n      } else {\n        enabled = false;\n      }\n    } catch (e: any) {\n      enabled = !argv['disable-historical'];\n    }\n    logger.info(`Historical state is ${enabled ? 'enabled' : 'disabled'}`);\n    return enabled;\n  }\n\n  addBlockRangeColumnToIndexes(indexes: IndexesOptions[]) {\n    indexes.forEach((index) => {\n      if (index.using === IndexType.GIN) {\n        return;\n      }\n      index.fields.push('_block_range');\n      index.using = IndexType.GIST;\n      // GIST does not support unique indexes\n      index.unique = false;\n    });\n  }\n\n  private addRelationToMap(\n    relation: GraphQLRelationsType,\n    foreignKeys: Map<string, Map<string, SmartTags>>,\n    model: ModelStatic<any>,\n    relatedModel: ModelStatic<any>,\n  ) {\n    switch (relation.type) {\n      case 'belongsTo': {\n        addTagsToForeignKeyMap(\n          foreignKeys,\n          model.tableName,\n          relation.foreignKey,\n          {\n            foreignKey: getVirtualFkTag(\n              relation.foreignKey,\n              relatedModel.tableName,\n            ),\n          },\n        );\n        break;\n      }\n      case 'hasOne': {\n        addTagsToForeignKeyMap(\n          foreignKeys,\n          relatedModel.tableName,\n          relation.foreignKey,\n          {\n            singleForeignFieldName: relation.fieldName,\n          },\n        );\n        break;\n      }\n      case 'hasMany': {\n        addTagsToForeignKeyMap(\n          foreignKeys,\n          relatedModel.tableName,\n          relation.foreignKey,\n          {\n            foreignFieldName: relation.fieldName,\n          },\n        );\n        break;\n      }\n      default:\n        throw new Error('Relation type is not supported');\n    }\n  }\n\n  addIdAndBlockRangeAttributes(\n    attributes: ModelAttributes<Model<any, any>, any>,\n  ): void {\n    (attributes.id as ModelAttributeColumnOptions).primaryKey = false;\n    attributes.__id = {\n      type: DataTypes.UUID,\n      defaultValue: DataTypes.UUIDV4,\n      allowNull: false,\n      primaryKey: true,\n    } as ModelAttributeColumnOptions;\n    attributes.__block_range = {\n      type: DataTypes.RANGE(DataTypes.BIGINT),\n      allowNull: false,\n    } as ModelAttributeColumnOptions;\n  }\n\n  private addScopeAndBlockHeightHooks(sequelizeModel: ModelStatic<any>): void {\n    sequelizeModel.addScope('defaultScope', {\n      attributes: {\n        exclude: ['__id', '__block_range'],\n      },\n    });\n    sequelizeModel.addHook('beforeFind', (options) => {\n      // eslint-disable-next-line\n      options.where['__block_range'] = {\n        [Op.contains]: this.blockHeight as any,\n      };\n    });\n    sequelizeModel.addHook('beforeValidate', (attributes, options) => {\n      attributes.__block_range = [this.blockHeight, null];\n    });\n    sequelizeModel.addHook('beforeBulkCreate', (instances, options) => {\n      instances.forEach((item) => {\n        item.__block_range = [this.blockHeight, null];\n      });\n    });\n  }\n\n  validateNotifyTriggers(\n    triggerName: string,\n    triggers: NotifyTriggerPayload[],\n  ) {\n    if (triggers.length !== NotifyTriggerManipulationType.length) {\n      throw new Error(\n        `Found ${triggers.length} ${triggerName} triggers, expected ${NotifyTriggerManipulationType.length} triggers `,\n      );\n    }\n    triggers.map((t) => {\n      if (!NotifyTriggerManipulationType.includes(t.eventManipulation)) {\n        throw new Error(\n          `Found unexpected trigger ${t.triggerName} with manipulation ${t.eventManipulation}`,\n        );\n      }\n    });\n  }\n\n  enumNameToHash(enumName: string): string {\n    return blake2AsHex(enumName).substr(2, 10);\n  }\n\n  setTransaction(tx: Transaction): void {\n    this.tx = tx;\n    tx.afterCommit(() => (this.tx = undefined));\n    if (this.config.proofOfIndex) {\n      this.operationStack = new StoreOperations(this.modelsRelations.models);\n    }\n  }\n\n  setBlockHeight(blockHeight: number): void {\n    this.blockHeight = blockHeight;\n  }\n\n  async setMetadataBatch(\n    metadata: Metadata[],\n    options?: UpsertOptions<Metadata>,\n  ): Promise<void> {\n    await Promise.all(\n      metadata.map(({ key, value }) => this.setMetadata(key, value, options)),\n    );\n  }\n\n  async setMetadata(\n    key: string,\n    value: string | number | boolean,\n    options?: UpsertOptions<Metadata>,\n  ): Promise<void> {\n    assert(this.metaDataRepo, `Model _metadata does not exist`);\n    await this.metaDataRepo.upsert({ key, value }, options);\n  }\n\n  async setPoi(\n    blockPoi: ProofOfIndex,\n    options?: UpsertOptions<ProofOfIndex>,\n  ): Promise<void> {\n    assert(this.poiRepo, `Model _poi does not exist`);\n    blockPoi.chainBlockHash = u8aToBuffer(blockPoi.chainBlockHash);\n    blockPoi.hash = u8aToBuffer(blockPoi.hash);\n    blockPoi.parentHash = u8aToBuffer(blockPoi.parentHash);\n    await this.poiRepo.upsert(blockPoi, options);\n  }\n\n  getOperationMerkleRoot(): Uint8Array {\n    if (this.config.proofOfIndex) {\n      this.operationStack.makeOperationMerkleTree();\n      const merkelRoot = this.operationStack.getOperationMerkleRoot();\n      if (merkelRoot === null) {\n        return NULL_MERKEL_ROOT;\n      }\n      return merkelRoot;\n    }\n    return NULL_MERKEL_ROOT;\n  }\n\n  private async getAllIndexFields(schema: string) {\n    const fields: IndexField[][] = [];\n    for (const entity of this.modelsRelations.models) {\n      const model = this.sequelize.model(entity.name);\n      const tableFields = await this.packEntityFields(\n        schema,\n        entity.name,\n        model.tableName,\n      );\n      fields.push(tableFields);\n    }\n    return flatten(fields);\n  }\n\n  private async packEntityFields(\n    schema: string,\n    entity: string,\n    table: string,\n  ): Promise<IndexField[]> {\n    const rows = await this.sequelize.query(\n      `select\n    '${entity}' as entity_name,\n    a.attname as field_name,\n    idx.indisunique as is_unique,\n    am.amname as type\nfrom\n    pg_index idx\n    JOIN pg_class cls ON cls.oid=idx.indexrelid\n    JOIN pg_class tab ON tab.oid=idx.indrelid\n    JOIN pg_am am ON am.oid=cls.relam,\n    pg_namespace n,\n    pg_attribute a\nwhere\n  n.nspname = '${schema}'\n  and tab.relname = '${table}'\n  and a.attrelid = tab.oid\n  and a.attnum = ANY(idx.indkey)\n  and not idx.indisprimary\ngroup by\n    n.nspname,\n    a.attname,\n    tab.relname,\n    idx.indisunique,\n    am.amname`,\n      {\n        type: QueryTypes.SELECT,\n      },\n    );\n    return rows.map((result) => camelCaseObjectKey(result)) as IndexField[];\n  }\n\n  private async markAsDeleted(model: ModelStatic<any>, id: string) {\n    return model.update(\n      {\n        __block_range: this.sequelize.fn(\n          'int8range',\n          this.sequelize.fn('lower', this.sequelize.col('_block_range')),\n          this.blockHeight,\n        ),\n      },\n      {\n        hooks: false,\n        transaction: this.tx,\n        where: {\n          id: id,\n          __block_range: {\n            [Op.contains]: this.blockHeight as any,\n          },\n        },\n      },\n    );\n  }\n\n  getStore(): Store {\n    return {\n      get: async (entity: string, id: string): Promise<Entity | undefined> => {\n        const model = this.sequelize.model(entity);\n        assert(model, `model ${entity} not exists`);\n        const record = await model.findOne({\n          where: { id },\n          transaction: this.tx,\n        });\n        return record?.toJSON() as Entity;\n      },\n      getByField: async (\n        entity: string,\n        field: string,\n        value,\n      ): Promise<Entity[] | undefined> => {\n        const model = this.sequelize.model(entity);\n        assert(model, `model ${entity} not exists`);\n        const indexed =\n          this.modelIndexedFields.findIndex(\n            (indexField) =>\n              upperFirst(camelCase(indexField.entityName)) === entity &&\n              camelCase(indexField.fieldName) === field,\n          ) > -1;\n        assert(\n          indexed,\n          `to query by field ${field}, an index must be created on model ${entity}`,\n        );\n        const records = await model.findAll({\n          where: { [field]: value },\n          transaction: this.tx,\n          limit: this.config.queryLimit,\n        });\n        return records.map((record) => record.toJSON() as Entity);\n      },\n      getOneByField: async (\n        entity: string,\n        field: string,\n        value,\n      ): Promise<Entity | undefined> => {\n        const model = this.sequelize.model(entity);\n        assert(model, `model ${entity} not exists`);\n        const indexed =\n          this.modelIndexedFields.findIndex(\n            (indexField) =>\n              upperFirst(camelCase(indexField.entityName)) === entity &&\n              camelCase(indexField.fieldName) === field &&\n              indexField.isUnique,\n          ) > -1;\n        assert(\n          indexed,\n          `to query by field ${field}, an unique index must be created on model ${entity}`,\n        );\n        const record = await model.findOne({\n          where: { [field]: value },\n          transaction: this.tx,\n        });\n        return record?.toJSON() as Entity;\n      },\n      set: async (entity: string, _id: string, data: Entity): Promise<void> => {\n        const model = this.sequelize.model(entity);\n        assert(model, `model ${entity} not exists`);\n        const attributes = data as unknown as CreationAttributes<Model>;\n        if (this.historical) {\n          // If entity was already saved in current block, update that entity instead\n          const [updatedRows] = await model.update(attributes, {\n            hooks: false,\n            transaction: this.tx,\n            where: this.sequelize.and(\n              { id: data.id },\n              this.sequelize.where(\n                this.sequelize.fn('lower', this.sequelize.col('_block_range')),\n                this.blockHeight,\n              ),\n            ),\n          });\n          if (updatedRows < 1) {\n            await this.markAsDeleted(model, data.id);\n            await model.create(attributes, {\n              transaction: this.tx,\n            });\n          }\n        } else {\n          await model.upsert(attributes, {\n            transaction: this.tx,\n          });\n        }\n        if (this.config.proofOfIndex) {\n          this.operationStack.put(OperationType.Set, entity, data);\n        }\n      },\n      bulkCreate: async (entity: string, data: Entity[]): Promise<void> => {\n        const model = this.sequelize.model(entity);\n        assert(model, `model ${entity} not exists`);\n        await model.bulkCreate(data as unknown as CreationAttributes<Model>[], {\n          transaction: this.tx,\n        });\n        if (this.config.proofOfIndex) {\n          for (const item of data) {\n            this.operationStack.put(OperationType.Set, entity, item);\n          }\n        }\n      },\n      remove: async (entity: string, id: string): Promise<void> => {\n        const model = this.sequelize.model(entity);\n        assert(model, `model ${entity} not exists`);\n        if (this.historical) {\n          await this.markAsDeleted(model, id);\n        } else {\n          await model.destroy({ where: { id }, transaction: this.tx });\n        }\n        if (this.config.proofOfIndex) {\n          this.operationStack.put(OperationType.Remove, entity, id);\n        }\n      },\n    };\n  }\n}\n"]}