{"version":3,"file":"project.service.js","sourceRoot":"","sources":["../../src/indexer/project.service.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;;;;;;;;;;;;;AAEtC,4CAAoB;AACpB,2CAAoD;AACpD,yDAAsD;AACtD,wCAAuD;AACvD,yCAA+D;AAC/D,wDAAqD;AACrD,kEAA+D;AAE/D,4CAA4C;AAC5C,oCAA0C;AAC1C,+CAA2C;AAC3C,iEAA4D;AAC5D,6DAAwD;AACxD,gEAA2E;AAC3E,qCAAwC;AACxC,+CAA2C;AAC3C,+CAA2C;AAC3C,mDAA+C;AAE/C,8DAA8D;AAC9D,MAAM,EAAE,OAAO,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAElE,MAAM,iBAAiB,GAAG,QAAQ,CAAC;AAEnC,MAAM,MAAM,GAAG,IAAA,kBAAS,EAAC,SAAS,CAAC,CAAC;AACpC,MAAM,EAAE,IAAI,EAAE,GAAG,IAAA,sBAAc,GAAE,CAAC;AAGlC,IAAa,cAAc,GAA3B,MAAa,cAAc;IAMzB,YACmB,kBAAsC,EACtC,UAAsB,EACtB,UAAsB,EACpB,UAAsB,EACxB,SAAoB,EACpB,OAAwB,EACxB,YAA0B,EAC1B,UAAsB,EACtB,gBAAkC,EACrB,YAA0B,EAChD,YAA2B;QAVlB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,eAAU,GAAV,UAAU,CAAY;QACtB,eAAU,GAAV,UAAU,CAAY;QACpB,eAAU,GAAV,UAAU,CAAY;QACxB,cAAS,GAAT,SAAS,CAAW;QACpB,YAAO,GAAP,OAAO,CAAiB;QACxB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,eAAU,GAAV,UAAU,CAAY;QACtB,qBAAgB,GAAhB,gBAAgB,CAAkB;QACrB,iBAAY,GAAZ,YAAY,CAAc;QAChD,iBAAY,GAAZ,YAAY,CAAe;IAClC,CAAC;IAEJ,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,IAAI,CAAC,kBAAkB,CAAC,gCAAgC,EAAE,CAAC;QAEjE,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAC1C,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAChD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE9C,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;YAChC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACxD,IAAI,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,EAAE;gBACrD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;aAC1C;YACD,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACzC;QAED,mCAAmC;QACnC,IAAI,CAAC,YAAY,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;IAClD,CAAC;IAEO,KAAK,CAAC,aAAa;QACzB,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACnD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC3C;aAAM;YACL,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE;gBACvB,IAAI;oBACF,kDAAkD;oBAClD,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,MAAM,GAAG,EAAE;wBAC7C,OAAO,EAAE,KAAK;wBACd,SAAS,EAAE,KAAK;qBACjB,CAAC,CAAC;oBAEH,sDAAsD;oBACtD,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CACxB;;iCAEqB,EACrB;wBACE,YAAY,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;wBACpD,IAAI,EAAE,sBAAU,CAAC,MAAM;qBACxB,CACF,CAAC;oBAEF,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;oBAE/C,IAAI,YAAE,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;wBAC1C,MAAM,YAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;wBAClD,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;qBAC7C;iBACF;gBAAC,OAAO,GAAG,EAAE;oBACZ,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,uBAAuB,CAAC,CAAC;iBAC5C;gBACD,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;aAC3C;SACF;QAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,qBAAY,CAAC,KAAK,EAAE;YACzC,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,4DAA4D;IACpD,KAAK,CAAC,wBAAwB;QACpC,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS;YACpC,CAAC,CAAC,iBAAiB;YACnB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;QAE7B,6IAA6I;QAC7I,MAAM,OAAO,GAAG,CAAC,MAAM,IAAI,CAAC,SAAS;aAClC,KAAK,CAAC,qDAAqD,EAAE;YAC5D,IAAI,EAAE,sBAAU,CAAC,MAAM;SACxB,CAAC;aACD,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;aAC/C,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,MAAM,CAAC,KAAK,CAAC,gCAAgC,GAAG,EAAE,CAAC,CAAC;YACpD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAa,CAAC;QAElB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC7B,+BAA+B;YAC/B,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;gBACpD,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;aAC9C,CAAC,CAAC;YACH,IAAI,aAAa,EAAE;gBACjB,MAAM,GAAG,aAAa,CAAC,QAAQ,CAAC;aACjC;iBAAM;gBACL,MAAM,GAAG,SAAS,CAAC;aACpB;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,KAAK,CAAC,mBAAmB;QAC/B,IAAI,MAAc,CAAC;QACnB,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YAC7B,2DAA2D;YAC3D,MAAM,GAAG,iBAAiB,CAAC;SAC5B;aAAM;YACL,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;YAClC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAC/D,IAAI,CAAE,OAA+B,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBACtD,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,MAAM,GAAG,EAAE,SAAS,CAAC,CAAC;aAC7D;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,KAAK,CAAC,YAAY;QACxB,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAC1C,MAAM,eAAe,GAAG,IAAA,+BAAuB,EAAC,aAAa,CAAC,CAAC;QAC/D,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7D,CAAC;IAEO,KAAK,CAAC,cAAc;QAC1B,MAAM,YAAY,GAAG,IAAA,iCAAe,EAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAElE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC9C,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;SAC9C,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,IAAI,CACpB,qBAAY,CAAC,eAAe,EAC5B,IAAI,CAAC,UAAU,CAAC,WAAW,CAC5B,CAAC;QAEF,MAAM,IAAI,GAAG;YACX,qBAAqB;YACrB,aAAa;YACb,oBAAoB;YACpB,OAAO;YACP,SAAS;SACD,CAAC;QAEX,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC;YACzC,KAAK,EAAE;gBACL,GAAG,EAAE,IAAI;aACV;SACF,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YAC5C,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YAC3B,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAiE,CAAC,CAAC;QAEtE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;QAEhD,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACvB,MAAM,OAAO,CAAC,GAAG,CAAC;gBAChB,YAAY,CAAC,MAAM,CAAC;oBAClB,GAAG,EAAE,YAAY;oBACjB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI;iBACrC,CAAC;gBACF,YAAY,CAAC,MAAM,CAAC;oBAClB,GAAG,EAAE,mBAAmB;oBACxB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO;iBACxC,CAAC;gBACF,YAAY,CAAC,MAAM,CAAC;oBAClB,GAAG,EAAE,aAAa;oBAClB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI;iBACtC,CAAC;gBACF,YAAY,CAAC,MAAM,CAAC;oBAClB,GAAG,EAAE,oBAAoB;oBACzB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO;iBACzC,CAAC;aACH,CAAC,CAAC;SACJ;QACD,IAAI,QAAQ,CAAC,KAAK,KAAK,OAAO,EAAE;YAC9B,MAAM,YAAY,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;SAC7D;QAED,IAAI,QAAQ,CAAC,kBAAkB,KAAK,cAAc,EAAE;YAClD,MAAM,YAAY,CAAC,MAAM,CAAC;gBACxB,GAAG,EAAE,oBAAoB;gBACzB,KAAK,EAAE,cAAc;aACtB,CAAC,CAAC;SACJ;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,yBAAyB,CAC7B,MAAc,EACd,EAAe;QAEf,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAC5B;YACE,GAAG,EAAE,aAAa;YAClB,KAAK,EAAE,MAAM;SACd,EACD,EAAE,WAAW,EAAE,EAAE,EAAE,CACpB,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC1C,KAAK,EAAE,EAAE,GAAG,EAAE,aAAa,EAAE;SAC9B,CAAC,CAAC;QAEH,OAAO,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,KAAe,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC1C,KAAK,EAAE,EAAE,GAAG,EAAE,qBAAqB,EAAE;SACtC,CAAC,CAAC;QAEH,OAAO,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,KAAe,CAAC;IAC9B,CAAC;IAEO,KAAK,CAAC,cAAc;QAC1B,IAAI,WAAmB,CAAC;QACxB,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAChE,IAAI,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACrE,WAAW,GAAG,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;SAC/C;aAAM;YACL,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;gBAC9C,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;aAC9C,CAAC,CAAC;YACH,IAAI,OAAO,KAAK,IAAI,EAAE;gBACpB,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC;aACvC;iBAAM;gBACL,WAAW,GAAG,IAAI,CAAC,4BAA4B,EAAE,CAAC;aACnD;SACF;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,oCAAoC;IACpC,cAAc,CAAC,MAAc;QAC3B,MAAM,CAAC,IAAI,CAAC,sBAAsB,MAAM,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;QAC3B,KAAK,IAAI,CAAC,UAAU;aACjB,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;aACxC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,2BAA2B,CAAC,CAAC;YAC/C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,4BAA4B;QAClC,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAClD,CAAC,IAAI,EAAE,EAAE,WAAC,OAAA,MAAA,IAAI,CAAC,UAAU,mCAAI,CAAC,CAAA,EAAA,CAC/B,CAAC;QACF,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE;YAChC,MAAM,CAAC,KAAK,CACV,2FAA2F,CAC5F,CAAC;YACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;aAAM;YACL,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,CAAC;SACrC;IACH,CAAC;CACF,CAAA;AAjSY,cAAc;IAD1B,IAAA,mBAAU,GAAE;IAiBR,WAAA,IAAA,eAAM,EAAC,UAAU,CAAC,CAAA;qCATkB,yCAAkB;QAC1B,wBAAU;QACV,wBAAU;QACR,wBAAU;QACb,qBAAS;QACX,iCAAe;QACV,4BAAY;QACd,uBAAU;QACJ,qCAAgB,UAE7B,6BAAa;GAjB1B,cAAc,CAiS1B;AAjSY,wCAAc","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { getAllEntitiesRelations } from '@subql/utils';\nimport { QueryTypes, Sequelize, Transaction } from 'sequelize';\nimport { NodeConfig } from '../configure/NodeConfig';\nimport { SubqueryProject } from '../configure/SubqueryProject';\nimport { SubqueryRepo } from '../entities';\nimport { getLogger } from '../utils/logger';\nimport { getYargsOption } from '../yargs';\nimport { ApiService } from './api.service';\nimport { DsProcessorService } from './ds-processor.service';\nimport { DynamicDsService } from './dynamic-ds.service';\nimport { MetadataFactory, MetadataRepo } from './entities/Metadata.entity';\nimport { IndexerEvent } from './events';\nimport { MmrService } from './mmr.service';\nimport { PoiService } from './poi.service';\nimport { StoreService } from './store.service';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { version: packageVersion } = require('../../package.json');\n\nconst DEFAULT_DB_SCHEMA = 'public';\n\nconst logger = getLogger('Project');\nconst { argv } = getYargsOption();\n\n@Injectable()\nexport class ProjectService {\n  private _schema: string;\n  private metadataRepo: MetadataRepo;\n  private _startHeight: number;\n  private _blockOffset: number;\n\n  constructor(\n    private readonly dsProcessorService: DsProcessorService,\n    private readonly apiService: ApiService,\n    private readonly poiService: PoiService,\n    protected readonly mmrService: MmrService,\n    private readonly sequelize: Sequelize,\n    private readonly project: SubqueryProject,\n    private readonly storeService: StoreService,\n    private readonly nodeConfig: NodeConfig,\n    private readonly dynamicDsService: DynamicDsService,\n    @Inject('Subquery') protected subqueryRepo: SubqueryRepo,\n    private eventEmitter: EventEmitter2,\n  ) {}\n\n  get schema(): string {\n    return this._schema;\n  }\n\n  get blockOffset(): number {\n    return this._blockOffset;\n  }\n\n  get startHeight(): number {\n    return this._startHeight;\n  }\n\n  async init(): Promise<void> {\n    await this.dsProcessorService.validateProjectCustomDatasources();\n\n    this._schema = await this.ensureProject();\n    await this.initDbSchema();\n    this.metadataRepo = await this.ensureMetadata();\n    this.dynamicDsService.init(this.metadataRepo);\n\n    if (this.nodeConfig.proofOfIndex) {\n      const blockOffset = await this.getMetadataBlockOffset();\n      if (blockOffset !== null && blockOffset !== undefined) {\n        this.setBlockOffset(Number(blockOffset));\n      }\n      await this.poiService.init(this.schema);\n    }\n\n    // TODO parse this to fetch service\n    this._startHeight = await this.getStartHeight();\n  }\n\n  private async ensureProject(): Promise<string> {\n    let schema = await this.getExistingProjectSchema();\n    if (!schema) {\n      schema = await this.createProjectSchema();\n    } else {\n      if (argv['force-clean']) {\n        try {\n          // drop existing project schema and metadata table\n          await this.sequelize.dropSchema(`\"${schema}\"`, {\n            logging: false,\n            benchmark: false,\n          });\n\n          // remove schema from subquery table (might not exist)\n          await this.sequelize.query(\n            ` DELETE\n              FROM public.subqueries\n              WHERE name = :name`,\n            {\n              replacements: { name: this.nodeConfig.subqueryName },\n              type: QueryTypes.DELETE,\n            },\n          );\n\n          logger.info('force cleaned schema and tables');\n\n          if (fs.existsSync(this.nodeConfig.mmrPath)) {\n            await fs.promises.unlink(this.nodeConfig.mmrPath);\n            logger.info('force cleaned file based mmr');\n          }\n        } catch (err) {\n          logger.error(err, 'failed to force clean');\n        }\n        schema = await this.createProjectSchema();\n      }\n    }\n\n    this.eventEmitter.emit(IndexerEvent.Ready, {\n      value: true,\n    });\n\n    return schema;\n  }\n\n  // Get existing project schema, undefined when doesn't exist\n  private async getExistingProjectSchema(): Promise<string> {\n    let schema = this.nodeConfig.localMode\n      ? DEFAULT_DB_SCHEMA\n      : this.nodeConfig.dbSchema;\n\n    // Note that sequelize.fetchAllSchemas does not include public schema, we cannot assume that public schema exists so we must make a raw query\n    const schemas = (await this.sequelize\n      .query(`SELECT schema_name FROM information_schema.schemata`, {\n        type: QueryTypes.SELECT,\n      })\n      .then((xs) => xs.map((x: any) => x.schema_name))\n      .catch((err) => {\n        logger.error(`Unable to fetch all schemas: ${err}`);\n        process.exit(1);\n      })) as [string];\n\n    if (!schemas.includes(schema)) {\n      // fallback to subqueries table\n      const subqueryModel = await this.subqueryRepo.findOne({\n        where: { name: this.nodeConfig.subqueryName },\n      });\n      if (subqueryModel) {\n        schema = subqueryModel.dbSchema;\n      } else {\n        schema = undefined;\n      }\n    }\n    return schema;\n  }\n\n  private async createProjectSchema(): Promise<string> {\n    let schema: string;\n    if (this.nodeConfig.localMode) {\n      // create tables in default schema if local mode is enabled\n      schema = DEFAULT_DB_SCHEMA;\n    } else {\n      schema = this.nodeConfig.dbSchema;\n      const schemas = await this.sequelize.showAllSchemas(undefined);\n      if (!(schemas as unknown as string[]).includes(schema)) {\n        await this.sequelize.createSchema(`\"${schema}\"`, undefined);\n      }\n    }\n\n    return schema;\n  }\n\n  private async initDbSchema(): Promise<void> {\n    const graphqlSchema = this.project.schema;\n    const modelsRelations = getAllEntitiesRelations(graphqlSchema);\n    await this.storeService.init(modelsRelations, this.schema);\n  }\n\n  private async ensureMetadata(): Promise<MetadataRepo> {\n    const metadataRepo = MetadataFactory(this.sequelize, this.schema);\n\n    const project = await this.subqueryRepo.findOne({\n      where: { name: this.nodeConfig.subqueryName },\n    });\n\n    this.eventEmitter.emit(\n      IndexerEvent.NetworkMetadata,\n      this.apiService.networkMeta,\n    );\n\n    const keys = [\n      'lastProcessedHeight',\n      'blockOffset',\n      'indexerNodeVersion',\n      'chain',\n      'chainId',\n    ] as const;\n\n    const entries = await metadataRepo.findAll({\n      where: {\n        key: keys,\n      },\n    });\n\n    const keyValue = entries.reduce((arr, curr) => {\n      arr[curr.key] = curr.value;\n      return arr;\n    }, {} as { [key in typeof keys[number]]: string | boolean | number });\n\n    const { chainId } = this.apiService.networkMeta;\n\n    if (this.project.runner) {\n      await Promise.all([\n        metadataRepo.upsert({\n          key: 'runnerNode',\n          value: this.project.runner.node.name,\n        }),\n        metadataRepo.upsert({\n          key: 'runnerNodeVersion',\n          value: this.project.runner.node.version,\n        }),\n        metadataRepo.upsert({\n          key: 'runnerQuery',\n          value: this.project.runner.query.name,\n        }),\n        metadataRepo.upsert({\n          key: 'runnerQueryVersion',\n          value: this.project.runner.query.version,\n        }),\n      ]);\n    }\n    if (keyValue.chain !== chainId) {\n      await metadataRepo.upsert({ key: 'chain', value: chainId });\n    }\n\n    if (keyValue.indexerNodeVersion !== packageVersion) {\n      await metadataRepo.upsert({\n        key: 'indexerNodeVersion',\n        value: packageVersion,\n      });\n    }\n\n    return metadataRepo;\n  }\n\n  async upsertMetadataBlockOffset(\n    height: number,\n    tx: Transaction,\n  ): Promise<void> {\n    await this.metadataRepo.upsert(\n      {\n        key: 'blockOffset',\n        value: height,\n      },\n      { transaction: tx },\n    );\n  }\n\n  async getMetadataBlockOffset(): Promise<number> {\n    const res = await this.metadataRepo.findOne({\n      where: { key: 'blockOffset' },\n    });\n\n    return res?.value as number;\n  }\n\n  async getLastProcessedHeight(): Promise<number> {\n    const res = await this.metadataRepo.findOne({\n      where: { key: 'lastProcessedHeight' },\n    });\n\n    return res?.value as number;\n  }\n\n  private async getStartHeight(): Promise<number> {\n    let startHeight: number;\n    const lastProcessedHeight = await this.getLastProcessedHeight();\n    if (lastProcessedHeight !== null && lastProcessedHeight !== undefined) {\n      startHeight = Number(lastProcessedHeight) + 1;\n    } else {\n      const project = await this.subqueryRepo.findOne({\n        where: { name: this.nodeConfig.subqueryName },\n      });\n      if (project !== null) {\n        startHeight = project.nextBlockHeight;\n      } else {\n        startHeight = this.getStartBlockFromDataSources();\n      }\n    }\n\n    return startHeight;\n  }\n\n  // FIXME Dedupe with indexer manager\n  setBlockOffset(offset: number): void {\n    logger.info(`set blockOffset to ${offset}`);\n    this._blockOffset = offset;\n    void this.mmrService\n      .syncFileBaseFromPoi(this.schema, offset)\n      .catch((err) => {\n        logger.error(err, 'failed to sync poi to mmr');\n        process.exit(1);\n      });\n  }\n\n  private getStartBlockFromDataSources() {\n    const startBlocksList = this.project.dataSources.map(\n      (item) => item.startBlock ?? 1,\n    );\n    if (startBlocksList.length === 0) {\n      logger.error(\n        `Failed to find a valid datasource, Please check your endpoint if specName filter is used.`,\n      );\n      process.exit(1);\n    } else {\n      return Math.min(...startBlocksList);\n    }\n  }\n}\n"]}