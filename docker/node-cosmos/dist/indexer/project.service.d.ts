import { EventEmitter2 } from '@nestjs/event-emitter';
import { Sequelize, Transaction } from 'sequelize';
import { NodeConfig } from '../configure/NodeConfig';
import { SubqueryProject } from '../configure/SubqueryProject';
import { SubqueryRepo } from '../entities';
import { ApiService } from './api.service';
import { DsProcessorService } from './ds-processor.service';
import { DynamicDsService } from './dynamic-ds.service';
import { MmrService } from './mmr.service';
import { PoiService } from './poi.service';
import { StoreService } from './store.service';
export declare class ProjectService {
    private readonly dsProcessorService;
    private readonly apiService;
    private readonly poiService;
    protected readonly mmrService: MmrService;
    private readonly sequelize;
    private readonly project;
    private readonly storeService;
    private readonly nodeConfig;
    private readonly dynamicDsService;
    protected subqueryRepo: SubqueryRepo;
    private eventEmitter;
    private _schema;
    private metadataRepo;
    private _startHeight;
    private _blockOffset;
    constructor(dsProcessorService: DsProcessorService, apiService: ApiService, poiService: PoiService, mmrService: MmrService, sequelize: Sequelize, project: SubqueryProject, storeService: StoreService, nodeConfig: NodeConfig, dynamicDsService: DynamicDsService, subqueryRepo: SubqueryRepo, eventEmitter: EventEmitter2);
    get schema(): string;
    get blockOffset(): number;
    get startHeight(): number;
    init(): Promise<void>;
    private ensureProject;
    private getExistingProjectSchema;
    private createProjectSchema;
    private initDbSchema;
    private ensureMetadata;
    upsertMetadataBlockOffset(height: number, tx: Transaction): Promise<void>;
    getMetadataBlockOffset(): Promise<number>;
    getLastProcessedHeight(): Promise<number>;
    private getStartHeight;
    setBlockOffset(offset: number): void;
    private getStartBlockFromDataSources;
}
