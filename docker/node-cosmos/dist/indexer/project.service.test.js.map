{"version":3,"file":"project.service.test.js","sourceRoot":"","sources":["../../src/indexer/project.service.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Test } from '@nestjs/testing';\nimport { GraphQLSchema } from 'graphql';\nimport { Sequelize } from 'sequelize';\nimport { NodeConfig } from '../configure/NodeConfig';\nimport { SubqueryProject } from '../configure/SubqueryProject';\nimport { DbModule } from '../db/db.module';\nimport { SubqueryRepo } from '../entities';\nimport { IndexerManager } from './indexer.manager';\nimport { ProjectService } from './project.service';\n\nfunction testSubqueryProject(): SubqueryProject {\n  return {\n    network: {\n      endpoint: 'wss://polkadot.api.onfinality.io/public-ws',\n      dictionary: `https://api.subquery.network/sq/subquery/dictionary-polkadot`,\n    },\n    dataSources: [],\n    id: 'test',\n    root: './',\n    schema: new GraphQLSchema({}),\n    templates: [],\n  };\n}\n\nconst prepare = async (): Promise<ProjectService> => {\n  const module = await Test.createTestingModule({\n    providers: [\n      {\n        provide: SubqueryProject,\n        useFactory: () => testSubqueryProject(),\n      },\n      {\n        provide: ProjectService,\n        useFactory: (\n          sequelize: Sequelize,\n          project: SubqueryProject,\n          subqueryRepo: SubqueryRepo,\n        ) => {\n          const projectService = new ProjectService(\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            sequelize,\n            project,\n            undefined,\n            undefined,\n            undefined,\n            subqueryRepo,\n            undefined,\n          );\n\n          return projectService;\n        },\n        inject: [Sequelize, SubqueryProject, 'Subquery'],\n      },\n      // {\n      //   provide: IndexerManager,\n      //   useFactory: (\n      //     sequelize: Sequelize,\n      //     project: SubqueryProject,\n      //     projectService: ProjectService,\n      //     subqueryRepo: SubqueryRepo,\n      //   ) => {\n      //     const indexerManager = new IndexerManager(\n      //       undefined,\n      //       undefined,\n      //       undefined,\n      //       undefined,\n      //       undefined,\n      //       sequelize,\n      //       project,\n      //       undefined,\n      //       undefined,\n      //       undefined,\n      //       undefined,\n      //       subqueryRepo,\n      //       undefined,\n      //       projectService,\n      //     );\n      //     return indexerManager;\n      //   },\n      //   inject: [Sequelize, SubqueryProject, ProjectService, 'Subquery'],\n      // },\n    ],\n    imports: [\n      DbModule.forRoot({\n        host: process.env.DB_HOST ?? '127.0.0.1',\n        port: process.env.DB_PORT ? Number(process.env.DB_PORT) : 5432,\n        username: process.env.DB_USER ?? 'postgres',\n        password: process.env.DB_PASS ?? 'postgres',\n        database: process.env.DB_DATABASE ?? 'postgres',\n      }),\n      DbModule.forFeature(['Subquery']),\n    ],\n  }).compile();\n\n  const app = module.createNestApplication();\n  await app.init();\n  return app.get(ProjectService);\n};\n\nfunction prepareProject(\n  name: string,\n  dbSchema: string,\n  nextBlockHeight: number,\n) {\n  return {\n    name,\n    dbSchema,\n    hash: '0x',\n    nextBlockHeight,\n    network: 'test',\n    networkGenesis: '0x1234',\n  };\n}\n\nconst TEST_PROJECT = 'test-user/TEST_PROJECT';\n\ndescribe('ProjectService Integration Tests', () => {\n  let projectService: ProjectService;\n  let subqueryRepo: SubqueryRepo;\n\n  async function createSchema(name: string): Promise<void> {\n    await subqueryRepo.sequelize.createSchema(`\"${name}\"`, undefined);\n  }\n\n  async function checkSchemaExist(schema: string): Promise<boolean> {\n    const schemas = await subqueryRepo.sequelize.showAllSchemas(undefined);\n    return (schemas as unknown as string[]).includes(schema);\n  }\n\n  beforeAll(async () => {\n    projectService = await prepare();\n    subqueryRepo = (projectService as any).subqueryRepo;\n  });\n\n  beforeEach(async () => {\n    delete (projectService as any).nodeConfig;\n    await subqueryRepo.destroy({ where: { name: TEST_PROJECT } });\n    await subqueryRepo.sequelize.dropSchema(`\"${TEST_PROJECT}\"`, undefined);\n  });\n\n  it(\"read existing project's schema from subqueries table\", async () => {\n    const schemaName = 'subql_99999';\n    (projectService as any).nodeConfig = new NodeConfig({\n      subquery: '/test/dir/test-query-project',\n      subqueryName: TEST_PROJECT,\n    });\n\n    await subqueryRepo.create(prepareProject(TEST_PROJECT, schemaName, 1));\n\n    await expect(\n      (projectService as any).getExistingProjectSchema(),\n    ).resolves.toBe(schemaName);\n  });\n\n  it(\"read existing project's schema from nodeConfig\", async () => {\n    (projectService as any).nodeConfig = new NodeConfig({\n      subquery: '/test/dir/test-query-project',\n      subqueryName: TEST_PROJECT,\n    });\n\n    await createSchema(TEST_PROJECT);\n    await subqueryRepo.create(prepareProject(TEST_PROJECT, 'subql_99999', 1));\n\n    await expect(\n      (projectService as any).getExistingProjectSchema(),\n    ).resolves.toBe(TEST_PROJECT);\n  });\n\n  it(\"read existing project's schema when --local\", async () => {\n    (projectService as any).nodeConfig = new NodeConfig({\n      subquery: '/test/dir/test-query-project',\n      subqueryName: TEST_PROJECT,\n      localMode: true,\n    });\n    await createSchema(TEST_PROJECT);\n    await subqueryRepo.create(prepareProject(TEST_PROJECT, 'subql_99999', 1));\n\n    await expect(\n      (projectService as any).getExistingProjectSchema(),\n    ).resolves.toBe('public');\n  });\n\n  it('create project schema', async () => {\n    (projectService as any).nodeConfig = new NodeConfig({\n      subquery: '/test/dir/test-query-project',\n      subqueryName: TEST_PROJECT,\n    });\n    await expect((projectService as any).createProjectSchema()).resolves.toBe(\n      TEST_PROJECT,\n    );\n    await expect(checkSchemaExist(TEST_PROJECT)).resolves.toBe(true);\n  });\n});\n"]}