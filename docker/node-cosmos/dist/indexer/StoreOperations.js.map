{"version":3,"file":"StoreOperations.js","sourceRoot":"","sources":["../../src/indexer/StoreOperations.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;AAEtC,yCAAkE;AAElE,wCAAsE;AACtE,gEAAuC;AACvC,mCAAyD;AAEzD,MAAa,eAAe;IAG1B,YAAoB,MAA2B;QAA3B,WAAM,GAAN,MAAM,CAAqB;QAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,sBAAW,CAAC;YACjC,QAAQ,EAAE,QAAQ;SACnB,CAAC,CAAC;IACL,CAAC;IAEO,2BAA2B,CAAC,SAA0B;QAC5D,MAAM,eAAe,GAAiB,EAAE,CAAC;QACzC,IAAI,SAAS,CAAC,SAAS,KAAK,qBAAa,CAAC,MAAM,EAAE;YAChD,aAAa;YACb,IAAI,IAAA,eAAQ,EAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBAC5B,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;aACnD;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;aACrE;SACF;aAAM;YACL,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CACrC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC,UAAU,CAC5C,CAAC;YACF,KAAK,MAAM,KAAK,IAAI,cAAc,CAAC,MAAM,EAAE;gBACzC,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC9C,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBAE9C,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,EAAE;oBACnD,IAAI,KAAK,CAAC,MAAM,EAAE;wBAChB,uCAAuC;wBACvC,IAAA,2BAAmB,EAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;qBACpD;yBAAM;wBACL,eAAe,CAAC,IAAI,CAClB,IAAA,2BAAmB,EAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CACrD,CAAC;qBACH;iBACF;aACF;SACF;QACD,OAAO,IAAA,gBAAS,EACd,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAChC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EACjC,GAAG,eAAe,CACnB,CAAC;IACJ,CAAC;IAED,GAAG,CAAC,SAAwB,EAAE,MAAc,EAAE,IAAqB;QACjE,MAAM,eAAe,GAAoB;YACvC,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,MAAM;YAClB,IAAI,EAAE,IAAI;SACX,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,OAAO,CACtB,IAAA,kBAAW,EAAC,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC,CAAC,CAC/D,CAAC;IACJ,CAAC;IAED,KAAK;QACH,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;IAC/B,CAAC;IAED,uBAAuB;QACrB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;IAED,sBAAsB;QACpB,IAAI,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,EAAE;YACxC,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;SACzC;aAAM;YACL,MAAM,IAAI,KAAK,CACb,kEAAkE,CACnE,CAAC;SACH;IACH,CAAC;IAED,qBAAqB;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;IACzC,CAAC;CACF;AA7ED,0CA6EC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { u8aConcat, u8aToBuffer, isString } from '@polkadot/util';\nimport { Entity } from '@subql/types-cosmos';\nimport { getTypeByScalarName, GraphQLModelsType } from '@subql/utils';\nimport MerkleTools from 'merkle-tools';\nimport { OperationEntity, OperationType } from './types';\n\nexport class StoreOperations {\n  private merkleTools;\n\n  constructor(private models: GraphQLModelsType[]) {\n    this.merkleTools = new MerkleTools({\n      hashType: 'sha256',\n    });\n  }\n\n  private operationEntityToUint8Array(operation: OperationEntity): Uint8Array {\n    const dataBufferArray: Uint8Array[] = [];\n    if (operation.operation === OperationType.Remove) {\n      //remove case\n      if (isString(operation.data)) {\n        dataBufferArray.push(Buffer.from(operation.data));\n      } else {\n        throw new Error(`Remove operation only accept data in string type`);\n      }\n    } else {\n      const operationModel = this.models.find(\n        ({ name }) => name === operation.entityType,\n      );\n      for (const field of operationModel.fields) {\n        const fieldValue = operation.data[field.name];\n        dataBufferArray.push(Buffer.from(field.name));\n\n        if (fieldValue !== undefined && fieldValue !== null) {\n          if (field.isEnum) {\n            //if it is a enum, process it as string\n            getTypeByScalarName('String').hashCode(fieldValue);\n          } else {\n            dataBufferArray.push(\n              getTypeByScalarName(field.type).hashCode(fieldValue),\n            );\n          }\n        }\n      }\n    }\n    return u8aConcat(\n      Buffer.from(operation.operation),\n      Buffer.from(operation.entityType),\n      ...dataBufferArray,\n    );\n  }\n\n  put(operation: OperationType, entity: string, data: Entity | string): void {\n    const operationEntity: OperationEntity = {\n      operation: operation,\n      entityType: entity,\n      data: data,\n    };\n    this.merkleTools.addLeaf(\n      u8aToBuffer(this.operationEntityToUint8Array(operationEntity)),\n    );\n  }\n\n  reset(): void {\n    this.merkleTools.resetTree();\n  }\n\n  makeOperationMerkleTree(): void {\n    this.merkleTools.makeTree();\n  }\n\n  getOperationMerkleRoot(): Uint8Array {\n    if (this.merkleTools.getTreeReadyState()) {\n      return this.merkleTools.getMerkleRoot();\n    } else {\n      throw new Error(\n        `Failed to get Merkle root from operations, tree is not built yet`,\n      );\n    }\n  }\n\n  getOperationLeafCount(): number {\n    return this.merkleTools.getLeafCount();\n  }\n}\n"]}