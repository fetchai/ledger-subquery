{"version":3,"file":"BlockedQueue.js","sourceRoot":"","sources":["../../src/indexer/BlockedQueue.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,8CAAyC;AAEzC,MAAa,YAAY;IAIvB,YAAY,IAAY;QAHhB,WAAM,GAAQ,EAAE,CAAC;QAIvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5C,CAAC;IAED,GAAG,CAAC,IAAO;QACT,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,KAAU;QACf,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE;YACrD,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,YAAY;;QACV,OAAO,MAAA,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,mCAAI,SAAS,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,IAAI;QACR,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;YACjB,MAAM,IAAA,eAAK,EAAC,GAAG,CAAC,CAAC;SAClB;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IACD,KAAK,CAAC,OAAO,CAAC,GAAY;QACxB,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;YACjB,MAAM,IAAA,eAAK,EAAC,GAAG,CAAC,CAAC;SAClB;QACD,IAAI,MAAM,CAAC;QACX,IAAI,GAAG,EAAE;YACP,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACtC;aAAM;YACL,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YACrB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SAClB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK;QACH,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,CAAC;CACF;AA1DD,oCA0DC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { delay } from '../utils/promise';\n\nexport class BlockedQueue<T> {\n  private _queue: T[] = [];\n  private _maxSize: number;\n\n  constructor(size: number) {\n    this._maxSize = size;\n  }\n\n  get size(): number {\n    return this._queue.length;\n  }\n\n  get freeSize(): number {\n    return this._maxSize - this._queue.length;\n  }\n\n  put(item: T): void {\n    if (this._queue.length >= this._maxSize) {\n      throw new Error('BlockedQueue exceed max size');\n    }\n    this._queue.push(item);\n  }\n\n  putAll(items: T[]): void {\n    if (this._queue.length + items.length > this._maxSize) {\n      throw new Error('BlockedQueue exceed max size');\n    }\n    this._queue.push(...items);\n  }\n\n  firstInQueue(): T | undefined {\n    return this._queue[0] ?? undefined;\n  }\n\n  async take(): Promise<T> {\n    while (!this.size) {\n      await delay(0.1);\n    }\n    return this._queue.shift();\n  }\n  async takeAll(max?: number): Promise<T[]> {\n    while (!this.size) {\n      await delay(0.1);\n    }\n    let result;\n    if (max) {\n      result = this._queue.slice(0, max);\n      this._queue = this._queue.slice(max);\n    } else {\n      result = this._queue;\n      this._queue = [];\n    }\n    return result;\n  }\n\n  reset() {\n    this._queue = [];\n  }\n}\n"]}