{"version":3,"file":"indexer.manager.js","sourceRoot":"","sources":["../../src/indexer/indexer.manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Block } from '@cosmjs/tendermint-rpc';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { hexToU8a, u8aEq } from '@polkadot/util';\nimport {\n  isBlockHandlerProcessor,\n  isTransactionHandlerProcessor,\n  isMessageHandlerProcessor,\n  isEventHandlerProcessor,\n  isCustomCosmosDs,\n  isRuntimeCosmosDs,\n  SubqlCosmosCustomDataSource,\n  SubqlCosmosCustomHandler,\n  SubqlCosmosHandlerKind,\n  CosmosRuntimeHandlerInputMap,\n} from '@subql/common-cosmos';\nimport {\n  CosmosBlock,\n  CosmosEvent,\n  CosmosMessage,\n  CosmosTransaction,\n} from '@subql/types-cosmos';\nimport { conformsTo } from 'lodash';\nimport { Sequelize } from 'sequelize';\nimport { NodeConfig } from '../configure/NodeConfig';\nimport { SubqlProjectDs, SubqueryProject } from '../configure/SubqueryProject';\nimport { SubqueryRepo } from '../entities';\nimport * as CosmosUtil from '../utils/cosmos';\nimport { getLogger } from '../utils/logger';\nimport { profiler } from '../utils/profiler';\nimport { getYargsOption } from '../yargs';\nimport { ApiService, CosmosClient } from './api.service';\nimport {\n  asSecondLayerHandlerProcessor_1_0_0,\n  DsProcessorService,\n} from './ds-processor.service';\nimport { DynamicDsService } from './dynamic-ds.service';\nimport { IndexerEvent } from './events';\nimport { FetchService } from './fetch.service';\nimport { MmrService } from './mmr.service';\nimport { PoiService } from './poi.service';\nimport { PoiBlock } from './PoiBlock';\nimport { ProjectService } from './project.service';\nimport { IndexerSandbox, SandboxService } from './sandbox.service';\nimport { StoreService } from './store.service';\nimport { BlockContent } from './types';\n\nconst NULL_MERKEL_ROOT = hexToU8a('0x00');\n\nconst logger = getLogger('indexer');\nconst { argv } = getYargsOption();\n\n@Injectable()\nexport class IndexerManager {\n  private api: CosmosClient;\n  private filteredDataSources: SubqlProjectDs[];\n\n  constructor(\n    private storeService: StoreService,\n    private apiService: ApiService,\n    private fetchService: FetchService,\n    private poiService: PoiService,\n    protected mmrService: MmrService,\n    private sequelize: Sequelize,\n    private project: SubqueryProject,\n    private nodeConfig: NodeConfig,\n    private sandboxService: SandboxService,\n    private dsProcessorService: DsProcessorService,\n    private dynamicDsService: DynamicDsService,\n    @Inject('Subquery') protected subqueryRepo: SubqueryRepo,\n    private eventEmitter: EventEmitter2,\n    private projectService: ProjectService,\n  ) {}\n\n  @profiler(argv.profiler)\n  async indexBlock(blockContent: BlockContent): Promise<void> {\n    const { block } = blockContent;\n    const blockHeight = block.block.header.height;\n    this.eventEmitter.emit(IndexerEvent.BlockProcessing, {\n      height: blockHeight,\n      timestamp: Date.now(),\n    });\n    const tx = await this.sequelize.transaction();\n    this.storeService.setTransaction(tx);\n    this.storeService.setBlockHeight(blockHeight);\n\n    let poiBlockHash: Uint8Array;\n    try {\n      const safeApi = await this.apiService.getSafeApi(blockHeight);\n\n      this.filteredDataSources = this.filterDataSources(blockHeight);\n\n      const datasources = this.filteredDataSources.concat(\n        ...(await this.dynamicDsService.getDynamicDatasources()),\n      );\n\n      await this.indexBlockData(\n        blockContent,\n        datasources,\n        (ds: SubqlProjectDs) => {\n          const vm = this.sandboxService.getDsProcessor(ds, safeApi);\n\n          // Inject function to create ds into vm\n          vm.freeze(\n            async (templateName: string, args?: Record<string, unknown>) => {\n              const newDs = await this.dynamicDsService.createDynamicDatasource(\n                {\n                  templateName,\n                  args,\n                  startBlock: blockHeight,\n                },\n                tx,\n              );\n              // Push the newly created dynamic ds to be processed this block on any future extrinsics/events\n              datasources.push(newDs);\n              await this.fetchService.resetForNewDs(blockHeight);\n            },\n            'createDynamicDatasource',\n          );\n\n          return vm;\n        },\n      );\n\n      await this.storeService.setMetadataBatch(\n        [\n          { key: 'lastProcessedHeight', value: blockHeight },\n          { key: 'lastProcessedTimestamp', value: Date.now() },\n        ],\n        { transaction: tx },\n      );\n      // Need calculate operationHash to ensure correct offset insert all time\n      const operationHash = this.storeService.getOperationMerkleRoot();\n      if (\n        !u8aEq(operationHash, NULL_MERKEL_ROOT) &&\n        this.projectService.blockOffset === undefined\n      ) {\n        await this.projectService.upsertMetadataBlockOffset(\n          blockHeight - 1,\n          tx,\n        );\n        this.projectService.setBlockOffset(blockHeight - 1);\n      }\n\n      if (this.nodeConfig.proofOfIndex) {\n        //check if operation is null, then poi will not be inserted\n        if (!u8aEq(operationHash, NULL_MERKEL_ROOT)) {\n          const poiBlock = PoiBlock.create(\n            blockHeight,\n            block.block.id,\n            operationHash,\n            await this.poiService.getLatestPoiBlockHash(),\n            this.project.id,\n          );\n          poiBlockHash = poiBlock.hash;\n          await this.storeService.setPoi(poiBlock, { transaction: tx });\n          this.poiService.setLatestPoiBlockHash(poiBlockHash);\n          await this.storeService.setMetadataBatch(\n            [{ key: 'lastPoiHeight', value: blockHeight }],\n            { transaction: tx },\n          );\n        }\n      }\n    } catch (e) {\n      await tx.rollback();\n      throw e;\n    }\n    await tx.commit();\n    this.fetchService.latestProcessed(block.block.header.height);\n  }\n\n  async start(): Promise<void> {\n    await this.projectService.init();\n    await this.fetchService.init();\n\n    this.api = this.apiService.getApi();\n    const startHeight = this.projectService.startHeight;\n\n    void this.fetchService.startLoop(startHeight).catch((err) => {\n      logger.error(err, 'failed to fetch block');\n      // FIXME: retry before exit\n      process.exit(1);\n    });\n    this.fetchService.register((block) => this.indexBlock(block));\n  }\n\n  private filterDataSources(nextProcessingHeight: number): SubqlProjectDs[] {\n    let filteredDs: SubqlProjectDs[];\n    filteredDs = this.project.dataSources.filter(\n      (ds) => ds.startBlock <= nextProcessingHeight,\n    );\n\n    if (filteredDs.length === 0) {\n      logger.error(`Did not find any matching datasouces`);\n      process.exit(1);\n    }\n    // perform filter for custom ds\n    filteredDs = filteredDs.filter((ds) => {\n      if (isCustomCosmosDs(ds)) {\n        return this.dsProcessorService\n          .getDsProcessor(ds)\n          .dsFilterProcessor(ds, this.api);\n      } else {\n        return true;\n      }\n    });\n\n    if (!filteredDs.length) {\n      logger.error(`Did not find any datasources with associated processor`);\n      process.exit(1);\n    }\n    return filteredDs;\n  }\n\n  private async indexBlockData(\n    blockContent: BlockContent,\n    dataSources: SubqlProjectDs[],\n    getVM: (d: SubqlProjectDs) => IndexerSandbox,\n  ): Promise<void> {\n    await this.indexBlockContent(blockContent, dataSources, getVM);\n\n    await this.indexTransaction(blockContent, dataSources, getVM);\n\n    await this.indexMessage(blockContent, dataSources, getVM);\n\n    await this.indexEvent(blockContent, dataSources, getVM);\n  }\n\n  private async indexBlockContent(\n    block: BlockContent,\n    dataSources: SubqlProjectDs[],\n    getVM: (d: SubqlProjectDs) => IndexerSandbox,\n  ): Promise<void> {\n    for (const ds of dataSources) {\n      await this.indexData(SubqlCosmosHandlerKind.Block, block, ds, getVM(ds));\n    }\n  }\n\n  private async indexTransaction(\n    block: BlockContent,\n    dataSources: SubqlProjectDs[],\n    getVM: (d: SubqlProjectDs) => IndexerSandbox,\n  ): Promise<void> {\n    for (const ds of dataSources) {\n      await this.indexData(\n        SubqlCosmosHandlerKind.Transaction,\n        block,\n        ds,\n        getVM(ds),\n      );\n    }\n  }\n\n  private async indexMessage(\n    block: BlockContent,\n    dataSources: SubqlProjectDs[],\n    getVM: (d: SubqlProjectDs) => IndexerSandbox,\n  ): Promise<void> {\n    for (const ds of dataSources) {\n      await this.indexData(\n        SubqlCosmosHandlerKind.Message,\n        block,\n        ds,\n        getVM(ds),\n      );\n    }\n  }\n\n  private async indexEvent(\n    block: BlockContent,\n    dataSources: SubqlProjectDs[],\n    getVM: (d: SubqlProjectDs) => IndexerSandbox,\n  ): Promise<void> {\n    for (const ds of dataSources) {\n      await this.indexData(SubqlCosmosHandlerKind.Event, block, ds, getVM(ds));\n    }\n  }\n\n  private async indexData<K extends SubqlCosmosHandlerKind>(\n    kind: K,\n    //data: CosmosRuntimeHandlerInputMap[K],\n    block: BlockContent,\n    ds: SubqlProjectDs,\n    vm: IndexerSandbox,\n  ): Promise<void> {\n    if (isRuntimeCosmosDs(ds)) {\n      const handlers = ds.mapping.handlers.filter(\n        (h) => h.kind === kind, //&& FilterTypeMap[kind](data as any, h.filter),\n      );\n\n      const blockData = BlockContentTypeMap[kind](block);\n\n      for (const data of blockData) {\n        const filteredHandlers = handlers.filter((h) =>\n          FilterTypeMap[kind](data as any, h.filter),\n        );\n        for (const handler of filteredHandlers) {\n          await vm.securedExec(handler.handler, [data]);\n        }\n      }\n    } else if (isCustomCosmosDs(ds)) {\n      const blockData = BlockContentTypeMap[kind](block);\n      for (const data of blockData) {\n        const handlers = this.filterCustomDsHandlers<K>(\n          ds,\n          data as CosmosRuntimeHandlerInputMap[K],\n          ProcessorTypeMap[kind],\n          (data, baseFilter) => {\n            switch (kind) {\n              case SubqlCosmosHandlerKind.Message:\n                return !!CosmosUtil.filterMessages(\n                  [data as CosmosMessage],\n                  baseFilter,\n                ).length;\n              case SubqlCosmosHandlerKind.Event:\n                return !!CosmosUtil.filterEvents(\n                  [data as CosmosEvent],\n                  baseFilter,\n                ).length;\n              default:\n                throw new Error('Unsuported handler kind');\n            }\n          },\n        );\n\n        for (const handler of handlers) {\n          await this.transformAndExecuteCustomDs(ds, vm, handler, data);\n        }\n      }\n    }\n  }\n\n  private filterCustomDsHandlers<K extends SubqlCosmosHandlerKind>(\n    ds: SubqlCosmosCustomDataSource<string>,\n    data: CosmosRuntimeHandlerInputMap[K],\n    baseHandlerCheck: ProcessorTypeMap[K],\n    baseFilter: (\n      data: CosmosRuntimeHandlerInputMap[K],\n      baseFilter: any,\n    ) => boolean,\n  ): SubqlCosmosCustomHandler[] {\n    const plugin = this.dsProcessorService.getDsProcessor(ds);\n\n    return ds.mapping.handlers.filter((handler) => {\n      const processor = plugin.handlerProcessors[handler.kind];\n      if (baseHandlerCheck(processor)) {\n        processor.baseFilter;\n        return baseFilter(data, processor.baseFilter);\n      }\n      return false;\n    });\n  }\n\n  private async transformAndExecuteCustomDs<K extends SubqlCosmosHandlerKind>(\n    ds: SubqlCosmosCustomDataSource<string>,\n    vm: IndexerSandbox,\n    handler: SubqlCosmosCustomHandler,\n    data: CosmosRuntimeHandlerInputMap[K],\n  ): Promise<void> {\n    const plugin = this.dsProcessorService.getDsProcessor(ds);\n    const assets = await this.dsProcessorService.getAssets(ds);\n\n    const processor = asSecondLayerHandlerProcessor_1_0_0(\n      plugin.handlerProcessors[handler.kind],\n    );\n\n    const transformedData = await processor\n      .transformer({\n        input: data,\n        ds,\n        api: this.api,\n        assets,\n      })\n      .catch((e) => {\n        logger.error(e, 'Failed to transform data with ds processor.');\n        throw e;\n      });\n\n    await Promise.all(\n      transformedData.map((data) => vm.securedExec(handler.handler, [data])),\n    );\n  }\n}\n\ntype ProcessorTypeMap = {\n  [SubqlCosmosHandlerKind.Block]: typeof isBlockHandlerProcessor;\n  [SubqlCosmosHandlerKind.Event]: typeof isEventHandlerProcessor;\n  [SubqlCosmosHandlerKind.Transaction]: typeof isTransactionHandlerProcessor;\n  [SubqlCosmosHandlerKind.Message]: typeof isMessageHandlerProcessor;\n};\n\nconst ProcessorTypeMap = {\n  [SubqlCosmosHandlerKind.Block]: isBlockHandlerProcessor,\n  [SubqlCosmosHandlerKind.Event]: isEventHandlerProcessor,\n  [SubqlCosmosHandlerKind.Transaction]: isTransactionHandlerProcessor,\n  [SubqlCosmosHandlerKind.Message]: isMessageHandlerProcessor,\n};\n\nconst FilterTypeMap = {\n  [SubqlCosmosHandlerKind.Block]: () => true,\n  [SubqlCosmosHandlerKind.Transaction]: () => true,\n  [SubqlCosmosHandlerKind.Event]: CosmosUtil.filterEvent,\n  [SubqlCosmosHandlerKind.Message]: CosmosUtil.filterMessageData,\n};\n\nconst BlockContentTypeMap = {\n  [SubqlCosmosHandlerKind.Block]: (block: BlockContent) => [block.block],\n  [SubqlCosmosHandlerKind.Transaction]: (block: BlockContent) =>\n    block.transactions,\n  [SubqlCosmosHandlerKind.Message]: (block: BlockContent) => block.messages,\n  [SubqlCosmosHandlerKind.Event]: (block: BlockContent) => block.events,\n};\n"]}