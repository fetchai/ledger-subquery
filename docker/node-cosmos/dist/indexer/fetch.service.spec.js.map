{"version":3,"file":"fetch.service.spec.js","sourceRoot":"","sources":["../../src/indexer/fetch.service.spec.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;AAGtC,6DAAyD;AAEzD,mDAA4D;AAQ5D,SAAS,qBAAqB,CAAC,GAAW;IACxC,OAAO,IAAI,sCAAiB,CAAC;QAC3B,OAAO,EAAE;YACP,UAAU,EAAE,GAAG;SAChB;KACK,CAA6B,CAAC;AACxC,CAAC;AAED,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,UAAoC,CAAC;IAEzC,SAAS,CAAC,GAAG,EAAE;QACb,UAAU,GAAG,qBAAqB,CAAC,uBAAuB,CAAC,CAAC,CAAC,eAAe;IAC9E,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACjC,MAAM,MAAM,GAA6B;gBACvC,IAAI,EAAE,sCAAsC;aAC7C,CAAC;YAEF,MAAM,SAAS,GAAG,IAAA,yCAAyB,EAAC,MAAM,CAAC,CAAC;YAEpD,MAAM,KAAK,GAAI,UAAkB,CAAC,eAAe,CAC/C,OAAS,EACT,OAAS,EACT,CAAC,EACD,CAAC,SAAS,CAAC,CACZ,CAAC;YAEF,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;gBACpB,KAAK,EAAE,yPAAyP;gBAChQ,SAAS,EAAE,EAAE,YAAY,EAAE,sCAAsC,EAAE;aACpE,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,MAAM,GAA6B;gBACvC,IAAI,EAAE,sCAAsC;gBAC5C,YAAY,EAAE,MAAM;gBACpB,MAAM,EAAE;oBACN,QAAQ,EACN,iEAAiE;iBACpE;aACF,CAAC;YAEF,MAAM,SAAS,GAAG,IAAA,yCAAyB,EAAC,MAAM,CAAC,CAAC;YAEpD,MAAM,KAAK,GAAI,UAAkB,CAAC,eAAe,CAC/C,OAAS,EACT,OAAS,EACT,CAAC,EACD,CAAC,SAAS,CAAC,CACZ,CAAC;YAEF,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;gBACpB,KAAK,EAAE,oTAAoT;gBAC3T,SAAS,EAAE;oBACT,YAAY,EAAE,sCAAsC;oBACpD,YAAY,EAAE;wBACZ,QAAQ,EACN,iEAAiE;qBACpE;iBACF;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,MAAM,MAAM,GAA6B;gBACvC,IAAI,EAAE,sCAAsC;gBAC5C,YAAY,EAAE,MAAM;gBACpB,MAAM,EAAE;oBACN,sBAAsB,EAAE,QAAQ;iBACjC;aACF,CAAC;YAEF,MAAM,SAAS,GAAG,IAAA,yCAAyB,EAAC,MAAM,CAAC,CAAC;YAEpD,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;gBAC5C,GAAG,EAAE,EAAE,IAAI,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE,EAAE;aACzC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,4CAA4C;QAC5C,+CAA+C;QAC/C,oDAAoD;QACpD,4BAA4B;QAC5B,gBAAgB;QAChB,0CAA0C;QAC1C,SAAS;QACT,OAAO;QAEP,yDAAyD;QAEzD,wEAAwE;QAExE,uDAAuD;QACvD,2CAA2C;QAC3C,OAAO;QAEP,wDAAwD;QAExD,MAAM;IACR,CAAC,CAAC,CAAC;IAEH,2CAA2C;IAE3C,MAAM;AACR,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SubqlCosmosMessageFilter } from '@subql/common-cosmos';\nimport { DictionaryService } from './dictionary.service';\n\nimport { messageFilterToQueryEntry } from './fetch.service';\n\ntype DictionaryQuery = DictionaryService['dictionaryQuery'];\n\ntype DictionaryServicePrivate = DictionaryService & {\n  dictionaryQuery: DictionaryQuery;\n};\n\nfunction mockDictionaryService(url: string): DictionaryServicePrivate {\n  return new DictionaryService({\n    network: {\n      dictionary: url,\n    },\n  } as any) as DictionaryServicePrivate;\n}\n\ndescribe('Dictionary Queries', () => {\n  let dictionary: DictionaryServicePrivate;\n\n  beforeAll(() => {\n    dictionary = mockDictionaryService('http://localhost:3000'); // TODO get url\n  });\n\n  describe('Message Filter Queries', () => {\n    it('Basic wasm filter works', () => {\n      const filter: SubqlCosmosMessageFilter = {\n        type: '/cosmwasm.wasm.v1.MsgExecuteContract',\n      };\n\n      const condition = messageFilterToQueryEntry(filter);\n\n      const query = (dictionary as any).dictionaryQuery(\n        3_093_822,\n        4_000_000,\n        5,\n        [condition],\n      );\n\n      expect(query).toEqual({\n        query: `query($messages_0_0:String!){_metadata {lastProcessedHeight chain }  messages (filter:{or:[{type:{equalTo:$messages_0_0}}],blockHeight:{greaterThanOrEqualTo:\"3093822\",lessThan:\"4000000\"}},orderBy:BLOCK_HEIGHT_ASC,first:5){nodes {blockHeight }  } }`,\n        variables: { messages_0_0: '/cosmwasm.wasm.v1.MsgExecuteContract' },\n      });\n    });\n\n    it('Wasm with contract filter builds a valid query', () => {\n      const filter: SubqlCosmosMessageFilter = {\n        type: '/cosmwasm.wasm.v1.MsgExecuteContract',\n        contractCall: 'vote',\n        values: {\n          contract:\n            'juno1lgnstas4ruflg0eta394y8epq67s4rzhg5anssz3rc5zwvjmmvcql6qps2',\n        },\n      };\n\n      const condition = messageFilterToQueryEntry(filter);\n\n      const query = (dictionary as any).dictionaryQuery(\n        3_093_822,\n        4_000_000,\n        5,\n        [condition],\n      );\n\n      expect(query).toEqual({\n        query: `query($messages_0_0:String!,$messages_0_1:JSON){_metadata {lastProcessedHeight chain }  messages (filter:{or:[{and:[{type:{equalTo:$messages_0_0}},{data:{contains:$messages_0_1}}]}],blockHeight:{greaterThanOrEqualTo:\"3093822\",lessThan:\"4000000\"}},orderBy:BLOCK_HEIGHT_ASC,first:5){nodes {blockHeight }  } }`,\n        variables: {\n          messages_0_0: '/cosmwasm.wasm.v1.MsgExecuteContract',\n          messages_0_1: {\n            contract:\n              'juno1lgnstas4ruflg0eta394y8epq67s4rzhg5anssz3rc5zwvjmmvcql6qps2',\n          },\n        },\n      });\n    });\n\n    it('Wasm with nested filter works', () => {\n      const filter: SubqlCosmosMessageFilter = {\n        type: '/cosmwasm.wasm.v1.MsgExecuteContract',\n        contractCall: 'swap',\n        values: {\n          'msg.swap.input_token': 'Token2',\n        },\n      };\n\n      const condition = messageFilterToQueryEntry(filter);\n\n      expect(condition.conditions[1].value).toEqual({\n        msg: { swap: { input_token: 'Token2' } },\n      });\n    });\n\n    // it('Wasm with enum filter works', () => {\n    //   const filter: SubqlCosmosMessageFilter = {\n    //     type: '/cosmwasm.wasm.v1.MsgExecuteContract',\n    //     contractCall: 'swap',\n    //     values: {\n    //       'msg.swap.input_token': 'Token2',\n    //     },\n    //   };\n\n    //   const condition = messageFilterToQueryEntry(filter);\n\n    //   console.log('CONDITION', condition, condition.conditions[1].value);\n\n    //   const query = (dictionary as any).dictionaryQuery(\n    //     3_093_822, 4_000_000, 5, [condition]\n    //   );\n\n    //   console.log('QUERY', query.query, query.variables);\n\n    // });\n  });\n\n  // describe('Event Filter Queries', () => {\n\n  // });\n});\n"]}