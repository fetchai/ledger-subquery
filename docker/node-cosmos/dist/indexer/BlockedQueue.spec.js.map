{"version":3,"file":"BlockedQueue.spec.js","sourceRoot":"","sources":["../../src/indexer/BlockedQueue.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { range } from 'lodash';\nimport { BlockedQueue } from './BlockedQueue';\n\ndescribe('BlockedQueue', () => {\n  it('first in and first out', async () => {\n    const queue = new BlockedQueue<number>(10);\n    const sequence = range(0, 10);\n    for (const i of sequence) {\n      queue.put(i);\n    }\n    for (const i of sequence) {\n      await expect(queue.take()).resolves.toEqual(i);\n    }\n  });\n\n  it('throw error when put items more than maxSize', () => {\n    const size = 10;\n    const queue = new BlockedQueue<number>(10);\n    const sequence = range(0, 10);\n    for (const i of sequence) {\n      queue.put(i);\n    }\n    expect(() => queue.put(0)).toThrow('BlockedQueue exceed max size');\n  });\n\n  it('block take() when queue is empty', async () => {\n    const queue = new BlockedQueue<number>(10);\n    const delay = 1000;\n    const startTs = new Date();\n    let msecondTooks: number;\n    const takePromise = queue\n      .take()\n      .then(() => (msecondTooks = new Date().getTime() - startTs.getTime()));\n    setTimeout(() => queue.put(0), delay);\n    await takePromise;\n    expect(msecondTooks).toBeGreaterThanOrEqual(delay);\n  });\n\n  it('block takeAll() with batchsize', async () => {\n    const queue = new BlockedQueue<number>(10);\n    const sequence = range(0, 10);\n    for (const i of sequence) {\n      queue.put(i);\n    }\n    //Take first batch\n    await expect(queue.takeAll(6)).resolves.toEqual([0, 1, 2, 3, 4, 5]);\n    //Take rest of it\n    await expect(queue.takeAll(6)).resolves.toEqual([6, 7, 8, 9]);\n  });\n\n  it('block takeAll() without max batchsize', async () => {\n    const queue = new BlockedQueue<number>(10);\n    const sequence = range(0, 10);\n    for (const i of sequence) {\n      queue.put(i);\n    }\n    await expect(queue.takeAll()).resolves.toEqual([\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n    ]);\n  });\n\n  it('block takeAll() when queue is empty', async () => {\n    const queue = new BlockedQueue<number>(10);\n    const delay = 1000;\n    const startTs = new Date();\n    let msecondTooks: number;\n    const takePromise = queue\n      .takeAll()\n      .then(() => (msecondTooks = new Date().getTime() - startTs.getTime()));\n    setTimeout(() => queue.put(0), delay);\n    await takePromise;\n    expect(msecondTooks).toBeGreaterThanOrEqual(delay);\n  });\n\n  it('throw error when putAll items more than maxSize', () => {\n    const size = 10;\n    const queue = new BlockedQueue<number>(10);\n    const sequence = range(0, 10);\n    queue.putAll(sequence);\n    expect(() => queue.putAll([11, 12, 13])).toThrow(\n      'BlockedQueue exceed max size',\n    );\n  });\n});\n"]}