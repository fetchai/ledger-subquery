{"version":3,"file":"sandbox.service.js","sourceRoot":"","sources":["../../src/indexer/sandbox.service.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport { Injectable } from '@nestjs/common';\nimport { SubqlCosmosDataSource } from '@subql/common-cosmos';\nimport { Store } from '@subql/types-cosmos';\nimport { levelFilter } from '@subql/utils';\nimport { merge } from 'lodash';\nimport { NodeVM, NodeVMOptions, VMScript } from 'vm2';\nimport { NodeConfig } from '../configure/NodeConfig';\nimport { SubqlProjectDs, SubqueryProject } from '../configure/SubqueryProject';\nimport { getLogger } from '../utils/logger';\nimport { timeout } from '../utils/promise';\nimport { getYargsOption } from '../yargs';\nimport { ApiService, CosmosSafeClient } from './api.service';\nimport { StoreService } from './store.service';\n\nconst { argv } = getYargsOption();\n\nexport interface SandboxOption {\n  store?: Store;\n  script: string;\n  root: string;\n  entry: string;\n}\n\nconst DEFAULT_OPTION: NodeVMOptions = {\n  console: 'redirect',\n  wasm: argv.unsafe,\n  sandbox: {},\n  require: {\n    builtin: argv.unsafe\n      ? ['*']\n      : ['assert', 'buffer', 'crypto', 'util', 'path'],\n    external: true,\n    context: 'sandbox',\n  },\n  wrapper: 'commonjs',\n  sourceExtensions: ['js', 'cjs'],\n};\n\nconst logger = getLogger('sandbox');\n\nexport class Sandbox extends NodeVM {\n  constructor(option: SandboxOption, protected readonly script: VMScript) {\n    super(\n      merge(DEFAULT_OPTION, {\n        require: {\n          root: option.root,\n          resolve: (moduleName: string) => {\n            return require.resolve(moduleName, { paths: [option.root] });\n          },\n        },\n      }),\n    );\n  }\n\n  async runTimeout<T = unknown>(duration: number): Promise<T> {\n    return timeout(this.run(this.script), duration);\n  }\n}\n\nexport class IndexerSandbox extends Sandbox {\n  constructor(option: SandboxOption, private readonly config: NodeConfig) {\n    super(\n      option,\n      new VMScript(\n        `const mappingFunctions = require('${option.entry}');\n      module.exports = mappingFunctions[funcName](...args);\n    `,\n        path.join(option.root, 'sandbox'),\n      ),\n    );\n    this.injectGlobals(option);\n  }\n\n  async securedExec(funcName: string, args: unknown[]): Promise<void> {\n    this.setGlobal('args', args);\n    this.setGlobal('funcName', funcName);\n    try {\n      await this.runTimeout(this.config.timeout);\n    } catch (e) {\n      e.handler = funcName;\n      if (this.config.logLevel && levelFilter('debug', this.config.logLevel)) {\n        e.handlerArgs = JSON.stringify(args);\n      }\n      throw e;\n    } finally {\n      this.setGlobal('args', []);\n      this.setGlobal('funcName', '');\n    }\n  }\n\n  private injectGlobals({ store }: SandboxOption) {\n    if (store) {\n      this.freeze(store, 'store');\n    }\n    this.freeze(logger, 'logger');\n  }\n}\n\n@Injectable()\nexport class SandboxService {\n  private processorCache: Record<string, IndexerSandbox> = {};\n\n  constructor(\n    private readonly apiService: ApiService,\n    private readonly storeService: StoreService,\n    private readonly nodeConfig: NodeConfig,\n    private readonly project: SubqueryProject,\n  ) {}\n\n  getDsProcessor(ds: SubqlProjectDs, api: CosmosSafeClient): IndexerSandbox {\n    const entry = this.getDataSourceEntry(ds);\n    let processor = this.processorCache[entry];\n    if (!processor) {\n      processor = new IndexerSandbox(\n        {\n          // api: await this.apiService.getPatchedApi(),\n          store: this.storeService.getStore(),\n          root: this.project.root,\n          script: ds.mapping.entryScript,\n          entry,\n        },\n        this.nodeConfig,\n      );\n      this.processorCache[entry] = processor;\n    }\n    processor.freeze(api, 'api');\n    processor.freeze(this.apiService.registry, 'registry');\n    if (argv.unsafe) {\n      processor.freeze(this.apiService.getApi(), 'unsafeApi');\n    }\n    return processor;\n  }\n\n  private getDataSourceEntry(ds: SubqlCosmosDataSource): string {\n    return ds.mapping.file;\n  }\n}\n"]}