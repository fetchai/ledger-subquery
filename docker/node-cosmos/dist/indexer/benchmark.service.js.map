{"version":3,"file":"benchmark.service.js","sourceRoot":"","sources":["../../src/indexer/benchmark.service.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;;;;;;;;;;AAEtC,yDAAgD;AAChD,+CAA4C;AAC5C,kDAA0B;AAC1B,qEAA6C;AAC7C,4CAA4C;AAC5C,8CAAyC;AACzC,qCAIkB;AAElB,MAAM,sBAAsB,GAAG,EAAE,CAAC;AAClC,MAAM,MAAM,GAAG,IAAA,kBAAS,EAAC,WAAW,CAAC,CAAC;AACtC,eAAK,CAAC,MAAM,CAAC,kBAAQ,CAAC,CAAC;AAEvB,MAAa,gBAAgB;IAS3B,KAAK,CAAC,SAAS;QACb,IAAI,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE;YACrE,MAAM,IAAA,eAAK,EAAC,EAAE,CAAC,CAAC;SACjB;aAAM;YACL,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,uBAAuB,EAAE;gBAC7D,MAAM,UAAU,GACd,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,oBAAoB,CAAC;gBAC3D,MAAM,QAAQ,GACZ,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,uBAAuB,CAAC;gBACjE,IAAI,CAAC,cAAc;oBACjB,UAAU,KAAK,CAAC,IAAI,QAAQ,KAAK,CAAC;wBAChC,CAAC,CAAC,CAAC;wBACH,CAAC,CAAC,UAAU,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;gBAErC,MAAM,QAAQ,GAAG,eAAK,CAAC,QAAQ,CAC7B,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC;oBAChD,IAAI,CAAC,cAAc,EACrB,SAAS,CACV,CAAC;gBACF,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;gBAC7D,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC3C,MAAM,WAAW,GAAG,GAAG,IAAI,SAAS,YAAY,EAAE,CAAC;gBAEnD,MAAM,CAAC,IAAI,CACT,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,oBAAoB;oBAC7C,IAAI,CAAC,cAAc,KAAK,CAAC;oBACzB,CAAC,CAAC,sCAAsC;oBACxC,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,kBAC/B,IAAI,CAAC,YACP,eAAe,IAAI,CAAC,uBAAuB,oBACzC,IAAI,CAAC,cAAc,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAC1C,EAAE,CACP,CAAC;aACH;YACD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,uBAAuB,CAAC;YACzD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,0BAA0B,CAAC;SAChE;IACH,CAAC;IAGD,qBAAqB,CAAC,YAAiC;QACrD,IAAI,CAAC,uBAAuB,GAAG,YAAY,CAAC,MAAM,CAAC;QACnD,IAAI,CAAC,0BAA0B,GAAG,YAAY,CAAC,SAAS,CAAC;IAC3D,CAAC;IAGD,iBAAiB,CAAC,YAAgC;QAChD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC;IAC1C,CAAC;CACF;AAjDC;IADC,IAAA,mBAAQ,EAAC,sBAAsB,GAAG,IAAI,CAAC;;;;iDAsCvC;AAGD;IADC,IAAA,uBAAO,EAAC,qBAAY,CAAC,eAAe,CAAC;;;;6DAIrC;AAGD;IADC,IAAA,uBAAO,EAAC,qBAAY,CAAC,WAAW,CAAC;;;;yDAGjC;AAzDH,4CA0DC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Interval } from '@nestjs/schedule';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport { getLogger } from '../utils/logger';\nimport { delay } from '../utils/promise';\nimport {\n  IndexerEvent,\n  ProcessBlockPayload,\n  TargetBlockPayload,\n} from './events';\n\nconst SAMPLING_TIME_VARIANCE = 15;\nconst logger = getLogger('benchmark');\ndayjs.extend(duration);\n\nexport class BenchmarkService {\n  private currentProcessingHeight: number;\n  private currentProcessingTimestamp: number;\n  private targetHeight: number;\n  private lastRegisteredHeight: number;\n  private lastRegisteredTimestamp: number;\n  private blockPerSecond: number;\n\n  @Interval(SAMPLING_TIME_VARIANCE * 1000)\n  async benchmark(): Promise<void> {\n    if (!this.currentProcessingHeight || !this.currentProcessingTimestamp) {\n      await delay(10);\n    } else {\n      if (this.lastRegisteredHeight && this.lastRegisteredTimestamp) {\n        const heightDiff =\n          this.currentProcessingHeight - this.lastRegisteredHeight;\n        const timeDiff =\n          this.currentProcessingTimestamp - this.lastRegisteredTimestamp;\n        this.blockPerSecond =\n          heightDiff === 0 || timeDiff === 0\n            ? 0\n            : heightDiff / (timeDiff / 1000);\n\n        const duration = dayjs.duration(\n          (this.targetHeight - this.currentProcessingHeight) /\n            this.blockPerSecond,\n          'seconds',\n        );\n        const hoursMinsStr = duration.format('HH [hours] mm [mins]');\n        const days = Math.floor(duration.asDays());\n        const durationStr = `${days} days ${hoursMinsStr}`;\n\n        logger.info(\n          this.targetHeight === this.lastRegisteredHeight &&\n            this.blockPerSecond === 0\n            ? 'Fully synced, waiting for new blocks'\n            : `${this.blockPerSecond.toFixed(2)} bps, target: #${\n                this.targetHeight\n              }, current: #${this.currentProcessingHeight}, estimate time: ${\n                this.blockPerSecond === 0 ? 'unknown' : durationStr\n              }`,\n        );\n      }\n      this.lastRegisteredHeight = this.currentProcessingHeight;\n      this.lastRegisteredTimestamp = this.currentProcessingTimestamp;\n    }\n  }\n\n  @OnEvent(IndexerEvent.BlockProcessing)\n  handleProcessingBlock(blockPayload: ProcessBlockPayload) {\n    this.currentProcessingHeight = blockPayload.height;\n    this.currentProcessingTimestamp = blockPayload.timestamp;\n  }\n\n  @OnEvent(IndexerEvent.BlockTarget)\n  handleTargetBlock(blockPayload: TargetBlockPayload) {\n    this.targetHeight = blockPayload.height;\n  }\n}\n"]}