{"version":3,"file":"Metadata.entity.js","sourceRoot":"","sources":["../../../src/indexer/entities/Metadata.entity.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,yCAAsE;AAatE,SAAgB,eAAe,CAC7B,SAAoB,EACpB,MAAc;IAEd,OAAqB,SAAS,CAAC,MAAM,CACnC,WAAW,EACX;QACE,GAAG,EAAE;YACH,IAAI,EAAE,qBAAS,CAAC,MAAM;YACtB,UAAU,EAAE,IAAI;SACjB;QACD,KAAK,EAAE;YACL,IAAI,EAAE,qBAAS,CAAC,KAAK;SACtB;KACF,EACD,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAC1C,CAAC;AACJ,CAAC;AAjBD,0CAiBC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BuildOptions, DataTypes, Model, Sequelize } from 'sequelize';\n\nexport interface Metadata {\n  key: string;\n  value: number | string | boolean;\n}\n\nexport interface MetadataModel extends Model<Metadata>, Metadata {}\n\nexport type MetadataRepo = typeof Model & {\n  new (values?: unknown, options?: BuildOptions): MetadataModel;\n};\n\nexport function MetadataFactory(\n  sequelize: Sequelize,\n  schema: string,\n): MetadataRepo {\n  return <MetadataRepo>sequelize.define(\n    `_metadata`,\n    {\n      key: {\n        type: DataTypes.STRING,\n        primaryKey: true,\n      },\n      value: {\n        type: DataTypes.JSONB,\n      },\n    },\n    { freezeTableName: true, schema: schema },\n  );\n}\n"]}