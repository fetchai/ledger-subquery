import { EventEmitter2 } from '@nestjs/event-emitter';
import { Sequelize } from 'sequelize';
import { NodeConfig } from '../configure/NodeConfig';
import { SubqueryProject } from '../configure/SubqueryProject';
import { SubqueryRepo } from '../entities';
import { ApiService } from './api.service';
import { DsProcessorService } from './ds-processor.service';
import { DynamicDsService } from './dynamic-ds.service';
import { FetchService } from './fetch.service';
import { MmrService } from './mmr.service';
import { PoiService } from './poi.service';
import { ProjectService } from './project.service';
import { SandboxService } from './sandbox.service';
import { StoreService } from './store.service';
import { BlockContent } from './types';
export declare class IndexerManager {
    private storeService;
    private apiService;
    private fetchService;
    private poiService;
    protected mmrService: MmrService;
    private sequelize;
    private project;
    private nodeConfig;
    private sandboxService;
    private dsProcessorService;
    private dynamicDsService;
    protected subqueryRepo: SubqueryRepo;
    private eventEmitter;
    private projectService;
    private api;
    private filteredDataSources;
    constructor(storeService: StoreService, apiService: ApiService, fetchService: FetchService, poiService: PoiService, mmrService: MmrService, sequelize: Sequelize, project: SubqueryProject, nodeConfig: NodeConfig, sandboxService: SandboxService, dsProcessorService: DsProcessorService, dynamicDsService: DynamicDsService, subqueryRepo: SubqueryRepo, eventEmitter: EventEmitter2, projectService: ProjectService);
    indexBlock(blockContent: BlockContent): Promise<void>;
    start(): Promise<void>;
    private filterDataSources;
    private indexBlockData;
    private indexBlockContent;
    private indexTransaction;
    private indexMessage;
    private indexEvent;
    private indexData;
    private filterCustomDsHandlers;
    private transformAndExecuteCustomDs;
}
