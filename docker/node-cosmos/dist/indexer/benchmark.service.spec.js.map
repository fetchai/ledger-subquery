{"version":3,"file":"benchmark.service.spec.js","sourceRoot":"","sources":["../../src/indexer/benchmark.service.spec.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;AAEtC,4CAA4C;AAC5C,8CAAyC;AACzC,2DAAuD;AAEvD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACvB,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,IAAI,SAA2B,CAAC;IAEhC,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,MAAM,GAAG,IAAA,kBAAS,EAAC,WAAW,CAAC,CAAC;QACtC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,mBAAmB,GAAG,IAAI,oCAAgB,EAAE,CAAC;QAElD,mBAA2B,CAAC,uBAAuB,GAAG,OAAO,CAAC;QAC9D,mBAA2B,CAAC,YAAY,GAAG,OAAO,CAAC;QACnD,mBAA2B,CAAC,oBAAoB,GAAG,OAAO,CAAC;QAC3D,mBAA2B,CAAC,uBAAuB,GAAG,KAAK,CAAC;QAC5D,mBAA2B,CAAC,0BAA0B,GAAG,KAAK,CAAC;QAEhE,MAAM,mBAAmB,CAAC,SAAS,EAAE,CAAC;QACtC,MAAM,IAAA,eAAK,EAAC,EAAE,CAAC,CAAC;QAChB,MAAM,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACpC,sCAAsC,CACvC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;QAClC,MAAM,mBAAmB,GAAG,IAAI,oCAAgB,EAAE,CAAC;QAElD,mBAA2B,CAAC,uBAAuB,GAAG,OAAO,CAAC;QAC9D,mBAA2B,CAAC,YAAY,GAAG,OAAO,CAAC;QACnD,mBAA2B,CAAC,oBAAoB,GAAG,OAAO,CAAC;QAC3D,mBAA2B,CAAC,0BAA0B,GAAG,KAAK,CAAC;QAC/D,mBAA2B,CAAC,uBAAuB,GAAG,KAAK,CAAC;QAE7D,MAAM,mBAAmB,CAAC,SAAS,EAAE,CAAC;QACtC,MAAM,IAAA,eAAK,EAAC,EAAE,CAAC,CAAC;QAChB,MAAM,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACpC,uEAAuE,CACxE,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;QAC7B,MAAM,mBAAmB,GAAG,IAAI,oCAAgB,EAAE,CAAC;QAElD,mBAA2B,CAAC,uBAAuB,GAAG,OAAO,CAAC;QAC9D,mBAA2B,CAAC,YAAY,GAAG,OAAO,CAAC;QACnD,mBAA2B,CAAC,oBAAoB,GAAG,OAAO,CAAC;QAC3D,mBAA2B,CAAC,0BAA0B,GAAG,KAAK,CAAC;QAC/D,mBAA2B,CAAC,uBAAuB,GAAG,KAAK,CAAC;QAE7D,MAAM,mBAAmB,CAAC,SAAS,EAAE,CAAC;QACtC,MAAM,IAAA,eAAK,EAAC,EAAE,CAAC,CAAC;QAChB,MAAM,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACpC,uFAAuF,CACxF,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getLogger } from '../utils/logger';\nimport { delay } from '../utils/promise';\nimport { BenchmarkService } from './benchmark.service';\n\njest.setTimeout(90000);\ndescribe('Benchmark service', () => {\n  let loggerSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    const logger = getLogger('benchmark');\n    loggerSpy = jest.spyOn(logger, 'info');\n  });\n\n  it('Handle bps when fully synced', async () => {\n    const newbenchmarkService = new BenchmarkService();\n\n    (newbenchmarkService as any).currentProcessingHeight = 1208163;\n    (newbenchmarkService as any).targetHeight = 1208163;\n    (newbenchmarkService as any).lastRegisteredHeight = 1208163;\n    (newbenchmarkService as any).lastRegisteredTimestamp = 10000;\n    (newbenchmarkService as any).currentProcessingTimestamp = 10000;\n\n    await newbenchmarkService.benchmark();\n    await delay(20);\n    expect(loggerSpy).toHaveBeenCalledWith(\n      'Fully synced, waiting for new blocks',\n    );\n  });\n\n  it('Connection dropped', async () => {\n    const newbenchmarkService = new BenchmarkService();\n\n    (newbenchmarkService as any).currentProcessingHeight = 1209000;\n    (newbenchmarkService as any).targetHeight = 1209000;\n    (newbenchmarkService as any).lastRegisteredHeight = 1208162;\n    (newbenchmarkService as any).currentProcessingTimestamp = 10000;\n    (newbenchmarkService as any).lastRegisteredTimestamp = 10000;\n\n    await newbenchmarkService.benchmark();\n    await delay(20);\n    expect(loggerSpy).toHaveBeenCalledWith(\n      '0.00 bps, target: #1209000, current: #1209000, estimate time: unknown',\n    );\n  });\n\n  it('Handle normal', async () => {\n    const newbenchmarkService = new BenchmarkService();\n\n    (newbenchmarkService as any).currentProcessingHeight = 1208163;\n    (newbenchmarkService as any).targetHeight = 1209163;\n    (newbenchmarkService as any).lastRegisteredHeight = 1208162;\n    (newbenchmarkService as any).currentProcessingTimestamp = 15000;\n    (newbenchmarkService as any).lastRegisteredTimestamp = 10000;\n\n    await newbenchmarkService.benchmark();\n    await delay(20);\n    expect(loggerSpy).toHaveBeenCalledWith(\n      '0.20 bps, target: #1209163, current: #1208163, estimate time: 0 days 01 hours 23 mins',\n    );\n  });\n});\n"]}