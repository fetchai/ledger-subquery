{"version":3,"file":"ds-processor.service.js","sourceRoot":"","sources":["../../src/indexer/ds-processor.service.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;;;;;;;;;;AAEtC,4CAAoB;AACpB,gDAAwB;AACxB,2CAA4C;AAC5C,wDAAwD;AASxD,6BAA+B;AAC/B,kEAA+D;AAC/D,4CAA4C;AAC5C,uDAA4C;AAQ5C,MAAM,MAAM,GAAG,IAAA,kBAAS,EAAC,YAAY,CAAC,CAAC;AAEvC,SAAgB,mCAAmC,CAMjD,SAEkD;IAElD,4GAA4G;IAC5G,OAAO,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC;AAC7C,CAAC;AAZD,kFAYC;AAED,SAAgB,mCAAmC,CAMjD,SAEkD;IAElD,OAAO,SAAS,CAAC,WAAW,KAAK,OAAO,CAAC;AAC3C,CAAC;AAXD,kFAWC;AAED,SAAgB,mCAAmC,CAMjD,SAEkD;IAElD,IAAI,mCAAmC,CAAC,SAAS,CAAC,EAAE;QAClD,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,CAAC,mCAAmC,CAAC,SAAS,CAAC,EAAE;QACnD,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACrD;IAED,uCACK,SAAS,KACZ,WAAW,EAAE,OAAO,EACpB,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAC1B,SAAS,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,CAAC,EACnE,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE,CACtB,SAAS;aACN,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC;aAC/D,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IACzB;AACJ,CAAC;AA5BD,kFA4BC;AAED,MAAa,eAAgB,SAAQ,yBAAO;IAC1C,YAAY,MAA6B;QACvC,KAAK,CACH,MAAM,EACN,IAAI,cAAQ,CACV,6BAA6B,MAAM,CAAC,KAAK,aAAa,EACtD,cAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,CAAC,CACrC,CACF,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED,WAAW;QAIT,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;CACF;AAlBD,0CAkBC;AAGD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAI7B,YAAoB,OAAwB;QAAxB,YAAO,GAAP,OAAO,CAAiB;QAHpC,mBAAc,GAElB,EAAE,CAAC;IACwC,CAAC;IAEhD,KAAK,CAAC,gBAAgB,CACpB,WAA0C;QAE1C,KAAK,MAAM,EAAE,IAAI,WAAW,EAAE;YAC5B,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAC1C,IAAI,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,EAAE;gBAC9B,MAAM,IAAI,KAAK,CACb,YAAY,EAAE,CAAC,IAAI,6BAA6B,SAAS,CAAC,IAAI,GAAG,CAClE,CAAC;aACH;YACD,KAAK,MAAM,OAAO,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE;gBACzC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,SAAS,CAAC,iBAAiB,CAAC,EAAE;oBAClD,MAAM,IAAI,KAAK,CACb,WAAW,OAAO,CAAC,IAAI,eAAe,MAAM,CAAC,IAAI,CAC/C,SAAS,CAAC,iBAAiB,CAC5B,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CACf,CAAC;iBACH;aACF;YAED,8CAA8C;YAC9C,SAAS,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;SAClD;IACH,CAAC;IAED,KAAK,CAAC,gCAAgC;QACpC,MAAM,IAAI,CAAC,gBAAgB,CACxB,IAAI,CAAC,OAAO,CAAC,WAAuC,CAAC,MAAM,CAC1D,gCAAgB,CACjB,CACF,CAAC;IACJ,CAAC;IAED,cAAc,CACZ,EAAuC;QAEvC,IAAI,CAAC,IAAA,gCAAgB,EAAC,EAAE,CAAC,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC5D;QACD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC3C,MAAM,OAAO,GAAG,IAAI,eAAe,CAAC;gBAClC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;gBACvB,KAAK,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI;gBACxB,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;YACH,IAAI;gBACF,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,WAAW,EAAK,CAAC;aACnE;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC7C,MAAM,CAAC,CAAC;aACT;SACF;QACD,OAAO,IAAI,CAAC,cAAc,CACxB,EAAE,CAAC,SAAS,CAAC,IAAI,CACyC,CAAC;IAC/D,CAAC;IACD,4DAA4D;IAC5D,KAAK,CAAC,SAAS,CACb,EAA+B;QAE/B,IAAI,CAAC,IAAA,gCAAgB,EAAC,EAAE,CAAC,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC5D;QACD,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YACd,OAAO,EAAE,CAAC;SACX;QAED,MAAM,GAAG,GAA2B,EAAE,CAAC;QAEvC,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE;YACxC,IAAI;gBACF,GAAG,CAAC,IAAI,CAAC,GAAG,YAAE,CAAC,YAAY,CAAC,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;oBAC9D,QAAQ,EAAE,MAAM;iBACjB,CAAC,CAAC;aACJ;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,KAAK,CAAC,mCAAmC,IAAI,EAAE,CAAC,CAAC;gBACxD,MAAM,CAAC,CAAC;aACT;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC;CACF,CAAA;AAvFY,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;qCAKkB,iCAAe;GAJjC,kBAAkB,CAuF9B;AAvFY,gDAAkB","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport { Injectable } from '@nestjs/common';\nimport { isCustomCosmosDs } from '@subql/common-cosmos';\nimport {\n  SecondLayerHandlerProcessor_0_0_0,\n  SecondLayerHandlerProcessor_1_0_0,\n  SubqlCosmosCustomDatasource,\n  SubqlCosmosDatasourceProcessor,\n  SubqlCosmosDatasource,\n  SubqlCosmosHandlerKind,\n} from '@subql/types-cosmos';\nimport { VMScript } from 'vm2';\nimport { SubqueryProject } from '../configure/SubqueryProject';\nimport { getLogger } from '../utils/logger';\nimport { Sandbox } from './sandbox.service';\n\nexport interface DsPluginSandboxOption {\n  root: string;\n  entry: string;\n  script: string;\n}\n\nconst logger = getLogger('ds-sandbox');\n\nexport function isSecondLayerHandlerProcessor_0_0_0<\n  K extends SubqlCosmosHandlerKind,\n  F,\n  E,\n  DS extends SubqlCosmosCustomDatasource = SubqlCosmosCustomDatasource,\n>(\n  processor:\n    | SecondLayerHandlerProcessor_0_0_0<K, F, E, DS>\n    | SecondLayerHandlerProcessor_1_0_0<K, F, E, DS>,\n): processor is SecondLayerHandlerProcessor_0_0_0<K, F, E, DS> {\n  // Exisiting datasource processors had no concept of specVersion, therefore undefined is equivalent to 0.0.0\n  return processor.specVersion === undefined;\n}\n\nexport function isSecondLayerHandlerProcessor_1_0_0<\n  K extends SubqlCosmosHandlerKind,\n  F,\n  E,\n  DS extends SubqlCosmosCustomDatasource = SubqlCosmosCustomDatasource,\n>(\n  processor:\n    | SecondLayerHandlerProcessor_0_0_0<K, F, E, DS>\n    | SecondLayerHandlerProcessor_1_0_0<K, F, E, DS>,\n): processor is SecondLayerHandlerProcessor_1_0_0<K, F, E, DS> {\n  return processor.specVersion === '1.0.0';\n}\n\nexport function asSecondLayerHandlerProcessor_1_0_0<\n  K extends SubqlCosmosHandlerKind,\n  F,\n  E,\n  DS extends SubqlCosmosCustomDatasource = SubqlCosmosCustomDatasource,\n>(\n  processor:\n    | SecondLayerHandlerProcessor_0_0_0<K, F, E, DS>\n    | SecondLayerHandlerProcessor_1_0_0<K, F, E, DS>,\n): SecondLayerHandlerProcessor_1_0_0<K, F, E, DS> {\n  if (isSecondLayerHandlerProcessor_1_0_0(processor)) {\n    return processor;\n  }\n\n  if (!isSecondLayerHandlerProcessor_0_0_0(processor)) {\n    throw new Error('Unsupported ds processor version');\n  }\n\n  return {\n    ...processor,\n    specVersion: '1.0.0',\n    filterProcessor: (params) =>\n      processor.filterProcessor(params.filter, params.input, params.ds),\n    transformer: (params) =>\n      processor\n        .transformer(params.input, params.ds, params.api, params.assets)\n        .then((res) => [res]),\n  };\n}\n\nexport class DsPluginSandbox extends Sandbox {\n  constructor(option: DsPluginSandboxOption) {\n    super(\n      option,\n      new VMScript(\n        `module.exports = require('${option.entry}').default;`,\n        path.join(option.root, 'ds_sandbox'),\n      ),\n    );\n    this.freeze(logger, 'logger');\n  }\n\n  getDsPlugin<D extends string>(): SubqlCosmosDatasourceProcessor<\n    D,\n    undefined\n  > {\n    return this.run(this.script);\n  }\n}\n\n@Injectable()\nexport class DsProcessorService {\n  private processorCache: {\n    [entry: string]: SubqlCosmosDatasourceProcessor<string, undefined>;\n  } = {};\n  constructor(private project: SubqueryProject) {}\n\n  async validateCustomDs(\n    datasources: SubqlCosmosCustomDatasource[],\n  ): Promise<void> {\n    for (const ds of datasources) {\n      const processor = this.getDsProcessor(ds);\n      if (ds.kind !== processor.kind) {\n        throw new Error(\n          `ds kind (${ds.kind}) doesnt match processor (${processor.kind})`,\n        );\n      }\n      for (const handler of ds.mapping.handlers) {\n        if (!(handler.kind in processor.handlerProcessors)) {\n          throw new Error(\n            `ds kind ${handler.kind} not one of ${Object.keys(\n              processor.handlerProcessors,\n            ).join(', ')}`,\n          );\n        }\n      }\n\n      /* Additional processor specific validation */\n      processor.validate(ds, await this.getAssets(ds));\n    }\n  }\n\n  async validateProjectCustomDatasources(): Promise<void> {\n    await this.validateCustomDs(\n      (this.project.dataSources as SubqlCosmosDatasource[]).filter(\n        isCustomCosmosDs,\n      ),\n    );\n  }\n\n  getDsProcessor<D extends string>(\n    ds: SubqlCosmosCustomDatasource<string>,\n  ): SubqlCosmosDatasourceProcessor<D, undefined> {\n    if (!isCustomCosmosDs(ds)) {\n      throw new Error(`data source is not a custom data source`);\n    }\n    if (!this.processorCache[ds.processor.file]) {\n      const sandbox = new DsPluginSandbox({\n        root: this.project.root,\n        entry: ds.processor.file,\n        script: null,\n      });\n      try {\n        this.processorCache[ds.processor.file] = sandbox.getDsPlugin<D>();\n      } catch (e) {\n        logger.error(`not supported ds @${ds.kind}`);\n        throw e;\n      }\n    }\n    return this.processorCache[\n      ds.processor.file\n    ] as unknown as SubqlCosmosDatasourceProcessor<D, undefined>;\n  }\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async getAssets(\n    ds: SubqlCosmosCustomDatasource,\n  ): Promise<Record<string, string>> {\n    if (!isCustomCosmosDs(ds)) {\n      throw new Error(`data source is not a custom data source`);\n    }\n    if (!ds.assets) {\n      return {};\n    }\n\n    const res: Record<string, string> = {};\n\n    for (const [name, { file }] of ds.assets) {\n      try {\n        res[name] = fs.readFileSync(path.join(this.project.root, file), {\n          encoding: 'utf8',\n        });\n      } catch (e) {\n        logger.error(`Failed to load datasource asset ${file}`);\n        throw e;\n      }\n    }\n    return res;\n  }\n}\n"]}