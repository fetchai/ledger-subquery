{"version":3,"file":"dictionary.service.test.js","sourceRoot":"","sources":["../../src/indexer/dictionary.service.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DictionaryQueryEntry } from '@subql/types-cosmos';\nimport { GraphQLSchema } from 'graphql';\nimport { range } from 'lodash';\nimport { SubqueryProject } from '../configure/SubqueryProject';\nimport { DictionaryService } from './dictionary.service';\n\nfunction testSubqueryProject(): SubqueryProject {\n  return {\n    network: {\n      dictionary: `https://api.subquery.network/sq/subquery/polkadot-dictionary`,\n    },\n    dataSources: [],\n    id: 'test',\n    root: './',\n    schema: new GraphQLSchema({}),\n    templates: [],\n  };\n}\n\nconst HAPPY_PATH_CONDITIONS: DictionaryQueryEntry[] = [\n  {\n    entity: 'events',\n    conditions: [\n      { field: 'module', value: 'staking' },\n      { field: 'event', value: 'Bonded' },\n    ],\n  },\n  {\n    entity: 'events',\n    conditions: [\n      { field: 'module', value: 'balances' },\n      { field: 'event', value: 'Reward' },\n    ],\n  },\n  {\n    entity: 'events',\n    conditions: [\n      { field: 'module', value: 'balances' },\n      { field: 'event', value: 'Slash' },\n    ],\n  },\n  {\n    entity: 'extrinsics',\n    conditions: [\n      { field: 'module', value: 'staking' },\n      { field: 'call', value: 'bond' },\n    ],\n  },\n];\n\ndescribe('DictionaryService', () => {\n  it('return dictionary query result', async () => {\n    const project = testSubqueryProject();\n    const dictionaryService = new DictionaryService(project);\n\n    const batchSize = 30;\n    const startBlock = 1;\n    const endBlock = 10001;\n    const dic = await dictionaryService.getDictionary(\n      startBlock,\n      endBlock,\n      batchSize,\n      HAPPY_PATH_CONDITIONS,\n    );\n\n    expect(dic.batchBlocks.length).toBeGreaterThan(1);\n  }, 500000);\n\n  it('return undefined when dictionary api failed', async () => {\n    const project = testSubqueryProject();\n    project.network.dictionary =\n      'https://api.subquery.network/sq/subquery/dictionary-not-exist';\n    const dictionaryService = new DictionaryService(project);\n    const batchSize = 30;\n    const startBlock = 1;\n    const endBlock = 10001;\n    const dic = await dictionaryService.getDictionary(\n      startBlock,\n      endBlock,\n      batchSize,\n      HAPPY_PATH_CONDITIONS,\n    );\n    expect(dic).toBeUndefined();\n  }, 500000);\n\n  it('should return meta even startblock height greater than dictionary last processed height', async () => {\n    const project = testSubqueryProject();\n    const dictionaryService = new DictionaryService(project);\n    const batchSize = 30;\n    const startBlock = 400000000;\n    const endBlock = 400010000;\n    const dic = await dictionaryService.getDictionary(\n      startBlock,\n      endBlock,\n      batchSize,\n      HAPPY_PATH_CONDITIONS,\n    );\n    expect(dic._metadata).toBeDefined();\n  }, 500000);\n\n  it('test query the correct range', async () => {\n    const project = testSubqueryProject();\n    const dictionaryService = new DictionaryService(project);\n\n    const batchSize = 30;\n    const startBlock = 1;\n    const endBlock = 10001;\n    const dic = await dictionaryService.getDictionary(\n      startBlock,\n      endBlock,\n      batchSize,\n      [\n        {\n          entity: 'extrinsics',\n          conditions: [\n            { field: 'module', value: 'timestamp' },\n            { field: 'call', value: 'set' },\n          ],\n        },\n      ],\n    );\n    expect(dic.batchBlocks).toEqual(range(startBlock, startBlock + batchSize));\n  }, 500000);\n\n  it('use minimum value of event/extrinsic returned block as batch end block', async () => {\n    const project = testSubqueryProject();\n    const dictionaryService = new DictionaryService(project);\n    const batchSize = 50;\n    const startBlock = 333300;\n    const endBlock = 340000;\n    const dic = await dictionaryService.getDictionary(\n      startBlock,\n      endBlock,\n      batchSize,\n      [\n        {\n          //last event at block 333524\n          entity: 'events',\n          conditions: [\n            { field: 'module', value: 'session' },\n            { field: 'event', value: 'NewSession' },\n          ],\n        },\n        {\n          entity: 'events',\n          conditions: [\n            { field: 'module', value: 'staking' },\n            { field: 'event', value: 'EraPayout' },\n          ],\n        },\n        {\n          entity: 'events',\n          conditions: [\n            { field: 'module', value: 'staking' },\n            { field: 'event', value: 'Reward' },\n          ],\n        },\n        {\n          //last extrinsic at block 339186\n          entity: 'extrinsics',\n          conditions: [\n            { field: 'module', value: 'staking' },\n            { field: 'call', value: 'payoutStakers' },\n          ],\n        },\n        {\n          entity: 'extrinsics',\n          conditions: [\n            { field: 'module', value: 'utility' },\n            { field: 'call', value: 'batch' },\n          ],\n        },\n      ],\n    );\n    expect(dic.batchBlocks[dic.batchBlocks.length - 1]).toBe(333524);\n  }, 500000);\n});\n"]}