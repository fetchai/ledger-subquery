{"version":3,"file":"dictionary.service.js","sourceRoot":"","sources":["../../src/indexer/dictionary.service.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  NormalizedCacheObject,\n  gql,\n} from '@apollo/client/core';\nimport { Injectable, OnApplicationShutdown } from '@nestjs/common';\nimport {\n  DictionaryQueryCondition,\n  DictionaryQueryEntry,\n} from '@subql/types-cosmos';\nimport { buildQuery, GqlNode, GqlQuery, GqlVar, MetaData } from '@subql/utils';\nimport fetch from 'node-fetch';\nimport { SubqueryProject } from '../configure/SubqueryProject';\nimport { getLogger } from '../utils/logger';\nimport { profiler } from '../utils/profiler';\nimport { getYargsOption } from '../yargs';\n\nexport type Dictionary = {\n  _metadata: MetaData;\n  batchBlocks: number[];\n  //TODO\n  // specVersions: number[];\n};\nconst logger = getLogger('dictionary');\nconst { argv } = getYargsOption();\n\nfunction extractVar(name: string, cond: DictionaryQueryCondition): GqlVar {\n  return {\n    name,\n    gqlType: cond.matcher === 'contains' ? 'JSON' : 'String!',\n    value: cond.value,\n  };\n}\n\nconst ARG_FIELD_REGX = /[^a-zA-Z0-9-_]/g;\nfunction sanitizeArgField(input: string): string {\n  return input.replace(ARG_FIELD_REGX, '');\n}\n\nfunction extractVars(\n  entity: string,\n  conditions: DictionaryQueryCondition[][],\n): [GqlVar[], Record<string, unknown>] {\n  const gqlVars: GqlVar[] = [];\n  const filter = { or: [] };\n  conditions.forEach((i, outerIdx) => {\n    if (i.length > 1) {\n      filter.or[outerIdx] = {\n        and: i.map((j, innerIdx) => {\n          const v = extractVar(`${entity}_${outerIdx}_${innerIdx}`, j);\n          gqlVars.push(v);\n          return {\n            [sanitizeArgField(j.field)]: {\n              [j.matcher || 'equalTo']: `$${v.name}`,\n            },\n          };\n        }),\n      };\n    } else if (i.length === 1) {\n      const v = extractVar(`${entity}_${outerIdx}_0`, i[0]);\n      gqlVars.push(v);\n      filter.or[outerIdx] = {\n        [sanitizeArgField(i[0].field)]: {\n          [i[0].matcher || 'equalTo']: `$${v.name}`,\n        },\n      };\n    }\n  });\n  return [gqlVars, filter];\n}\n\nfunction buildDictQueryFragment(\n  entity: string,\n  startBlock: number,\n  queryEndBlock: number,\n  conditions: DictionaryQueryCondition[][],\n  batchSize: number,\n): [GqlVar[], GqlNode] {\n  const [gqlVars, filter] = extractVars(entity, conditions);\n  const node: GqlNode = {\n    entity,\n    project: [\n      {\n        entity: 'nodes',\n        project: ['blockHeight'],\n      },\n    ],\n    args: {\n      filter: {\n        ...filter,\n        blockHeight: {\n          greaterThanOrEqualTo: `\"${startBlock}\"`,\n          lessThan: `\"${queryEndBlock}\"`,\n        },\n      },\n      orderBy: 'BLOCK_HEIGHT_ASC',\n      first: batchSize.toString(),\n    },\n  };\n  return [gqlVars, node];\n}\n\n@Injectable()\nexport class DictionaryService implements OnApplicationShutdown {\n  private client: ApolloClient<NormalizedCacheObject>;\n  private isShutdown = false;\n\n  constructor(protected project: SubqueryProject) {\n    this.client = new ApolloClient({\n      cache: new InMemoryCache({ resultCaching: true }),\n      link: new HttpLink({ uri: this.project.network.dictionary, fetch }),\n      defaultOptions: {\n        watchQuery: {\n          fetchPolicy: 'no-cache',\n        },\n        query: {\n          fetchPolicy: 'no-cache',\n        },\n      },\n    });\n  }\n\n  onApplicationShutdown(): void {\n    this.isShutdown = true;\n  }\n\n  /**\n   *\n   * @param startBlock\n   * @param queryEndBlock this block number will limit the max query range, increase dictionary query speed\n   * @param batchSize\n   * @param conditions\n   */\n\n  @profiler(argv.profiler)\n  async getDictionary(\n    startBlock: number,\n    queryEndBlock: number,\n    batchSize: number,\n    conditions: DictionaryQueryEntry[],\n  ): Promise<Dictionary> {\n    const { query, variables } = this.dictionaryQuery(\n      startBlock,\n      queryEndBlock,\n      batchSize,\n      conditions,\n    );\n\n    try {\n      const resp = await this.client.query({\n        query: gql(query),\n        variables,\n      });\n      const blockHeightSet = new Set<number>();\n      const entityEndBlock: { [entity: string]: number } = {};\n      for (const entity of Object.keys(resp.data)) {\n        if (entity !== '_metadata' && resp.data[entity].nodes.length >= 0) {\n          for (const node of resp.data[entity].nodes) {\n            blockHeightSet.add(Number(node.blockHeight));\n            entityEndBlock[entity] = Number(node.blockHeight); //last added event blockHeight\n          }\n        }\n      }\n      const _metadata = resp.data._metadata;\n      const endBlock = Math.min(\n        ...Object.values(entityEndBlock).map((height) =>\n          isNaN(height) ? Infinity : height,\n        ),\n      );\n      const batchBlocks = Array.from(blockHeightSet)\n        .filter((block) => block <= endBlock)\n        .sort((n1, n2) => n1 - n2);\n\n      return {\n        _metadata,\n        batchBlocks,\n      };\n    } catch (err) {\n      logger.warn(err, `failed to fetch dictionary result`);\n      return undefined;\n    }\n  }\n\n  private dictionaryQuery(\n    startBlock: number,\n    queryEndBlock: number,\n    batchSize: number,\n    conditions: DictionaryQueryEntry[],\n  ): GqlQuery {\n    // 1. group condition by entity\n    const mapped: Record<string, DictionaryQueryCondition[][]> =\n      conditions.reduce((acc, c) => {\n        acc[c.entity] = acc[c.entity] || [];\n        acc[c.entity].push(c.conditions);\n        return acc;\n      }, {});\n\n    // assemble\n    const vars: GqlVar[] = [];\n    const nodes: GqlNode[] = [\n      {\n        entity: '_metadata',\n        project: ['lastProcessedHeight', 'chain'],\n      },\n    ];\n    for (const entity of Object.keys(mapped)) {\n      const [pVars, node] = buildDictQueryFragment(\n        entity,\n        startBlock,\n        queryEndBlock,\n        mapped[entity],\n        batchSize,\n      );\n      nodes.push(node);\n      vars.push(...pVars);\n    }\n    return buildQuery(vars, nodes);\n  }\n}\n"]}