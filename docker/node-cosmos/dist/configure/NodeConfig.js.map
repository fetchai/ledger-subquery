{"version":3,"file":"NodeConfig.js","sourceRoot":"","sources":["../../src/configure/NodeConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport { loadFromJsonOrYaml } from '@subql/common';\nimport { last, StringNullableChain } from 'lodash';\nimport { LevelWithSilent } from 'pino';\nimport { getLogger } from '../utils/logger';\nimport { assign } from '../utils/object';\nconst logger = getLogger('configure');\n\nexport interface IConfig {\n  readonly configDir?: string;\n  readonly subquery: string;\n  readonly subqueryName?: string;\n  readonly dbSchema?: string;\n  readonly localMode: boolean;\n  readonly batchSize: number;\n  readonly timeout: number;\n  readonly debug: boolean;\n  readonly preferRange: boolean;\n  readonly networkEndpoint?: string;\n  readonly networkDictionary?: string;\n  readonly networkEndpointParams?: Record<string, string>;\n  readonly outputFmt?: 'json';\n  readonly logLevel?: LevelWithSilent;\n  readonly queryLimit: number;\n  readonly indexCountLimit: number;\n  readonly timestampField: boolean;\n  readonly proofOfIndex: boolean;\n  readonly mmrPath?: string;\n  readonly ipfs?: string;\n}\n\nexport type MinConfig = Partial<Omit<IConfig, 'subquery'>> &\n  Pick<IConfig, 'subquery'>;\n\nconst DEFAULT_CONFIG = {\n  localMode: false,\n  batchSize: 100,\n  timeout: 900,\n  preferRange: false,\n  debug: false,\n  queryLimit: 100,\n  indexCountLimit: 10,\n  timestampField: true,\n  proofOfIndex: false,\n};\n\nexport class NodeConfig implements IConfig {\n  private readonly _config: IConfig;\n\n  static fromFile(\n    filePath: string,\n    configFromArgs?: Partial<IConfig>,\n  ): NodeConfig {\n    const fileInfo = path.parse(filePath);\n\n    if (!fs.existsSync(filePath)) {\n      throw new Error(`Load config from file ${filePath} is not exist`);\n    }\n    let configFromFile: unknown;\n    try {\n      configFromFile = loadFromJsonOrYaml(filePath);\n    } catch (e) {\n      logger.error(`failed to load config file, ${e}`);\n      throw e;\n    }\n\n    const config = assign(configFromFile, configFromArgs, {\n      configDir: fileInfo.dir,\n    }) as IConfig;\n    return new NodeConfig(config);\n  }\n\n  constructor(config: MinConfig) {\n    this._config = assign({}, DEFAULT_CONFIG, config);\n  }\n\n  get subquery(): string {\n    assert(this._config.subquery);\n    return this._config.subquery;\n  }\n\n  get subqueryName(): string {\n    assert(this._config.subquery);\n    return this._config.subqueryName ?? last(this.subquery.split(path.sep));\n  }\n\n  get configDir(): string {\n    return this._config.configDir;\n  }\n\n  get localMode(): boolean {\n    return this._config.localMode;\n  }\n\n  get batchSize(): number {\n    return this._config.batchSize;\n  }\n\n  get networkEndpoint(): string | undefined {\n    return this._config.networkEndpoint;\n  }\n\n  get networkDictionary(): string | undefined {\n    return this._config.networkDictionary;\n  }\n\n  get networkEndpointParams(): Record<string, string> | undefined {\n    return this._config.networkEndpointParams;\n  }\n\n  get timeout(): number {\n    return this._config.timeout;\n  }\n\n  get debug(): boolean {\n    return this._config.debug;\n  }\n  get preferRange(): boolean {\n    return this._config.preferRange;\n  }\n\n  get outputFmt(): 'json' | undefined {\n    return this._config.outputFmt;\n  }\n\n  get logLevel(): LevelWithSilent {\n    return this.debug ? 'debug' : this._config.logLevel;\n  }\n\n  get queryLimit(): number {\n    return this._config.queryLimit;\n  }\n\n  get indexCountLimit(): number {\n    return this._config.indexCountLimit;\n  }\n\n  get timestampField(): boolean {\n    return this._config.timestampField;\n  }\n\n  get proofOfIndex(): boolean {\n    return this._config.proofOfIndex;\n  }\n\n  get mmrPath(): string {\n    return this._config.mmrPath ?? `.mmr/${this.subqueryName}.mmr`;\n  }\n  get ipfs(): string {\n    return this._config.ipfs;\n  }\n\n  get dbSchema(): string {\n    return this._config.dbSchema ?? this.subqueryName;\n  }\n\n  merge(config: Partial<IConfig>): this {\n    assign(this._config, config);\n    return this;\n  }\n}\n"]}