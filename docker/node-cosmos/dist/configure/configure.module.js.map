{"version":3,"file":"configure.module.js","sourceRoot":"","sources":["../../src/configure/configure.module.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport assert from 'assert';\nimport path from 'path';\nimport { DynamicModule, Global, Module } from '@nestjs/common';\nimport { getProjectRootAndManifest, IPFS_REGEX } from '@subql/common';\nimport { CosmosProjectNetworkConfig } from '@subql/common-cosmos';\nimport { camelCase, last, omitBy, isNil } from 'lodash';\nimport { getLogger, setLevel } from '../utils/logger';\nimport { getYargsOption } from '../yargs';\nimport { IConfig, MinConfig, NodeConfig } from './NodeConfig';\nimport { SubqueryProject } from './SubqueryProject';\n\nconst YargsNameMapping = {\n  local: 'localMode',\n  'network-endpoint-param': 'networkEndpointParams',\n};\n\ntype Args = ReturnType<typeof getYargsOption>['argv'];\n\nfunction yargsToIConfig(yargs: Args): Partial<IConfig> {\n  return Object.entries(yargs).reduce((acc, [key, value]) => {\n    if (['_', '$0'].includes(key)) return acc;\n\n    if (key === 'network-registry') {\n      try {\n        value = JSON.parse(value as string);\n      } catch (e) {\n        throw new Error('Argument `network-registry` is not valid JSON');\n      }\n    }\n    if (key === 'network-endpoint-param') {\n      value = (value as string[]).reduce((acc, header) => {\n        const [headerKey, headerValue] = header.split(':').map((v) => v.trim());\n        acc[headerKey] = headerValue;\n\n        return acc;\n      }, {});\n    }\n    acc[YargsNameMapping[key] ?? camelCase(key)] = value;\n    return acc;\n  }, {});\n}\n\nfunction defaultSubqueryName(config: Partial<IConfig>): MinConfig {\n  const ipfsMatch = config.subquery.match(IPFS_REGEX);\n  return {\n    ...config,\n    subqueryName:\n      config.subqueryName ??\n      (ipfsMatch\n        ? config.subquery.replace(IPFS_REGEX, '')\n        : last(\n            getProjectRootAndManifest(config.subquery).root.split(path.sep),\n          )),\n  } as MinConfig;\n}\n\n// Check if a subquery name is a valid schema name\nexport function validDbSchemaName(name: string): boolean {\n  if (name.length === 0) {\n    return false;\n  } else {\n    name = name.toLowerCase();\n    const regexp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_\\\\-\\\\/]{0,62}$');\n    const flag0 = !name.startsWith('pg_'); // Reserved identifier\n    const flag1 = regexp.test(name); // <= Valid characters, less than 63 bytes\n    if (!flag0) {\n      logger.error(\n        `Invalid schema name '${name}', schema name must not be prefixed with 'pg_'`,\n      );\n    }\n    if (!flag1) {\n      logger.error(\n        `Invalid schema name '${name}', schema name must start with a letter or underscore, \n         be less than 63 bytes and must contain only valid alphanumeric characters (can include characters '_-/')`,\n      );\n    }\n    return flag0 && flag1;\n  }\n}\n\nfunction warnDeprecations() {\n  const yargsOptions = getYargsOption();\n  const { argv } = yargsOptions;\n  if (argv['subquery-name']) {\n    logger.warn(\n      'Note that argument --subquery-name has been deprecated in favour of --db-schema',\n    );\n  }\n  if (argv.local) {\n    logger.warn('Note that argument --local has been deprecated');\n  }\n}\nconst logger = getLogger('configure');\n\n@Global()\n@Module({})\nexport class ConfigureModule {\n  static register(): DynamicModule {\n    const yargsOptions = getYargsOption();\n    const { argv } = yargsOptions;\n    let config: NodeConfig;\n    if (argv.config) {\n      config = NodeConfig.fromFile(argv.config, yargsToIConfig(argv));\n    } else {\n      if (!argv.subquery) {\n        logger.error(\n          'subquery path is missing neither in cli options nor in config file',\n        );\n        yargsOptions.showHelp();\n        process.exit(1);\n      }\n\n      warnDeprecations();\n      assert(argv.subquery, 'subquery path is missing');\n      config = new NodeConfig(defaultSubqueryName(yargsToIConfig(argv)));\n    }\n\n    if (config.debug) {\n      setLevel('debug');\n    }\n\n    const project = async () => {\n      const p = await SubqueryProject.create(\n        argv.subquery,\n        omitBy<CosmosProjectNetworkConfig>(\n          {\n            endpoint: config.networkEndpoint,\n            dictionary: config.networkDictionary,\n          },\n          isNil,\n        ),\n        {\n          ipfs: config.ipfs,\n        },\n      ).catch((err) => {\n        logger.error(err, 'Create Subquery project from given path failed!');\n        process.exit(1);\n      });\n      return p;\n    };\n\n    return {\n      module: ConfigureModule,\n      providers: [\n        {\n          provide: NodeConfig,\n          useValue: config,\n        },\n        {\n          provide: SubqueryProject,\n          useFactory: project,\n        },\n      ],\n      exports: [NodeConfig, SubqueryProject],\n    };\n  }\n}\n"]}