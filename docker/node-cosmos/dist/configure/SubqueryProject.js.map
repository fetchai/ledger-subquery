{"version":3,"file":"SubqueryProject.js","sourceRoot":"","sources":["../../src/configure/SubqueryProject.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { RegisteredTypes } from '@polkadot/types/types';\nimport {\n  ReaderFactory,\n  ReaderOptions,\n  Reader,\n  RunnerSpecs,\n  validateSemver,\n} from '@subql/common';\nimport {\n  CosmosProjectNetworkConfig,\n  parseCosmosProjectManifest,\n  ProjectManifestV0_3_0Impl,\n  SubqlCosmosDataSource,\n  ProjectManifestV1_0_0Impl,\n} from '@subql/common-cosmos';\nimport { CustomModule } from '@subql/types-cosmos';\nimport { buildSchemaFromString } from '@subql/utils';\nimport { GraphQLSchema } from 'graphql';\nimport * as protobuf from 'protobufjs';\nimport {\n  getProjectRoot,\n  updateDataSourcesV0_3_0,\n  processNetworkConfig,\n} from '../utils/project';\n\nexport type CosmosChainType = CustomModule & {\n  proto: protobuf.Root;\n  packageName?: string;\n};\n\nexport type SubqlProjectDs = SubqlCosmosDataSource & {\n  mapping: SubqlCosmosDataSource['mapping'] & { entryScript: string };\n};\n\nexport type CosmosProjectNetConfig = CosmosProjectNetworkConfig & {\n  chainTypes: Map<string, CosmosChainType> & { protoRoot: protobuf.Root };\n};\n\nexport type SubqlProjectDsTemplate = Omit<SubqlProjectDs, 'startBlock'> & {\n  name: string;\n};\n\nconst NOT_SUPPORT = (name: string) => () => {\n  throw new Error(`Manifest specVersion ${name}() is not supported`);\n};\n\nexport class SubqueryProject {\n  id: string;\n  root: string;\n  network: Partial<CosmosProjectNetConfig>;\n  dataSources: SubqlProjectDs[];\n  schema: GraphQLSchema;\n  templates: SubqlProjectDsTemplate[];\n  chainTypes?: RegisteredTypes;\n  runner?: RunnerSpecs;\n\n  static async create(\n    path: string,\n    networkOverrides?: Partial<CosmosProjectNetworkConfig>,\n    readerOptions?: ReaderOptions,\n  ): Promise<SubqueryProject> {\n    // We have to use reader here, because path can be remote or local\n    // and the `loadProjectManifest(projectPath)` only support local mode\n    const reader = await ReaderFactory.create(path, readerOptions);\n    const projectSchema = await reader.getProjectSchema();\n    if (projectSchema === undefined) {\n      throw new Error(`Get manifest from project path ${path} failed`);\n    }\n    const manifest = parseCosmosProjectManifest(projectSchema);\n\n    if (manifest.isV0_3_0) {\n      return loadProjectFromManifestBase(\n        manifest.asV0_3_0,\n        reader,\n        path,\n        networkOverrides,\n      );\n    } else if (manifest.isV1_0_0) {\n      return loadProjectFromManifest1_0_0(\n        manifest.asV1_0_0,\n        reader,\n        path,\n        networkOverrides,\n      );\n    }\n  }\n}\n\nexport interface SubqueryProjectNetwork {\n  chainId: string;\n  endpoint?: string;\n  dictionary?: string;\n  chainTypes?: Map<string, CosmosChainType>;\n}\n\ntype SUPPORT_MANIFEST = ProjectManifestV0_3_0Impl | ProjectManifestV1_0_0Impl;\n\nasync function loadProjectFromManifestBase(\n  projectManifest: SUPPORT_MANIFEST,\n  reader: Reader,\n  path: string,\n  networkOverrides?: Partial<CosmosProjectNetworkConfig>,\n): Promise<SubqueryProject> {\n  const root = await getProjectRoot(reader);\n\n  const network = await processNetworkConfig(\n    {\n      ...projectManifest.network,\n      ...networkOverrides,\n    },\n    reader,\n  );\n\n  if (!network.endpoint) {\n    throw new Error(\n      `Network endpoint must be provided for network. chainId=\"${network.chainId}\"`,\n    );\n  }\n\n  let schemaString: string;\n  try {\n    schemaString = await reader.getFile(projectManifest.schema.file);\n  } catch (e) {\n    throw new Error(\n      `unable to fetch the schema from ${projectManifest.schema.file}`,\n    );\n  }\n  const schema = buildSchemaFromString(schemaString);\n\n  const dataSources = await updateDataSourcesV0_3_0(\n    projectManifest.dataSources,\n    reader,\n    root,\n  );\n  return {\n    id: reader.root ? reader.root : path, //TODO, need to method to get project_id\n    root,\n    network,\n    dataSources,\n    schema,\n    templates: [],\n  };\n}\n\nconst { version: packageVersion } = require('../../package.json');\n\nasync function loadProjectFromManifest1_0_0(\n  projectManifest: ProjectManifestV1_0_0Impl,\n  reader: Reader,\n  path: string,\n  networkOverrides?: Partial<CosmosProjectNetworkConfig>,\n): Promise<SubqueryProject> {\n  const project = await loadProjectFromManifestBase(\n    projectManifest,\n    reader,\n    path,\n    networkOverrides,\n  );\n  project.templates = await loadProjectTemplates(projectManifest, reader);\n  project.runner = projectManifest.runner;\n  if (!validateSemver(packageVersion, project.runner.node.version)) {\n    throw new Error(\n      `Runner require node version ${project.runner.node.version}, current node ${packageVersion}`,\n    );\n  }\n\n  return project;\n}\n\nasync function loadProjectTemplates(\n  projectManifest: ProjectManifestV1_0_0Impl,\n  reader: Reader,\n): Promise<SubqlProjectDsTemplate[]> {\n  if (projectManifest.templates && projectManifest.templates.length !== 0) {\n    const root = await getProjectRoot(reader);\n\n    const dsTemplates = await updateDataSourcesV0_3_0(\n      projectManifest.templates,\n      reader,\n      root,\n    );\n    return dsTemplates.map((ds, index) => ({\n      ...ds,\n      name: projectManifest.templates[index].name,\n    }));\n  }\n\n  return [];\n}\n"]}