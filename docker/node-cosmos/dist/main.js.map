{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;AAEtC,uCAA2C;AAC3C,0CAAkD;AAClD,6CAAyC;AACzC,+DAA2D;AAC3D,2CAAuD;AACvD,mCAAyC;AAEzC,MAAM,YAAY,GAAG,IAAI,CAAC;AAC1B,MAAM,MAAM,GAAG,IAAA,kBAAS,EAAC,YAAY,CAAC,CAAC;AACvC,MAAM,EAAE,IAAI,EAAE,GAAG,IAAA,sBAAc,GAAE,CAAC;AAElC,KAAK,UAAU,SAAS;;IACtB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAEzB,MAAM,QAAQ,GAAG,CAAC,CAAM,EAAE,EAAE;QAC1B,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACtB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;IAEF,MAAM,IAAI,GAAG,MAAA,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,mCAAI,CAAC,MAAM,IAAA,0BAAiB,EAAC,YAAY,CAAC,CAAC,CAAC;IAC5E,IAAI,CAAC,IAAI,EAAE;QACT,MAAM,CAAC,KAAK,CACV,wDAAwD,IAAI,KAC1D,IAAI,GAAG,EACT,iEAAiE,CAClE,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;IAED,IAAI,IAAI,CAAC,MAAM,EAAE;QACf,MAAM,CAAC,IAAI,CACT,mHAAmH,CACpH,CAAC;KACH;IAED,IAAI;QACF,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,EAAE;YAC9C,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,mBAAU,EAAE,CAAC,CAAC,CAAC,KAAK;SACzC,CAAC,CAAC;QACH,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAEjB,MAAM,cAAc,GAAG,GAAG,CAAC,GAAG,CAAC,gCAAc,CAAC,CAAC;QAC/C,MAAM,cAAc,CAAC,KAAK,EAAE,CAAC;QAC7B,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEvB,MAAM,CAAC,IAAI,CAAC,yBAAyB,IAAI,EAAE,CAAC,CAAC;KAC9C;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,sBAAsB,CAAC,CAAC;QACxC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;AACH,CAAC;AAED,KAAK,SAAS,EAAE,CAAC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { NestFactory } from '@nestjs/core';\nimport { findAvailablePort } from '@subql/common';\nimport { AppModule } from './app.module';\nimport { IndexerManager } from './indexer/indexer.manager';\nimport { getLogger, NestLogger } from './utils/logger';\nimport { getYargsOption } from './yargs';\n\nconst DEFAULT_PORT = 3000;\nconst logger = getLogger('subql-node');\nconst { argv } = getYargsOption();\n\nasync function bootstrap() {\n  const debug = argv.debug;\n\n  const validate = (x: any) => {\n    const p = parseInt(x);\n    return isNaN(p) ? null : p;\n  };\n\n  const port = validate(argv.port) ?? (await findAvailablePort(DEFAULT_PORT));\n  if (!port) {\n    logger.error(\n      `Unable to find available port (tried ports in range (${port}..${\n        port + 10\n      })). Try setting a free port manually by setting the --port flag`,\n    );\n    process.exit(1);\n  }\n\n  if (argv.unsafe) {\n    logger.warn(\n      'UNSAFE MODE IS ENABLED. This is not recommended for most projects and will not be supported by our hosted service',\n    );\n  }\n\n  try {\n    const app = await NestFactory.create(AppModule, {\n      logger: debug ? new NestLogger() : false,\n    });\n    await app.init();\n\n    const indexerManager = app.get(IndexerManager);\n    await indexerManager.start();\n    await app.listen(port);\n\n    logger.info(`Node started on port: ${port}`);\n  } catch (e) {\n    logger.error(e, 'Node failed to start');\n    process.exit(1);\n  }\n}\n\nvoid bootstrap();\n"]}