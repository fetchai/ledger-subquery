{"version":3,"file":"cosmos.js","sourceRoot":"","sources":["../../src/utils/cosmos.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport assert from 'assert';\nimport { sha256 } from '@cosmjs/crypto';\nimport { toHex } from '@cosmjs/encoding';\nimport { decodeTxRaw } from '@cosmjs/proto-signing';\nimport { Block } from '@cosmjs/stargate';\nimport { Log, parseRawLog } from '@cosmjs/stargate/build/logs';\nimport { BlockResultsResponse, TxData } from '@cosmjs/tendermint-rpc';\nimport { isRuntimeCosmosDs } from '@subql/common-cosmos';\nimport {\n  SubqlCosmosEventFilter,\n  SubqlCosmosMessageFilter,\n  CosmosBlock,\n  CosmosEvent,\n  CosmosTransaction,\n  CosmosMessage,\n  SubqlCosmosHandlerKind,\n} from '@subql/types-cosmos';\nimport { transpileModule } from 'typescript';\nimport { SubqlProjectDs } from '../configure/SubqueryProject';\nimport { CosmosClient } from '../indexer/api.service';\nimport { BlockContent } from '../indexer/types';\nimport { getLogger } from './logger';\n\nconst logger = getLogger('fetch');\n\nexport function filterMessageData(\n  data: CosmosMessage,\n  filter?: SubqlCosmosMessageFilter,\n): boolean {\n  if (!filter) return true;\n  if (filter.type !== data.msg.typeUrl) {\n    return false;\n  }\n  if (filter.values) {\n    for (const key in filter.values) {\n      if (\n        filter.values[key] !==\n        key.split('.').reduce((acc, curr) => acc[curr], data.msg.decodedMsg)\n      ) {\n        return false;\n      }\n    }\n  }\n  if (\n    filter.type === '/cosmwasm.wasm.v1.MsgExecuteContract' &&\n    filter.contractCall &&\n    !(\n      filter.contractCall === data.msg.decodedMsg.msg ||\n      filter.contractCall in data.msg.decodedMsg.msg\n    )\n  ) {\n    return false;\n  }\n  return true;\n}\n\nexport function filterMessages(\n  messages: CosmosMessage[],\n  filterOrFilters?:\n    | SubqlCosmosMessageFilter\n    | SubqlCosmosMessageFilter[]\n    | undefined,\n): CosmosMessage[] {\n  if (\n    !filterOrFilters ||\n    (filterOrFilters instanceof Array && filterOrFilters.length === 0)\n  ) {\n    return messages;\n  }\n\n  const filters =\n    filterOrFilters instanceof Array ? filterOrFilters : [filterOrFilters];\n\n  const filteredMessages = messages.filter((message) => {\n    filters.find((filter) => filterMessageData(message, filter));\n  });\n  return filteredMessages;\n}\n\nexport function filterEvent(\n  event: CosmosEvent,\n  filter?: SubqlCosmosEventFilter,\n): boolean {\n  if (!filter) return true;\n  if (filter.type !== event.event.type) {\n    return false;\n  }\n\n  if (\n    filter.messageFilter &&\n    !filterMessageData(event.msg, filter.messageFilter)\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function filterEvents(\n  events: CosmosEvent[],\n  filterOrFilters?:\n    | SubqlCosmosEventFilter\n    | SubqlCosmosEventFilter[]\n    | undefined,\n): CosmosEvent[] {\n  if (\n    !filterOrFilters ||\n    (filterOrFilters instanceof Array && filterOrFilters.length === 0)\n  ) {\n    return events;\n  }\n\n  const filters =\n    filterOrFilters instanceof Array ? filterOrFilters : [filterOrFilters];\n  const filteredEvents = events.filter((event) => {\n    filters.find((filter) => filterEvent(event, filter));\n  });\n  return filteredEvents;\n}\n\nasync function getBlockByHeight(\n  api: CosmosClient,\n  height: number,\n): Promise<[Block, BlockResultsResponse]> {\n  return Promise.all([\n    api.blockInfo(height).catch((e) => {\n      logger.error(e, `failed to fetch block info ${height}`);\n      throw e;\n    }),\n    api.blockResults(height).catch((e) => {\n      logger.error(e, `failed to fetch block results ${height}`);\n      throw e;\n    }),\n  ]);\n}\n\nexport async function fetchCosmosBlocksArray(\n  api: CosmosClient,\n  blockArray: number[],\n): Promise<[Block, BlockResultsResponse][]> {\n  return Promise.all(\n    blockArray.map(async (height) => getBlockByHeight(api, height)),\n  );\n}\n\nexport function wrapBlock(block: Block, txs: TxData[]): CosmosBlock {\n  return {\n    block: block,\n    txs: txs,\n  };\n}\n\nexport function wrapTx(\n  block: CosmosBlock,\n  txResults: TxData[],\n): CosmosTransaction[] {\n  return txResults.map((tx, idx) => ({\n    idx,\n    block: block,\n    tx,\n    hash: toHex(sha256(block.block.txs[idx])).toUpperCase(),\n    get decodedTx() {\n      delete (this as any).decodedTx;\n      return ((this.decodedTx as any) = decodeTxRaw(block.block.txs[idx]));\n    },\n  }));\n}\n\nfunction wrapCosmosMsg(\n  block: CosmosBlock,\n  tx: CosmosTransaction,\n  idx: number,\n  api: CosmosClient,\n): CosmosMessage {\n  const rawMessage = tx.decodedTx.body.messages[idx];\n  return {\n    idx,\n    tx: tx,\n    block: block,\n    msg: {\n      typeUrl: rawMessage.typeUrl,\n      get decodedMsg() {\n        delete this.decodedMsg;\n        return (this.decodedMsg = api.decodeMsg(rawMessage));\n      },\n    },\n  };\n}\n\nfunction wrapMsg(\n  block: CosmosBlock,\n  txs: CosmosTransaction[],\n  api: CosmosClient,\n): CosmosMessage[] {\n  const msgs: CosmosMessage[] = [];\n  for (const tx of txs) {\n    for (let i = 0; i < tx.decodedTx.body.messages.length; i++) {\n      msgs.push(wrapCosmosMsg(block, tx, i, api));\n    }\n  }\n  return msgs;\n}\n\nexport function wrapEvent(\n  block: CosmosBlock,\n  txs: CosmosTransaction[],\n  api: CosmosClient,\n): CosmosEvent[] {\n  const events: CosmosEvent[] = [];\n  for (const tx of txs) {\n    let logs: Log[];\n    try {\n      logs = parseRawLog(tx.tx.log) as Log[];\n    } catch (e) {\n      //parsing fails if transaction had failed.\n      logger.warn('Failed to parse raw log, most likely a failed transaction');\n      continue;\n    }\n    for (const log of logs) {\n      const msg = wrapCosmosMsg(block, tx, log.msg_index, api);\n      for (let i = 0; i < log.events.length; i++) {\n        const event: CosmosEvent = {\n          idx: i,\n          msg,\n          tx,\n          block,\n          log,\n          event: log.events[i],\n        };\n        events.push(event);\n      }\n    }\n  }\n\n  return events;\n}\n\nexport async function fetchBlocksBatches(\n  api: CosmosClient,\n  blockArray: number[],\n): Promise<BlockContent[]> {\n  const blocks = await fetchCosmosBlocksArray(api, blockArray);\n  return blocks.map(([blockInfo, blockResults]) => {\n    try {\n      assert(\n        blockResults.results.length === blockInfo.txs.length,\n        `txInfos doesn't match up with block (${blockInfo.header.height}) transactions expected ${blockInfo.txs.length}, received: ${blockResults.results.length}`,\n      );\n\n      // Make non-readonly\n      const results = [...blockResults.results];\n\n      return new LazyBlockContent(blockInfo, results, api);\n    } catch (e) {\n      logger.error(\n        e,\n        `Failed to fetch and prepare block ${blockInfo.header.height}`,\n      );\n      throw e;\n    }\n  });\n}\n\nclass LazyBlockContent implements BlockContent {\n  private _wrappedBlock: CosmosBlock;\n  private _wrappedTransaction: CosmosTransaction[];\n  private _wrappedMessage: CosmosMessage[];\n  private _wrappedEvent: CosmosEvent[];\n\n  constructor(\n    private _blockInfo: Block,\n    private _results: TxData[],\n    private _api: CosmosClient,\n  ) {}\n\n  get block() {\n    if (!this._wrappedBlock) {\n      this._wrappedBlock = wrapBlock(this._blockInfo, this._results);\n    }\n    return this._wrappedBlock;\n  }\n\n  get transactions() {\n    if (!this._wrappedTransaction) {\n      this._wrappedTransaction = wrapTx(this.block, this._results);\n    }\n    return this._wrappedTransaction;\n  }\n\n  get messages() {\n    if (!this._wrappedMessage) {\n      this._wrappedMessage = wrapMsg(this.block, this.transactions, this._api);\n    }\n    return this._wrappedMessage;\n  }\n\n  get events() {\n    if (!this._wrappedEvent) {\n      this._wrappedEvent = wrapEvent(this.block, this.transactions, this._api);\n    }\n    return this._wrappedEvent;\n  }\n}\n"]}