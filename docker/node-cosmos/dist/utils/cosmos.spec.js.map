{"version":3,"file":"cosmos.spec.js","sourceRoot":"","sources":["../../src/utils/cosmos.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { CosmWasmClient } from '@cosmjs/cosmwasm-stargate';\nimport {\n  GeneratedType,\n  Registry,\n  decodeTxRaw,\n  DecodedTxRaw,\n} from '@cosmjs/proto-signing';\nimport { defaultRegistryTypes } from '@cosmjs/stargate';\nimport { Tendermint34Client } from '@cosmjs/tendermint-rpc';\nimport {\n  SubqlCosmosMessageFilter,\n  CosmosBlock,\n  CosmosTransaction,\n  CosmosMessage,\n} from '@subql/types-cosmos';\nimport {\n  MsgClearAdmin,\n  MsgExecuteContract,\n  MsgInstantiateContract,\n  MsgMigrateContract,\n  MsgStoreCode,\n  MsgUpdateAdmin,\n} from 'cosmjs-types/cosmwasm/wasm/v1/tx';\nimport { CosmosClient, KeepAliveClient } from '../indexer/api.service';\nimport { filterMessageData, wrapEvent } from './cosmos';\nimport * as CosmosUtil from './cosmos';\n\nconst ENDPOINT = 'https://rpc.juno-1.api.onfinality.io';\nconst CHAINID = 'juno-1';\n\nconst TEST_BLOCKNUMBER = 3266772;\nconst TEST_FAILTX_BLOCKNUMBER = 3451838;\n\nconst TEST_MESSAGE_FILTER_TRUE: SubqlCosmosMessageFilter = {\n  type: '/cosmwasm.wasm.v1.MsgExecuteContract',\n  contractCall: 'swap',\n  values: {\n    sender: 'juno16z990xkfph8vh4wx906k5jzergr4t9fg9sr3y6',\n    contract: 'juno1e8n6ch7msks487ecznyeagmzd5ml2pq9tgedqt2u63vra0q0r9mqrjy6ys',\n  },\n};\n\nconst TEST_MESSAGE_FILTER_FALSE: SubqlCosmosMessageFilter = {\n  type: '/cosmwasm.wasm.v1.MsgExecuteContract',\n  contractCall: 'increment',\n  values: {\n    sender: 'juno16z990xkfph8vh4wx906k5jzergr4t9fg9sr3y6',\n    contract: 'juno1e8n6ch7msks487ecznyeagmzd5ml2pq9tgedqt2u63vra0q0r9mqrjy6ys',\n  },\n};\n\nconst TEST_NESTED_MESSAGE_FILTER_TRUE: SubqlCosmosMessageFilter = {\n  type: '/cosmwasm.wasm.v1.MsgExecuteContract',\n  contractCall: 'swap',\n  values: {\n    'msg.swap.input_token': 'Token1',\n  },\n};\n\nconst TEST_NESTED_MESSAGE_FILTER_FALSE: SubqlCosmosMessageFilter = {\n  type: '/cosmwasm.wasm.v1.MsgExecuteContract',\n  contractCall: 'swap',\n  values: {\n    'msg.swap.input_token': 'Token2',\n  },\n};\n\nconst TEST_NESTED_MESSAGE_FILTER_INVALID_PATH: SubqlCosmosMessageFilter = {\n  type: '/cosmwasm.wasm.v1.MsgExecuteContract',\n  contractCall: 'swap',\n  values: {\n    'msg.swap.input_token.xxx': 'Token2',\n  },\n};\n\nconst TEST_MESSAGE_FILTER_FALSE_2: SubqlCosmosMessageFilter = {\n  type: '/cosmwasm.wasm.v1.MsgStoreCode',\n};\n\ndescribe('CosmosUtils', () => {\n  let api: CosmosClient;\n  let decodedTx: DecodedTxRaw;\n  let msg: CosmosMessage;\n\n  beforeAll(async () => {\n    const client = new KeepAliveClient(ENDPOINT);\n    const tendermint = await Tendermint34Client.create(client);\n    const wasmTypes: ReadonlyArray<[string, GeneratedType]> = [\n      ['/cosmwasm.wasm.v1.MsgClearAdmin', MsgClearAdmin],\n      ['/cosmwasm.wasm.v1.MsgExecuteContract', MsgExecuteContract],\n      ['/cosmwasm.wasm.v1.MsgMigrateContract', MsgMigrateContract],\n      ['/cosmwasm.wasm.v1.MsgStoreCode', MsgStoreCode],\n      ['/cosmwasm.wasm.v1.MsgInstantiateContract', MsgInstantiateContract],\n      ['/cosmwasm.wasm.v1.MsgUpdateAdmin', MsgUpdateAdmin],\n    ];\n\n    const registry = new Registry([...defaultRegistryTypes, ...wasmTypes]);\n    api = new CosmosClient(tendermint, registry);\n    const txInfos = await api.txInfoByHeight(TEST_BLOCKNUMBER);\n    const txInfo = txInfos.find(\n      (txInfo) =>\n        txInfo.hash ===\n        '1A796F30DD866CA2E9A866084CB10BF13B5F6502256D6503E8B1BAC358B15701',\n    );\n    decodedTx = decodeTxRaw(txInfo.tx);\n    msg = {\n      idx: 0,\n      block: {} as CosmosBlock,\n      tx: {} as CosmosTransaction,\n      msg: {\n        typeUrl: decodedTx.body.messages[0].typeUrl,\n        get decodedMsg() {\n          return api.decodeMsg<any>(decodedTx.body.messages[0]);\n        },\n      },\n    };\n  });\n\n  it('filter message data for true', () => {\n    const result = filterMessageData(msg, TEST_MESSAGE_FILTER_TRUE);\n    expect(result).toEqual(true);\n  });\n\n  it('filter message data for false', () => {\n    const result = filterMessageData(msg, TEST_MESSAGE_FILTER_FALSE);\n    expect(result).toEqual(false);\n  });\n\n  it('filter nested message data for true', () => {\n    const result = filterMessageData(msg, TEST_NESTED_MESSAGE_FILTER_TRUE);\n    expect(result).toEqual(true);\n  });\n\n  it('filter nested message data for false', () => {\n    const result = filterMessageData(msg, TEST_NESTED_MESSAGE_FILTER_FALSE);\n    expect(result).toEqual(false);\n  });\n\n  it('filter nested message data for invalid path', () => {\n    const result = filterMessageData(\n      msg,\n      TEST_NESTED_MESSAGE_FILTER_INVALID_PATH,\n    );\n    expect(result).toEqual(false);\n  });\n\n  it('does not wrap events of failed transaction', async () => {\n    const blockInfo = await api.blockResults(TEST_FAILTX_BLOCKNUMBER);\n    const failedTx = blockInfo.results[2];\n    const tx: CosmosTransaction = {\n      idx: 0,\n      block: {} as CosmosBlock,\n      tx: failedTx,\n      hash: '',\n      decodedTx: {} as DecodedTxRaw,\n    };\n    const events = wrapEvent({} as CosmosBlock, [tx], api);\n    expect(events.length).toEqual(0);\n  });\n\n  it('does not lazy decode failed message filters', () => {\n    const spy = jest.spyOn(msg.msg, 'decodedMsg', 'get');\n    const result = filterMessageData(msg, TEST_MESSAGE_FILTER_FALSE_2);\n    expect(spy).not.toHaveBeenCalled();\n  });\n\n  it('lazy decode passed message filters', () => {\n    const spy = jest.spyOn(msg.msg, 'decodedMsg', 'get');\n    const result = filterMessageData(msg, TEST_MESSAGE_FILTER_TRUE);\n    expect(spy).toHaveBeenCalled();\n  });\n});\n"]}