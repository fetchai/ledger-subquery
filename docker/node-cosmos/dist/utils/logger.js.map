{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/utils/logger.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAGtC,wCAAsC;AAEtC,oCAAgC;AAEhC,MAAM,SAAS,GAAG,IAAA,YAAI,EAAC,YAAY,CAAuB,CAAC;AAC3D,MAAM,KAAK,GAAG,IAAA,YAAI,EAAC,OAAO,CAAC,CAAC;AAC5B,MAAM,QAAQ,GAAG,IAAA,YAAI,EAAC,WAAW,CAAuB,CAAC;AAEzD,MAAM,MAAM,GAAG,IAAI,cAAM,CAAC;IACxB,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ;IACjC,YAAY,EAAE,SAAS;IACvB,SAAS,EAAE,SAAS;CACrB,CAAC,CAAC;AAEH,SAAgB,SAAS,CAAC,QAAgB;IACxC,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AACpC,CAAC;AAFD,8BAEC;AAED,SAAgB,QAAQ,CAAC,KAA2B;IAClD,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACzB,CAAC;AAFD,4BAEC;AAED,MAAa,UAAU;IAAvB;QACU,WAAM,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAiB9C,CAAC;IAfC,KAAK,CAAC,OAAY,EAAE,KAAc;QAChC,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,CAAC,CAAC;SACvC;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC5B;IACH,CAAC;IAED,GAAG,CAAC,OAAY;QACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED,IAAI,CAAC,OAAY;QACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;CACF;AAlBD,gCAkBC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { LoggerService } from '@nestjs/common';\nimport { Logger } from '@subql/utils';\nimport Pino from 'pino';\nimport { argv } from '../yargs';\n\nconst outputFmt = argv('output-fmt') as 'json' | 'colored';\nconst debug = argv('debug');\nconst logLevel = argv('log-level') as string | undefined;\n\nconst logger = new Logger({\n  level: debug ? 'debug' : logLevel,\n  outputFormat: outputFmt,\n  nestedKey: 'payload',\n});\n\nexport function getLogger(category: string): Pino.Logger {\n  return logger.getLogger(category);\n}\n\nexport function setLevel(level: Pino.LevelWithSilent): void {\n  logger.setLevel(level);\n}\n\nexport class NestLogger implements LoggerService {\n  private logger = logger.getLogger('nestjs');\n\n  error(message: any, trace?: string): void {\n    if (trace) {\n      this.logger.error({ trace }, message);\n    } else {\n      this.logger.error(message);\n    }\n  }\n\n  log(message: any): any {\n    this.logger.info(message);\n  }\n\n  warn(message: any): any {\n    this.logger.warn(message);\n  }\n}\n"]}