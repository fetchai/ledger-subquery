{"version":3,"file":"graphql.js","sourceRoot":"","sources":["../../src/utils/graphql.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,yCAQwB;AACxB,wCAAsE;AAGtE,SAAgB,2BAA2B,CACzC,SAA4B,EAC5B,KAA0B;IAE1B,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IAChC,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;QACjD,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC;QACjC,MAAM,YAAY,GAAqC;YACrD,IAAI,EAAE,KAAK,CAAC,MAAM;gBAChB,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACxD,CAAC,CAAC,KAAK,CAAC,OAAO;oBACf,CAAC,CAAC,IAAA,2BAAmB,EAAC,MAAM,CAAC,CAAC,aAAa;oBAC3C,CAAC,CAAC,IAAA,2BAAmB,EAAC,KAAK,CAAC,IAAI,CAAC,CAAC,aAAa;YACjD,OAAO,EAAE,KAAK,CAAC,WAAW;YAC1B,SAAS;YACT,UAAU,EAAE,KAAK,CAAC,IAAI,KAAK,IAAI;SAChC,CAAC;QACF,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC3B,YAAY,CAAC,GAAG,GAAG;gBACjB,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAChD,OAAO,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC9C,CAAC,CAAC;YACF,YAAY,CAAC,GAAG,GAAG,UAAU,GAAY;gBACvC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,QAAQ,EAAE,CAAC,CAAC;YACjD,CAAC,CAAC;SACH;QACD,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;YAC1B,YAAY,CAAC,GAAG,GAAG;gBACjB,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAChD,IAAI,CAAC,SAAS,EAAE;oBACd,OAAO,IAAI,CAAC;iBACb;gBACD,IAAI,CAAC,IAAA,eAAQ,EAAC,SAAS,CAAC,EAAE;oBACxB,MAAM,IAAI,KAAK,CACb,qDAAqD,CACtD,CAAC;iBACH;gBACD,OAAO,IAAA,eAAQ,EAAC,IAAA,kBAAW,EAAC,SAAS,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC;YACF,YAAY,CAAC,GAAG,GAAG,UAAU,GAAY;gBACvC,IAAI,GAAG,KAAK,SAAS,IAAI,IAAA,aAAM,EAAC,GAAG,CAAC,EAAE;oBACpC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;iBACrC;qBAAM,IAAI,IAAA,YAAK,EAAC,GAAG,CAAC,EAAE;oBACrB,MAAM,QAAQ,GAAG,IAAA,kBAAW,EAAC,IAAA,eAAQ,EAAC,GAAG,CAAC,CAAC,CAAC;oBAC5C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;iBACzC;qBAAM;oBACL,MAAM,IAAI,KAAK,CACb,qDAAqD,CACtD,CAAC;iBACH;YACH,CAAC,CAAC;SACH;QACD,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;QAC/B,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAA0B,CAAC,CAAC;AACjC,CAAC;AAvDD,kEAuDC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  isHex,\n  hexToU8a,\n  u8aToBuffer,\n  u8aToHex,\n  bufferToU8a,\n  isBuffer,\n  isNull,\n} from '@polkadot/util';\nimport { getTypeByScalarName, GraphQLModelsType } from '@subql/utils';\nimport { ModelAttributes, ModelAttributeColumnOptions } from 'sequelize';\n\nexport function modelsTypeToModelAttributes(\n  modelType: GraphQLModelsType,\n  enums: Map<string, string>,\n): ModelAttributes {\n  const fields = modelType.fields;\n  return Object.values(fields).reduce((acc, field) => {\n    const allowNull = field.nullable;\n    const columnOption: ModelAttributeColumnOptions<any> = {\n      type: field.isEnum\n        ? `${enums.get(field.type)}${field.isArray ? '[]' : ''}`\n        : field.isArray\n        ? getTypeByScalarName('Json').sequelizeType\n        : getTypeByScalarName(field.type).sequelizeType,\n      comment: field.description,\n      allowNull,\n      primaryKey: field.type === 'ID',\n    };\n    if (field.type === 'BigInt') {\n      columnOption.get = function () {\n        const dataValue = this.getDataValue(field.name);\n        return dataValue ? BigInt(dataValue) : null;\n      };\n      columnOption.set = function (val: unknown) {\n        this.setDataValue(field.name, val?.toString());\n      };\n    }\n    if (field.type === 'Bytes') {\n      columnOption.get = function () {\n        const dataValue = this.getDataValue(field.name);\n        if (!dataValue) {\n          return null;\n        }\n        if (!isBuffer(dataValue)) {\n          throw new Error(\n            `Bytes: store.get() returned type is not buffer type`,\n          );\n        }\n        return u8aToHex(bufferToU8a(dataValue));\n      };\n      columnOption.set = function (val: unknown) {\n        if (val === undefined || isNull(val)) {\n          this.setDataValue(field.name, null);\n        } else if (isHex(val)) {\n          const setValue = u8aToBuffer(hexToU8a(val));\n          this.setDataValue(field.name, setValue);\n        } else {\n          throw new Error(\n            `input for Bytes type is only support unprefixed hex`,\n          );\n        }\n      };\n    }\n    acc[field.name] = columnOption;\n    return acc;\n  }, {} as ModelAttributes<any>);\n}\n"]}