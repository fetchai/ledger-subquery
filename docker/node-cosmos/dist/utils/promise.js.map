{"version":3,"file":"promise.js","sourceRoot":"","sources":["../../src/utils/promise.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAE/B,KAAK,UAAU,KAAK,CAAC,GAAW;IACrC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,UAAU,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,sBAIC;AAEM,KAAK,UAAU,OAAO,CAAI,OAAmB,EAAE,GAAW;IAC/D,kDAAkD;IAClD,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;IACjC,OAAO,OAAO,CAAC,IAAI,CAAC;QAClB,OAAO;QACP,IAAI,OAAO,CAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC;KACH,CAAC,CAAC;AACL,CAAC;AATD,0BASC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nexport async function delay(sec: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, sec * 1000);\n  });\n}\n\nexport async function timeout<T>(promise: Promise<T>, sec: number): Promise<T> {\n  // so we can have a more comprehensive error stack\n  const err = new Error('timeout');\n  return Promise.race([\n    promise,\n    new Promise<never>((resolve, reject) => {\n      setTimeout(() => reject(err), sec * 1000);\n    }),\n  ]);\n}\n"]}