{"version":3,"file":"project.js","sourceRoot":"","sources":["../../src/utils/project.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport { GithubReader, IPFSReader, LocalReader, Reader } from '@subql/common';\nimport {\n  isCustomCosmosDs,\n  // loadChainTypesFromJs,\n  SubqlCosmosRuntimeHandler,\n  SubqlCosmosCustomHandler,\n  SubqlCosmosHandler,\n  SubqlCosmosHandlerKind,\n  RuntimeDataSourceV0_3_0,\n  CustomDatasourceV0_3_0,\n} from '@subql/common-cosmos';\nimport * as protobuf from 'protobufjs';\nimport tar from 'tar';\nimport {\n  SubqlProjectDs,\n  CosmosChainType,\n  CosmosProjectNetConfig,\n} from '../configure/SubqueryProject';\n\nexport async function prepareProjectDir(projectPath: string): Promise<string> {\n  const stats = fs.statSync(projectPath);\n  if (stats.isFile()) {\n    const sep = path.sep;\n    const tmpDir = os.tmpdir();\n    const tempPath = fs.mkdtempSync(`${tmpDir}${sep}`);\n    // Will promote errors if incorrect format/extension\n    await tar.x({ file: projectPath, cwd: tempPath });\n    return tempPath.concat('/package');\n  } else if (stats.isDirectory()) {\n    return projectPath;\n  }\n}\n\nexport function isBaseHandler(\n  handler: SubqlCosmosHandler,\n): handler is SubqlCosmosRuntimeHandler {\n  return Object.values<string>(SubqlCosmosHandlerKind).includes(handler.kind);\n}\n\nexport function isCustomHandler(\n  handler: SubqlCosmosHandler,\n): handler is SubqlCosmosCustomHandler {\n  return !isBaseHandler(handler);\n}\n\nexport async function processNetworkConfig(\n  network: any,\n  reader: Reader,\n): Promise<CosmosProjectNetConfig> {\n  if (network.chainId && network.genesisHash) {\n    throw new Error('Please only provide one of chainId and genesisHash');\n  } else if (network.genesisHash && !network.chainId) {\n    network.chainId = network.genesisHash;\n  }\n  delete network.genesisHash;\n\n  const chainTypes = new Map<string, CosmosChainType>() as Map<\n    string,\n    CosmosChainType\n  > & { protoRoot: protobuf.Root };\n  if (!network.chainTypes) {\n    network.chainTypes = chainTypes;\n    return network;\n  }\n\n  const protoRoot = new protobuf.Root();\n  for (const [key, value] of network.chainTypes) {\n    const [packageName, proto] = await loadNetworkChainType(reader, value.file);\n    chainTypes.set(key, { ...value, packageName, proto });\n\n    protoRoot.add(proto);\n  }\n  chainTypes.protoRoot = protoRoot;\n  network.chainTypes = chainTypes;\n  return network;\n}\n\nexport async function updateDataSourcesV0_3_0(\n  _dataSources: (RuntimeDataSourceV0_3_0 | CustomDatasourceV0_3_0)[],\n  reader: Reader,\n  root: string,\n): Promise<SubqlProjectDs[]> {\n  // force convert to updated ds\n  return Promise.all(\n    _dataSources.map(async (dataSource) => {\n      const entryScript = await loadDataSourceScript(\n        reader,\n        dataSource.mapping.file,\n      );\n      const file = await updateDataSourcesEntry(\n        reader,\n        dataSource.mapping.file,\n        root,\n        entryScript,\n      );\n\n      if (isCustomCosmosDs(dataSource)) {\n        if (dataSource.processor) {\n          dataSource.processor.file = await updateProcessor(\n            reader,\n            root,\n            dataSource.processor.file,\n          );\n        }\n        if (dataSource.assets) {\n          for (const [, asset] of dataSource.assets) {\n            if (reader instanceof LocalReader) {\n              asset.file = path.resolve(root, asset.file);\n            } else {\n              const res = await reader.getFile(asset.file);\n              const outputPath = path.resolve(\n                root,\n                asset.file.replace('ipfs://', ''),\n              );\n              await fs.promises.writeFile(outputPath, res as string);\n              asset.file = outputPath;\n            }\n          }\n        }\n        return {\n          ...dataSource,\n          mapping: { ...dataSource.mapping, entryScript, file },\n        };\n      } else {\n        return {\n          ...dataSource,\n          mapping: { ...dataSource.mapping, entryScript, file },\n        };\n      }\n    }),\n  );\n}\n\nasync function updateDataSourcesEntry(\n  reader: Reader,\n  file: string,\n  root: string,\n  script: string,\n): Promise<string> {\n  if (reader instanceof LocalReader) return file;\n  else if (reader instanceof IPFSReader || reader instanceof GithubReader) {\n    const outputPath = `${path.resolve(root, file.replace('ipfs://', ''))}.js`;\n    await fs.promises.writeFile(outputPath, script);\n    return outputPath;\n  }\n}\n\nasync function updateProcessor(\n  reader: Reader,\n  root: string,\n  file: string,\n): Promise<string> {\n  if (reader instanceof LocalReader) {\n    return path.resolve(root, file);\n  } else {\n    const res = await reader.getFile(file);\n    const outputPath = `${path.resolve(root, file.replace('ipfs://', ''))}.js`;\n    await fs.promises.writeFile(outputPath, res);\n    return outputPath;\n  }\n}\n\nexport async function loadDataSourceScript(\n  reader: Reader,\n  file?: string,\n): Promise<string> {\n  let entry: string;\n  const entryScript = await reader.getFile(file ? file : entry);\n  if (entryScript === undefined) {\n    throw new Error(`Entry file ${entry} for datasource not exist`);\n  }\n  return entryScript;\n}\n\nexport async function loadNetworkChainType(\n  reader: Reader,\n  file: string,\n): Promise<[string, protobuf.Root]> {\n  const proto = await reader.getFile(file);\n\n  if (!proto) throw new Error(`Unable to load chain type from ${file}`);\n\n  const { package: packageName, root } = protobuf.parse(proto);\n\n  return [packageName, root];\n}\n\nasync function makeTempDir(): Promise<string> {\n  const sep = path.sep;\n  const tmpDir = os.tmpdir();\n  return fs.promises.mkdtemp(`${tmpDir}${sep}`);\n}\nexport async function getProjectRoot(reader: Reader): Promise<string> {\n  if (reader instanceof LocalReader) return reader.root;\n  if (reader instanceof IPFSReader || reader instanceof GithubReader) {\n    return makeTempDir();\n  }\n}\n"]}