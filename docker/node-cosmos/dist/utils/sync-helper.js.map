{"version":3,"file":"sync-helper.js","sourceRoot":"","sources":["../../src/utils/sync-helper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { underscoredIf } from 'sequelize/lib/utils';\n\nexport interface SmartTags {\n  foreignKey?: string;\n  foreignFieldName?: string;\n  singleForeignFieldName?: string;\n}\n\nconst tagOrder = {\n  foreignKey: 0,\n  foreignFieldName: 1,\n  singleForeignFieldName: 2,\n};\n\nconst byTagOrder = (a: [string, any], b: [string, any]) => {\n  return tagOrder[a[0]] - tagOrder[b[0]];\n};\n\nexport function smartTags(tags: SmartTags, separator = '\\n'): string {\n  return Object.entries(tags)\n    .sort(byTagOrder)\n    .map(([k, v]) => `@${k} ${v}`)\n    .join(separator);\n}\n\nexport function getVirtualFkTag(field: string, to: string) {\n  return `(${underscored(field)}) REFERENCES ${to} (id)`;\n}\n\nconst underscored = (input) => underscoredIf(input, true);\n\nexport function getFkConstraint(tableName: string, foreignKey: string): string {\n  return [tableName, foreignKey, 'fkey'].map(underscored).join('_');\n}\n\nexport function getUniqConstraint(tableName: string, field: string): string {\n  return [tableName, field, 'uindex'].map(underscored).join('_');\n}\n\nfunction getExcludeConstraint(tableName: string): string {\n  return [tableName, '_id', '_block_range', 'exclude']\n    .map(underscored)\n    .join('_');\n}\n\nexport function commentConstraintQuery(\n  table: string,\n  constraint: string,\n  comment: string,\n): string {\n  return `COMMENT ON CONSTRAINT ${constraint} ON ${table} IS E'${comment}'`;\n}\n\nexport function commentTableQuery(column: string, comment: string): string {\n  return `COMMENT ON TABLE ${column} IS E'${comment}'`;\n}\n\nexport function addTagsToForeignKeyMap(\n  map: Map<string, Map<string, SmartTags>>,\n  tableName: string,\n  foreignKey: string,\n  newTags: SmartTags,\n): void {\n  if (!map.has(tableName)) {\n    map.set(tableName, new Map<string, SmartTags>());\n  }\n  const tableKeys = map.get(tableName);\n  let foreignKeyTags = tableKeys.get(foreignKey) || ({} as SmartTags);\n  foreignKeyTags = Object.assign(foreignKeyTags, newTags);\n  tableKeys.set(foreignKey, foreignKeyTags);\n}\n\nexport const BTREE_GIST_EXTENSION_EXIST_QUERY = `SELECT * FROM pg_extension where extname = 'btree_gist'`;\n\nexport function createExcludeConstraintQuery(\n  schema: string,\n  table: string,\n): string {\n  const constraint = getExcludeConstraint(table);\n  return `DO $$\n    BEGIN\n      IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = '${constraint}') THEN\n        ALTER TABLE \"${schema}\".\"${table}\" ADD CONSTRAINT ${constraint} EXCLUDE USING gist (id WITH =, _block_range WITH &&);\n      END IF;\n    END;\n    $$`;\n}\n\nexport function createUniqueIndexQuery(\n  schema: string,\n  table: string,\n  field: string,\n): string {\n  return `create unique index if not exists '${getUniqConstraint(\n    table,\n    field,\n  )}' on '${schema}.${table}' (${underscored(field)})`;\n}\n\nexport const createSendNotificationTriggerFunction = `\nCREATE OR REPLACE FUNCTION send_notification()\n    RETURNS trigger AS $$\nDECLARE\n    row RECORD;\n    payload JSONB;\nBEGIN\n    IF (TG_OP = 'DELETE') THEN\n      row = OLD;\n    ELSE\n      row = NEW;\n    END IF;\n    payload = jsonb_build_object(\n      'id', row.id,\n      'mutation_type', TG_OP,\n      '_entity', row);\n    IF payload -> '_entity' ? '_block_range' THEN\n      IF NOT upper_inf(row._block_range) THEN\n        RETURN NULL;\n      END IF;\n      payload = payload || '{\"mutation_type\": \"UPDATE\"}';\n      payload = payload #- '{\"_entity\",\"_id\"}';\n      payload = payload #- '{\"_entity\",\"_block_range\"}';\n    END IF;\n    IF (octet_length(payload::text) >= 8000) THEN\n      payload = payload || '{\"_entity\": null}';\n    END IF;\n    PERFORM pg_notify(\n      CONCAT(TG_TABLE_SCHEMA, '.', TG_TABLE_NAME),\n      payload::text);\n    RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql;`;\n\nexport function dropNotifyTrigger(schema: string, table: string): string {\n  return `DROP TRIGGER IF EXISTS \"${schema}_${table}_notify_trigger\"\n    ON \"${schema}\".\"${table}\";`;\n}\n\nexport function getNotifyTriggers(): string {\n  return `select trigger_name as \"triggerName\", event_manipulation as \"eventManipulation\" from information_schema.triggers\n          WHERE trigger_name = :triggerName`;\n}\nexport function createNotifyTrigger(schema: string, table: string): string {\n  return `\nCREATE TRIGGER \"${schema}_${table}_notify_trigger\"\n    AFTER INSERT OR UPDATE OR DELETE\n    ON \"${schema}\".\"${table}\"\n    FOR EACH ROW EXECUTE FUNCTION send_notification();`;\n}\n"]}