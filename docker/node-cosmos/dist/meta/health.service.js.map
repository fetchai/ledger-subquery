{"version":3,"file":"health.service.js","sourceRoot":"","sources":["../../src/meta/health.service.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;;;;;;;AAEtC,2CAA4C;AAC5C,yDAAgD;AAChD,+CAA4C;AAC5C,wDAAqD;AACrD,8CAI2B;AAC3B,4DAAwD;AAExD,MAAM,eAAe,GAAG,MAAM,CAAC;AAC/B,MAAM,qBAAqB,GAAG,KAAK,CAAC;AAGpC,IAAa,aAAa,GAA1B,MAAa,aAAa;IASxB,YACY,UAAsB,EACxB,YAA0B;QADxB,eAAU,GAAV,UAAU,CAAY;QACxB,iBAAY,GAAZ,YAAY,CAAc;QAN5B,cAAS,GAAG,IAAI,CAAC;QAQvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAC3B,eAAe,EACf,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAC/B,CAAC;IACJ,CAAC;IAGD,KAAK,CAAC,iBAAiB;QACrB,IAAI,OAAgB,CAAC;QAErB,IAAI;YACF,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,OAAO,GAAG,IAAI,CAAC;SAChB;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,GAAG,KAAK,CAAC;SACjB;QAED,IAAI,OAAO,KAAK,IAAI,CAAC,cAAc,EAAE;YACnC,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YAC/D,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;SAC/B;IACH,CAAC;IAGD,iBAAiB,CAAC,YAAgC;QAChD,IAAI,IAAI,CAAC,iBAAiB,KAAK,YAAY,CAAC,MAAM,EAAE;YAClD,IAAI,CAAC,iBAAiB,GAAG,YAAY,CAAC,MAAM,CAAC;YAC7C,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;SACxC;IACH,CAAC;IAGD,qBAAqB,CAAC,YAAiC;QACrD,IAAI,IAAI,CAAC,uBAAuB,KAAK,YAAY,CAAC,MAAM,EAAE;YACxD,IAAI,CAAC,uBAAuB,GAAG,YAAY,CAAC,MAAM,CAAC;YACnD,IAAI,CAAC,0BAA0B,GAAG,YAAY,CAAC,SAAS,CAAC;SAC1D;IACH,CAAC;IAED,SAAS;QACP,IACE,IAAI,CAAC,oBAAoB;YACzB,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS,GAAG,EAAE,EAC5D;YACA,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC5C;QACD,IACE,IAAI,CAAC,0BAA0B;YAC/B,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,aAAa,EACjE;YACA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;IACH,CAAC;CACF,CAAA;AA9CC;IADC,IAAA,mBAAQ,EAAC,qBAAqB,CAAC;;;;sDAe/B;AAGD;IADC,IAAA,uBAAO,EAAC,qBAAY,CAAC,WAAW,CAAC;;;;sDAMjC;AAGD;IADC,IAAA,uBAAO,EAAC,qBAAY,CAAC,eAAe,CAAC;;;;0DAMrC;AAlDU,aAAa;IADzB,IAAA,mBAAU,GAAE;qCAWa,uBAAU;QACV,4BAAY;GAXzB,aAAa,CAkEzB;AAlEY,sCAAa","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Interval } from '@nestjs/schedule';\nimport { NodeConfig } from '../configure/NodeConfig';\nimport {\n  IndexerEvent,\n  ProcessBlockPayload,\n  TargetBlockPayload,\n} from '../indexer/events';\nimport { StoreService } from '../indexer/store.service';\n\nconst DEFAULT_TIMEOUT = 900000;\nconst CHECK_HEALTH_INTERVAL = 60000;\n\n@Injectable()\nexport class HealthService {\n  private recordBlockHeight?: number;\n  private recordBlockTimestamp?: number;\n  private currentProcessingHeight?: number;\n  private currentProcessingTimestamp?: number;\n  private blockTime = 6000;\n  private healthTimeout: number;\n  private indexerHealthy: boolean;\n\n  constructor(\n    protected nodeConfig: NodeConfig,\n    private storeService: StoreService,\n  ) {\n    this.healthTimeout = Math.max(\n      DEFAULT_TIMEOUT,\n      this.nodeConfig.timeout * 1000,\n    );\n  }\n\n  @Interval(CHECK_HEALTH_INTERVAL)\n  async checkHealthStatus() {\n    let healthy: boolean;\n\n    try {\n      this.getHealth();\n      healthy = true;\n    } catch (e) {\n      healthy = false;\n    }\n\n    if (healthy !== this.indexerHealthy) {\n      await this.storeService.setMetadata('indexerHealthy', healthy);\n      this.indexerHealthy = healthy;\n    }\n  }\n\n  @OnEvent(IndexerEvent.BlockTarget)\n  handleTargetBlock(blockPayload: TargetBlockPayload): void {\n    if (this.recordBlockHeight !== blockPayload.height) {\n      this.recordBlockHeight = blockPayload.height;\n      this.recordBlockTimestamp = Date.now();\n    }\n  }\n\n  @OnEvent(IndexerEvent.BlockProcessing)\n  handleProcessingBlock(blockPayload: ProcessBlockPayload): void {\n    if (this.currentProcessingHeight !== blockPayload.height) {\n      this.currentProcessingHeight = blockPayload.height;\n      this.currentProcessingTimestamp = blockPayload.timestamp;\n    }\n  }\n\n  getHealth() {\n    if (\n      this.recordBlockTimestamp &&\n      Date.now() - this.recordBlockTimestamp > this.blockTime * 10\n    ) {\n      throw new Error('Endpoint is not healthy');\n    }\n    if (\n      this.currentProcessingTimestamp &&\n      Date.now() - this.currentProcessingTimestamp > this.healthTimeout\n    ) {\n      throw new Error('Indexer is not healthy');\n    }\n  }\n}\n"]}