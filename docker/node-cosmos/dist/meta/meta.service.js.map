{"version":3,"file":"meta.service.js","sourceRoot":"","sources":["../../src/meta/meta.service.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Interval } from '@nestjs/schedule';\nimport {\n  BestBlockPayload,\n  EventPayload,\n  IndexerEvent,\n  NetworkMetadataPayload,\n  ProcessBlockPayload,\n  TargetBlockPayload,\n} from '../indexer/events';\nimport { StoreService } from '../indexer/store.service';\n\nconst UPDATE_HEIGHT_INTERVAL = 60000;\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { version: cosmosSdkVersion } = require('@cosmjs/stargate/package.json');\nconst { version: packageVersion } = require('../../package.json');\n\n@Injectable()\nexport class MetaService {\n  private currentProcessingHeight: number;\n  private currentProcessingTimestamp: number;\n  private bestHeight: number;\n  private targetHeight: number;\n  private networkMeta: NetworkMetadataPayload;\n  private apiConnected: boolean;\n  private usingDictionary: boolean;\n  private injectedApiConnected: boolean;\n  private lastProcessedHeight: number;\n  private lastProcessedTimestamp: number;\n\n  constructor(private storeService: StoreService) {}\n\n  getMeta() {\n    return {\n      currentProcessingHeight: this.currentProcessingHeight,\n      currentProcessingTimestamp: this.currentProcessingTimestamp,\n      targetHeight: this.targetHeight,\n      bestHeight: this.bestHeight,\n      indexerNodeVersion: packageVersion,\n      lastProcessedHeight: this.lastProcessedHeight,\n      lastProcessedTimestamp: this.lastProcessedTimestamp,\n      uptime: process.uptime(),\n      cosmosSdkVersion,\n      apiConnected: this.apiConnected,\n      injectedApiConnected: this.injectedApiConnected,\n      usingDictionary: this.usingDictionary,\n      ...this.networkMeta,\n    };\n  }\n\n  @Interval(UPDATE_HEIGHT_INTERVAL)\n  async getTargetHeight(): Promise<void> {\n    await this.storeService.setMetadata('targetHeight', this.targetHeight);\n  }\n\n  @OnEvent(IndexerEvent.BlockProcessing)\n  handleProcessingBlock(blockPayload: ProcessBlockPayload): void {\n    this.currentProcessingHeight = blockPayload.height;\n    this.currentProcessingTimestamp = blockPayload.timestamp;\n  }\n\n  @OnEvent(IndexerEvent.BlockTarget)\n  handleTargetBlock(blockPayload: TargetBlockPayload): void {\n    this.targetHeight = blockPayload.height;\n  }\n\n  @OnEvent(IndexerEvent.BlockBest)\n  handleBestBlock(blockPayload: BestBlockPayload): void {\n    this.bestHeight = blockPayload.height;\n  }\n\n  @OnEvent(IndexerEvent.NetworkMetadata)\n  handleNetworkMetadata(networkMeta: NetworkMetadataPayload): void {\n    this.networkMeta = networkMeta;\n  }\n\n  @OnEvent(IndexerEvent.ApiConnected)\n  handleApiConnected({ value }: EventPayload<number>): void {\n    this.apiConnected = !!value;\n  }\n\n  @OnEvent(IndexerEvent.InjectedApiConnected)\n  handleInjectedApiConnected({ value }: EventPayload<number>): void {\n    this.injectedApiConnected = !!value;\n  }\n\n  @OnEvent(IndexerEvent.UsingDictionary)\n  handleUsingDictionary({ value }: EventPayload<number>): void {\n    this.usingDictionary = !!value;\n  }\n}\n"]}