{"version":3,"file":"meta.module.js","sourceRoot":"","sources":["../../src/meta/meta.module.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;;;;;;;AAEtC,2CAAwC;AACxC,mEAGqC;AACrC,8DAA0D;AAC1D,qDAAuD;AACvD,2DAAuD;AACvD,qDAAiD;AACjD,uDAAmD;AACnD,iDAA6C;AAC7C,+DAA2D;AAC3D,yDAAqD;AACrD,mDAA+C;AAyD/C,IAAa,UAAU,GAAvB,MAAa,UAAU;CAAG,CAAA;AAAb,UAAU;IAvDtB,IAAA,eAAM,EAAC;QACN,OAAO,EAAE,CAAC,oCAAgB,CAAC,QAAQ,EAAE,EAAE,8BAAa,CAAC;QACrD,WAAW,EAAE;YACX,gCAAc;YACd,oCAAgB;YAChB,kCAAe;YACf,wCAAkB;SACnB;QACD,SAAS,EAAE;YACT,oCAAmB;YACnB,IAAA,qCAAiB,EAAC;gBAChB,IAAI,EAAE,6BAA6B;gBACnC,IAAI,EAAE,mCAAmC;aAC1C,CAAC;YACF,IAAA,qCAAiB,EAAC;gBAChB,IAAI,EAAE,sCAAsC;gBAC5C,IAAI,EAAE,4CAA4C;aACnD,CAAC;YACF,IAAA,qCAAiB,EAAC;gBAChB,IAAI,EAAE,uCAAuC;gBAC7C,IAAI,EAAE,qCAAqC;aAC5C,CAAC;YACF,IAAA,qCAAiB,EAAC;gBAChB,IAAI,EAAE,sCAAsC;gBAC5C,IAAI,EAAE,iCAAiC;aACxC,CAAC;YACF,IAAA,qCAAiB,EAAC;gBAChB,IAAI,EAAE,mCAAmC;gBACzC,IAAI,EAAE,mCAAmC;aAC1C,CAAC;YACF,IAAA,qCAAiB,EAAC;gBAChB,IAAI,EAAE,iCAAiC;gBACvC,IAAI,EAAE,8BAA8B;aACrC,CAAC;YACF,IAAA,qCAAiB,EAAC;gBAChB,IAAI,EAAE,gCAAgC;gBACtC,IAAI,EAAE,iCAAiC;aACxC,CAAC;YACF,IAAA,qCAAiB,EAAC;gBAChB,IAAI,EAAE,sCAAsC;gBAC5C,IAAI,EAAE,wCAAwC;aAC/C,CAAC;YACF,IAAA,qCAAiB,EAAC;gBAChB,IAAI,EAAE,gCAAgC;gBACtC,IAAI,EAAE,+CAA+C;aACtD,CAAC;YACF,IAAA,qCAAiB,EAAC;gBAChB,IAAI,EAAE,qCAAqC;gBAC3C,IAAI,EAAE,sDAAsD;aAC7D,CAAC;YACF,0BAAW;YACX,8BAAa;YACb,4BAAY;SACb;KACF,CAAC;GACW,UAAU,CAAG;AAAb,gCAAU","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Module } from '@nestjs/common';\nimport {\n  makeGaugeProvider,\n  PrometheusModule,\n} from '@willsoto/nestjs-prometheus';\nimport { IndexerModule } from '../indexer/indexer.module';\nimport { MetricEventListener } from './event.listener';\nimport { HealthController } from './health.controller';\nimport { HealthService } from './health.service';\nimport { MetaController } from './meta.controller';\nimport { MetaService } from './meta.service';\nimport { MmrQueryController } from './mmrQuery.controller';\nimport { ReadyController } from './ready.controller';\nimport { ReadyService } from './ready.service';\n\n@Module({\n  imports: [PrometheusModule.register(), IndexerModule],\n  controllers: [\n    MetaController,\n    HealthController,\n    ReadyController,\n    MmrQueryController,\n  ],\n  providers: [\n    MetricEventListener,\n    makeGaugeProvider({\n      name: 'subql_indexer_api_connected',\n      help: 'The indexer api connection status',\n    }),\n    makeGaugeProvider({\n      name: 'subql_indexer_injected_api_connected',\n      help: 'The indexer injected api connection status',\n    }),\n    makeGaugeProvider({\n      name: 'subql_indexer_processing_block_height',\n      help: 'The current processing block height',\n    }),\n    makeGaugeProvider({\n      name: 'subql_indexer_processed_block_height',\n      help: 'The last processed block height',\n    }),\n    makeGaugeProvider({\n      name: 'subql_indexer_target_block_height',\n      help: 'The latest finalized block height',\n    }),\n    makeGaugeProvider({\n      name: 'subql_indexer_best_block_height',\n      help: 'The latest best block height',\n    }),\n    makeGaugeProvider({\n      name: 'subql_indexer_block_queue_size',\n      help: 'The size of fetched block queue',\n    }),\n    makeGaugeProvider({\n      name: 'subql_indexer_blocknumber_queue_size',\n      help: 'The size of fetched block number queue',\n    }),\n    makeGaugeProvider({\n      name: 'subql_indexer_using_dictionary',\n      help: 'The status of indexer is using the dictionary',\n    }),\n    makeGaugeProvider({\n      name: 'subql_indexer_skip_dictionary_count',\n      help: 'The number of times indexer been skip use dictionary',\n    }),\n    MetaService,\n    HealthService,\n    ReadyService,\n  ],\n})\nexport class MetaModule {}\n"]}