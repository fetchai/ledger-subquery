{"version":3,"file":"db.module.js","sourceRoot":"","sources":["../../src/db/db.module.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DynamicModule, Global } from '@nestjs/common';\nimport { Sequelize } from 'sequelize';\nimport { Options as SequelizeOption } from 'sequelize/types';\nimport * as entities from '../entities';\nimport { getLogger } from '../utils/logger';\nimport { delay } from '../utils/promise';\nimport { getYargsOption } from '../yargs';\n\nexport interface DbOption {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  database: string;\n}\n\nconst logger = getLogger('db');\n\nasync function establishConnection(\n  sequelize: Sequelize,\n  numRetries: number,\n): Promise<void> {\n  try {\n    await sequelize.authenticate();\n  } catch (error) {\n    logger.error(error, 'Unable to connect to the database');\n    if (numRetries > 0) {\n      await delay(3);\n      void (await establishConnection(sequelize, numRetries - 1));\n    } else {\n      process.exit(1);\n    }\n  }\n}\n\nconst sequelizeFactory = (option: SequelizeOption) => async () => {\n  const sequelize = new Sequelize(option);\n  const numRetries = 5;\n  await establishConnection(sequelize, numRetries);\n  for (const factoryFn of Object.keys(entities).filter((k) =>\n    /Factory$/.exec(k),\n  )) {\n    entities[factoryFn](sequelize);\n  }\n  const { migrate } = getYargsOption().argv;\n  await sequelize.sync({ alter: migrate });\n  return sequelize;\n};\n\n@Global()\nexport class DbModule {\n  static forRoot(option: DbOption): DynamicModule {\n    const { argv } = getYargsOption();\n    const logger = getLogger('db');\n    return {\n      module: DbModule,\n      providers: [\n        {\n          provide: Sequelize,\n          useFactory: sequelizeFactory({\n            ...option,\n            dialect: 'postgres',\n            logging: argv.debug\n              ? (sql: string, timing?: number) => {\n                  logger.debug(sql);\n                }\n              : false,\n          }),\n        },\n      ],\n      exports: [Sequelize],\n    };\n  }\n\n  static forFeature(models: string[]): DynamicModule {\n    return {\n      module: DbModule,\n      providers: models.map((model) => ({\n        provide: model,\n        inject: [Sequelize],\n        useFactory: (sequelize: Sequelize) => sequelize.model(model),\n      })),\n      exports: models,\n    };\n  }\n}\n"]}